Relational DB & SQL - Exercise 2022-08-04 - Join Queries, Sorting, Grouping & Aggregates

Carl Tang Yong Han


### Join Queries
________________________________________________________________
USE PersonalTrainer;

-- Select all columns from ExerciseCategory and Exercise.
-- The tables should be joined on ExerciseCategoryId.
-- This query returns all Exercises and their associated ExerciseCategory.
-- 64 rows

SELECT * 
FROM Exercise
LEFT OUTER JOIN ExerciseCategory ON Exercise.ExerciseCategoryId = ExerciseCategory.ExerciseCategoryId;
-- Outcome: 64 rows returned.

________________________________________________________________
-- Select ExerciseCategory.Name and Exercise.Name
-- where the ExerciseCategory does not have a ParentCategoryId (it is null).
-- Again, join the tables on their shared key (ExerciseCategoryId).
-- 9 rows

SELECT ExerciseCategory.`Name`, Exercise.`Name`
FROM ExerciseCategory
INNER JOIN Exercise ON ExerciseCategory.ExerciseCategoryId = Exercise.ExerciseCategoryId
WHERE ExerciseCategory.ParentCategoryId IS NULL;
-- Outcome: 9 rows returned.

________________________________________________________________
-- The query above is a little confusing. At first glance, it's hard to tell
-- which Name belongs to ExerciseCategory and which belongs to Exercise.
-- Rewrite the query using an aliases. 
-- Alias ExerciseCategory.Name as 'CategoryName'.
-- Alias Exercise.Name as 'ExerciseName'.
-- 9 rows

SELECT ExerciseCategory.`Name`AS CategoryName, Exercise.`Name` AS ExerciseName
FROM ExerciseCategory
INNER JOIN Exercise ON ExerciseCategory.ExerciseCategoryId = Exercise.ExerciseCategoryId
WHERE ExerciseCategory.ParentCategoryId IS NULL;
-- Outcome: 9 rows returned.

________________________________________________________________
-- Select FirstName, LastName, and BirthDate from Client
-- and EmailAddress from Login 
-- where Client.BirthDate is in the 1990s.
-- Join the tables by their key relationship. 
-- What is the primary-foreign key relationship?
-- 35 rows

SELECT `Client`.FirstName, `Client`.LastName, `Client`.BirthDate, Login.EmailAddress
FROM `Client`
INNER JOIN Login ON `Client`.ClientId = Login.ClientId
WHERE `Client`.BirthDate BETWEEN '1990-01-01' AND '1999-12-31';
-- Answer: Both the tables Client and Login has the same primary key, i.e. ClientId,
--         and both use one's own primary key also as the foreign key to access the
--         the other table's primary key.
-- Outcome: 35 rows returned.

________________________________________________________________
-- Select Workout.Name, Client.FirstName, and Client.LastName
-- for Clients with LastNames starting with 'C'?
-- How are Clients and Workouts related?
-- 25 rows

SELECT Workout.`Name`, `Client`.FirstName, `Client`.LastName
FROM Workout
INNER JOIN ClientWorkout ON Workout.WorkoutId = ClientWorkout.WorkoutId
INNER JOIN `Client` ON ClientWorkout.ClientId = `Client`.ClientId
WHERE `Client`.LastName LIKE 'C%';
-- Answer: Client table is related to Workout table through
--         a bridging table, i.e. ClientWorkout, in which two columns in
--         ClientWorkout (ClientId and WorkoutId) each link to the other
--         two tables respectively.
-- Outcome: 25 rows returned.

________________________________________________________________
-- Select Names from Workouts and their Goals.
-- This is a many-to-many relationship with a bridge table.
-- Use aliases appropriately to avoid ambiguous columns in the result.

SELECT Workout.`Name` AS WorkoutName, Goal.`Name` AS GoalName
FROM Workout
INNER JOIN WorkoutGoal ON Workout.WorkoutId = WorkoutGoal.WorkoutId
INNER JOIN Goal ON WorkoutGoal.GoalId = Goal.GoalId;
-- Outcome: 78 rows returned.

________________________________________________________________
-- Select FirstName and LastName from Client.
-- Select ClientId and EmailAddress from Login.
-- Join the tables, but make Login optional.
-- 500 rows

SELECT `Client`.FirstName, `Client`.LastName, Login.ClientId, Login.EmailAddress
FROM `Client`
LEFT OUTER JOIN Login ON `Client`.ClientId = Login.ClientId;
-- 500 rows returned.

________________________________________________________________
-- Using the query above as a foundation, select Clients
-- who do _not_ have a Login.
-- 200 rows

SELECT `Client`.FirstName, `Client`.LastName, Login.ClientId, Login.EmailAddress
FROM `Client`
LEFT OUTER JOIN Login ON `Client`.ClientId = Login.ClientId
WHERE Login.EmailAddress IS NULL;
-- 200 rows returned.

________________________________________________________________
-- Does the Client, Romeo Seaward, have a Login?
-- Decide using a single query.
-- nope :(

SELECT `Client`.FirstName, `Client`.LastName,
	     `Client`.ClientId AS Id_For_Client,
       Login.ClientId AS Id_For_Login,
       Login.EmailAddress
FROM `Client`
LEFT OUTER JOIN Login ON `Client`.ClientId = Login.ClientId
WHERE `Client`.FirstName = 'Romeo' AND `Client`.LastName = 'Seaward';
-- Answer: Client Romeo Seaward does not have a login.
--         In fact, he does not even have his ClientId in the Login table,
--         much less his email address.

________________________________________________________________
-- Select ExerciseCategory.Name and its parent ExerciseCategory's Name.
-- This requires a self-join.
-- 12 rows

SELECT child.`Name` ParentName, parent.`Name` ChildName
FROM ExerciseCategory child
INNER JOIN ExerciseCategory parent ON parent.ExerciseCategoryID = child.ExerciseCategoryID
WHERE child.ParentCategoryId IS NOT NULL;
-- 12 rows returned.

________________________________________________________________
-- Rewrite the query above so that every ExerciseCategory.Name is
-- included, even if it doesn't have a parent.
-- 16 rows

SELECT child.`Name` ParentName, parent.`Name` ChildName
FROM ExerciseCategory child
LEFT OUTER JOIN ExerciseCategory parent ON parent.ExerciseCategoryID = child.ExerciseCategoryID;
-- 16 rows returned.

________________________________________________________________
-- Are there Clients who are not signed up for a Workout?
-- 50 rows

SELECT `Client`.FirstName, `Client`.LastName, `Client`.ClientId, ClientWorkout.WorkoutId
FROM `Client`
LEFT OUTER JOIN ClientWorkout ON `Client`.ClientId = ClientWorkout.ClientId
WHERE ClientWorkout.WorkoutId IS NULL;
-- 50 rows returned.

________________________________________________________________
-- Which Beginner-Level Workouts satisfy at least one of Shell Creane's Goals?
-- Goals are associated to Clients through ClientGoal.
-- Goals are associated to Workouts through WorkoutGoal.
-- 6 rows, 4 unique rows

SELECT Workout.`Name`, Goal.`Name` AS 'Goal_of_Workout', Goal.`Name` AS 'Goal_of_Client'
FROM Workout
JOIN WorkoutGoal ON Workout.WorkoutId = WorkoutGoal.WorkoutId
JOIN Goal ON WorkoutGoal.GoalId = Goal.GoalId
JOIN ClientGoal ON Goal.GoalId = ClientGoal.GoalId
JOIN `Client` ON ClientGoal.ClientID = `Client`.ClientID
WHERE (`Client`.FirstName = 'Shell' AND `Client`.LastName = 'Creane') AND
	  (Workout.LevelId = 1);
-- Outcome: 6 rows returned. Out of these 6 rows, there are 4 Level 1 workouts
--          that satisfy at least one of Shell Creane's Goals, which are:
--          'Get In Shape Beginners Cardio', 'The "I don't have time..." Workout',
--          '3, 2, 1... Yoga!', and 'Intro to Free Weights'.

________________________________________________________________
-- Select all Workouts. 
-- Join to the Goal, 'Core Strength', but make it optional.
-- You may have to look up the GoalId before writing the main query.
-- If you filter on Goal.Name in a WHERE clause, Workouts will be excluded.
-- Why?
-- 26 Workouts, 3 Goals

SELECT `Name`, GoalId
FROM Goal
WHERE `Name` = 'Core Strength'
LIMIT 1;
-- The Goal, 'Core Strength' has a GoalId of 10 from the above query.

SELECT *
FROM Workout
LEFT OUTER JOIN WorkoutGoal ON Workout.WorkoutId = WorkoutGoal.WorkoutId
WHERE GoalId = 10
-- 4 rows returned.

-- Alternative method:
SELECT *
FROM Workout
LEFT OUTER JOIN WorkoutGoal ON Workout.WorkoutId = WorkoutGoal.WorkoutId
LEFT OUTER JOIN Goal ON WorkoutGoal.GoalId = Goal.GoalId
WHERE Goal.`Name` = 'Core Strength';
-- 4 rows returned

-- The above two methods give the same results, none of which gives the result
-- that the question is asking for.

-- If I were to interpret the question differently, this is what I would do:
SELECT * FROM Workout;
-- 26 rows of workouts are returned, as expected.

SELECT * FROM Goal
JOIN WorkoutGoal ON Goal.GoalId = WorkoutGoal.GoalID
JOIN Workout ON WorkoutGoal.WorkoutId = Workout.WorkoutId
WHERE Goal.`Name` = 'Core Strength';
-- However, in this case the outcome is still the same 4 rows of the same WorkoutId: 1, 10, 24, 26.

________________________________________________________________
-- The relationship between Workouts and Exercises is... complicated.
-- Workout links to WorkoutDay (one day in a Workout routine)
-- which links to WorkoutDayExerciseInstance 
-- (Exercises can be repeated in a day so a bridge table is required) 
-- which links to ExerciseInstance 
-- (Exercises can be done with different weights, repetions,
-- laps, etc...) 
-- which finally links to Exercise.
-- Select Workout.Name and Exercise.Name for related Workouts and Exercises.

SELECT Workout.`Name` AS Workout_Name, Exercise.`Name` AS Exercise_Name
FROM Workout
JOIN WorkoutDay ON Workout.WorkoutId = WorkoutDay.WorkoutId
JOIN WorkoutDayExerciseInstance ON WorkoutDay.WorkoutDayId = WorkoutDayExerciseInstance.WorkoutDayId
JOIN ExerciseInstance ON WorkoutDayExerciseInstance.ExerciseInstanceId = ExerciseInstance.ExerciseInstanceId
JOIN Exercise ON ExerciseInstance.ExerciseId = Exercise.ExerciseId;
-- 744 rows returned.

________________________________________________________________
-- An ExerciseInstance is configured with ExerciseInstanceUnitValue.
-- It contains a Value and UnitId that links to Unit.
-- Example Unit/Value combos include 10 laps, 15 minutes, 200 pounds.
-- Select Exercise.Name, ExerciseInstanceUnitValue.Value, and Unit.Name
-- for the 'Plank' exercise. 
-- How many Planks are configured, which Units apply, and what 
-- are the configured Values?
-- 4 rows, 1 Unit, and 4 distinct Values

SELECT Exercise.`Name` AS Exercise_Name,
       ExerciseInstanceUnitValue.`Value` AS Instance_Unit_Value,
       Unit.`Name` AS Unit_Name
FROM Exercise
JOIN ExerciseInstance
  ON Exercise.ExerciseId = ExerciseInstance.ExerciseId
JOIN ExerciseInstanceUnitValue
  ON ExerciseInstance.ExerciseInstanceId = ExerciseInstanceUnitValue.ExerciseInstanceId
JOIN Unit
  ON ExerciseInstanceUnitValue.UnitId = Unit.UnitId
WHERE Exercise.`Name` = 'Plank';
-- Outcome: 4 rows returned with Exercise_Name 'Plank',
-- with 4 different instance values, all sharing the same unit name 'Minutes'.

________________________________________________________________
________________________________________________________________



### Exercise: Aggregate Queries
________________________________________________________________
use PersonalTrainer;

-- Use an aggregate to count the number of Clients.
-- 500 rows

SELECT COUNT(*) FROM `Client`;
-- Outcome: 1 row, with value of COUNT(*) being 500.

________________________________________________________________
-- Use an aggregate to count Client.BirthDate.
-- The number is different than total Clients. Why?
-- 463 rows

SELECT COUNT(BirthDate) FROM `Client`;
-- Outcome: 1 row, with value of COUNT(BirthDate) being 463.
-- To find out why the number is different,
-- we can test and see if any of the lost counts are due to NULL values of BirthDate:
 SELECT COUNT(ClientId) FROM `Client`
 WHERE BirthDate IS NULL;
 -- Outcome: 1 row, with value of COUNT(ClientId) being 37.
 -- This shows that there are indeed 37 clients whose BirthDate is NULL,
 -- which explains the missing 37 counts out of the previous 500 counts.

________________________________________________________________
-- Group Clients by City and count them.
-- Order by the number of Clients desc.
-- 20 rows

SELECT City, COUNT(City) AS Clients_From_City
FROM `Client`
GROUP BY City
ORDER BY COUNT(ClientId) DESC;
-- Outcome: 20 rows returned, starting from New Orleans with 105 clients,
--          followed by Jefferson with 30 clients.

________________________________________________________________
-- Calculate a total per invoice using only the InvoiceLineItem table.
-- Group by InvoiceId.
-- You'll need an expression for the line item total: Price * Quantity.
-- Aggregate per group using SUM().
-- 1000 rows

SELECT InvoiceId, SUM(Price * Quantity) AS Total_Per_Invoice
FROM InvoiceLineItem
GROUP BY InvoiceId;
-- Outcome: 1000 rows returned.

________________________________________________________________
-- Calculate a total per invoice using only the InvoiceLineItem table.
-- (See above.)
-- Only include totals greater than $500.00.
-- Order from lowest total to highest.
-- 234 rows

SELECT InvoiceId, SUM(Price * Quantity) AS Total_Per_Invoice
FROM InvoiceLineItem
GROUP BY InvoiceId
HAVING SUM(Price * Quantity) > 500
ORDER BY SUM(Price * Quantity) ASC;
-- Outcome: 234 rows returned.

________________________________________________________________
-- Calculate the average line item total
-- grouped by InvoiceLineItem.Description.
-- 3 rows

SELECT `Description`, AVG(Price * Quantity) AS Average_Line_Item_Total
FROM InvoiceLineItem
GROUP BY `Description`;
-- Outcome: 3 rows returned.

________________________________________________________________
-- Select ClientId, FirstName, and LastName from Client
-- for clients who have *paid* over $1000 total.
-- Paid is Invoice.InvoiceStatus = 2.
-- Order by LastName, then FirstName.
-- 146 rows

SELECT `Client`.ClientId, `Client`.FirstName, `Client`.LastName
FROM `Client`
JOIN Invoice ON `Client`.ClientId = Invoice.ClientId
JOIN InvoiceLineItem ON Invoice.InvoiceId = InvoiceLineItem.InvoiceID
WHERE Invoice.InvoiceStatus = 2
GROUP BY `Client`.ClientId
HAVING SUM(InvoiceLineItem.Price * InvoiceLineItem.Quantity) > 1000
ORDER BY `Client`.LastName, `Client`.FirstName;
-- Outcome: 146 rows returned, starting from client Randal Aberkirdo.

________________________________________________________________
-- Count exercises by category.
-- Group by ExerciseCategory.Name.
-- Order by exercise count descending.
-- 13 rows

SELECT ExerciseCategory.`Name` AS Exercise_Category_Name,
       COUNT(Exercise.ExerciseId) AS Exercise_Count
FROM ExerciseCategory
JOIN Exercise ON ExerciseCategory.ExerciseCategoryId = Exercise.ExerciseCategoryId
GROUP BY ExerciseCategory.`Name`
ORDER BY COUNT(Exercise.ExerciseId) DESC;
-- Outcome: 13 rows returned

________________________________________________________________
-- Select Exercise.Name along with the minimum, maximum,
-- and average ExerciseInstance.Sets.
-- Order by Exercise.Name.
-- 64 rows

SELECT Exercise.`Name` AS Exercise_Name,
       MIN(ExerciseInstance.Sets) AS Min_Exercise_Instance_Sets,
	   MAX(ExerciseInstance.Sets) AS Max_Exercise_Instance_Sets,
       AVG(ExerciseInstance.Sets) AS Average_Exercise_Instance_Sets
FROM Exercise
LEFT OUTER JOIN ExerciseInstance ON Exercise.ExerciseId = ExerciseInstance.ExerciseId
GROUP BY Exercise.ExerciseId -- In case certain Exercise IDs share the same names.
ORDER BY Exercise.`Name`;
-- Outcome: 64 rows returned. Note that some Exercise Names are repeated.
--          If Exercise Names that are the same are grouped together,
--          there would be only 61 rows returned.

________________________________________________________________
-- Find the minimum and maximum Client.BirthDate
-- per Workout.
-- 26 rows
-- Sample: 
-- WorkoutName, EarliestBirthDate, LatestBirthDate
-- '3, 2, 1... Yoga!', '1928-04-28', '1993-02-07'

SELECT Workout.`Name` AS WorkoutName,
       MIN(`Client`.BirthDate) AS EarliestBirthDate,
       MAX(`Client`.BirthDate) AS LatestBirthDate
FROM Workout
JOIN ClientWorkout ON Workout.WorkoutId = ClientWorkout.WorkoutId
JOIN `Client` ON ClientWorkout.ClientId = `Client`.ClientId
GROUP BY Workout.`Name`;
-- Outcome: 26 rows returned.

________________________________________________________________
-- Count client goals.
-- Be careful not to exclude rows for clients without goals.
-- 500 rows total
-- 50 rows with no goals

SELECT COUNT(*) FROM `Client`;
-- There are 500 clients, with or without goal.
SELECT COUNT(*) FROM ClientGoal;
-- There are, however, 663 goals from clients altogether.
-- This means some clients have multiple goals.alter
SELECT COUNT(*) FROM ClientGoal
GROUP BY ClientId;
-- 450 rows returned from the above query, it means only 450 clients
-- have any goal, which leaves 500 - 450 = 50 clients with no goal.

________________________________________________________________
-- Select Exercise.Name, Unit.Name, 
-- and minimum and maximum ExerciseInstanceUnitValue.Value
-- for all exercises with a configured ExerciseInstanceUnitValue.
-- Order by Exercise.Name, then Unit.Name.
-- 82 rows

SELECT Exercise.`Name` AS ExerciseName,
       Unit.`Name` AS UnitName,
       MIN(ExerciseInstanceUnitValue.`Value`) AS MinExerciseInstanceUnitValue,
       MAX(ExerciseInstanceUnitValue.`Value`) AS MinExerciseInstanceUnitValue
FROM Exercise
JOIN ExerciseInstance ON Exercise.ExerciseId = ExerciseInstance.ExerciseId
JOIN ExerciseInstanceUnitValue ON ExerciseInstance.ExerciseInstanceId = ExerciseInstanceUnitValue.ExerciseInstanceId
JOIN Unit ON ExerciseInstanceUnitValue.UnitId = Unit.UnitId
GROUP BY Exercise.ExerciseId, Exercise.`Name`, Unit.`Name`
ORDER BY Exercise.`Name`, Unit.`Name`;
-- Outcome: 82 rows returned (NOTE: not the same as suggested outcome).

________________________________________________________________
-- Modify the query above to include ExerciseCategory.Name.
-- Order by ExerciseCategory.Name, then Exercise.Name, then Unit.Name.
-- 82 rows

SELECT ec.`Name` AS ExerciseCategoryName,
       e.`Name` AS ExerciseName,
       u.`Name` AS UnitName,
       MIN(eiuv.`Value`) AS MinExerciseInstanceUnitValue,
       MAX(eiuv.`Value`) AS MinExerciseInstanceUnitValue
FROM ExerciseCategory ec
JOIN Exercise e ON ec.ExerciseCategoryId = e.ExerciseCategoryId
JOIN ExerciseInstance ei ON e.ExerciseId = ei.ExerciseId
JOIN ExerciseInstanceUnitValue eiuv ON ei.ExerciseInstanceId = eiuv.ExerciseInstanceId
JOIN Unit u ON eiuv.UnitId = u.UnitId
GROUP BY e.ExerciseId, e.`Name`, u.`Name`
ORDER BY ec.`Name`, e.`Name`, u.`Name`;
-- Outcome: 82 rows returned (NOTE: not the same as suggested outcome).

________________________________________________________________
-- Select the minimum and maximum age in years for
-- each Level.
-- To calculate age in years, use the MySQL function DATEDIFF.
-- 4 rows

SELECT `Level`.LevelId,
       MIN(DATEDIFF(CURDATE(), `Client`.BirthDate) DIV 365.25) AS MinimumAge,
       MAX(DATEDIFF(CURDATE(), `Client`.BirthDate) DIV 365.25) AS MaximumAGE
FROM `Level`
JOIN Workout ON `Level`.LevelId = Workout.LevelId
JOIN ClientWorkout ON Workout.WorkoutId = ClientWorkout.WorkoutId
JOIN `Client` ON ClientWorkout.ClientId = `Client`.ClientId
GROUP BY `Level`.LevelId;
-- Outcome: 4 rows returned.

________________________________________________________________
-- Stretch Goal!
-- Count logins by email extension (.com, .net, .org, etc...).
-- Research SQL functions to isolate a very specific part of a string value.
-- 27 rows (27 unique email extensions)

SELECT SUBSTRING(EmailAddress, POSITION('.' IN EmailAddress)) AS EmailExtension,
	   COUNT(SUBSTRING(EmailAddress, POSITION('.' IN EmailAddress))) AS ExtensionCount
FROM Login
GROUP BY SUBSTRING(EmailAddress, POSITION('.' IN EmailAddress))
ORDER BY SUBSTRING(EmailAddress, POSITION('.' IN EmailAddress));
-- Outcome: 35 rows returned, which include versions of similar extensions,
--          such as .gov and .gov.cn; .org and .org.au; .co.jp and .co.uk,
--          hence adding an extra 8 rows to the suggested answer of 27 rows.

# Outcome from query:

.ac.uk	1
.ca	2
.cn	1
.co.jp	5
.co.uk	6
.com	178
.com.au	1
.com.br	3
.com.cn	5
.com.hk	1
.cz	1
.de	4
.edu	16
.fr	2
.gd	1
.gl	1
.gov	17
.gov.cn	3
.info	1
.int	1
.io	1
.jp	8
.la	2
.me	2
.ne.jp	6
.net	6
.net.au	1
.nl	1
.or.jp	1
.org	14
.org.au	1
.pl	2
.ru	3
.tv	1
.us	1

________________________________________________________________
-- Stretch Goal!
-- Match client goals to workout goals.
-- Select Client FirstName and LastName and Workout.Name for
-- all workouts that match at least 2 of a client's goals.
-- Order by the client's last name, then first name.
-- 139 rows

SELECT c.FirstName, c.LastName, w.`Name` AS WorkoutName, COUNT(wg.GoalId) as GoalCount
FROM `Client` c
JOIN ClientGoal cg ON c.ClientId = cg.ClientId
JOIN WorkoutGoal wg ON cg.GoalId = wg.GoalId
JOIN Workout w ON wg.WorkoutId = w.WorkoutId
GROUP BY wg.WorkoutId, c.ClientId
HAVING COUNT(cg.GoalId) >= 2
ORDER BY c.LastName, c.FirstName;
-- Outcome: 139 rows returned


________________________________________________________________



________________________________________________________________

