Relational DB & SQL - Exercise 2022-08-04 - Join Queries, Sorting, Grouping & Aggregates

Carl Tang Yong Han


Join Queries


## 
________________________________________________________________
USE PersonalTrainer;

-- Select all columns from ExerciseCategory and Exercise.
-- The tables should be joined on ExerciseCategoryId.
-- This query returns all Exercises and their associated ExerciseCategory.
-- 64 rows

SELECT * 
FROM Exercise
LEFT OUTER JOIN ExerciseCategory ON Exercise.ExerciseCategoryId = ExerciseCategory.ExerciseCategoryId;
-- Outcome: 64 rows returned.

________________________________________________________________
-- Select ExerciseCategory.Name and Exercise.Name
-- where the ExerciseCategory does not have a ParentCategoryId (it is null).
-- Again, join the tables on their shared key (ExerciseCategoryId).
-- 9 rows

SELECT ExerciseCategory.`Name`, Exercise.`Name`
FROM ExerciseCategory
INNER JOIN Exercise ON ExerciseCategory.ExerciseCategoryId = Exercise.ExerciseCategoryId
WHERE ExerciseCategory.ParentCategoryId IS NULL;
-- Outcome: 9 rows returned.

________________________________________________________________
-- The query above is a little confusing. At first glance, it's hard to tell
-- which Name belongs to ExerciseCategory and which belongs to Exercise.
-- Rewrite the query using an aliases. 
-- Alias ExerciseCategory.Name as 'CategoryName'.
-- Alias Exercise.Name as 'ExerciseName'.
-- 9 rows

SELECT ExerciseCategory.`Name`AS CategoryName, Exercise.`Name` AS ExerciseName
FROM ExerciseCategory
INNER JOIN Exercise ON ExerciseCategory.ExerciseCategoryId = Exercise.ExerciseCategoryId
WHERE ExerciseCategory.ParentCategoryId IS NULL;
-- Outcome: 9 rows returned.

________________________________________________________________
-- Select FirstName, LastName, and BirthDate from Client
-- and EmailAddress from Login 
-- where Client.BirthDate is in the 1990s.
-- Join the tables by their key relationship. 
-- What is the primary-foreign key relationship?
-- 35 rows

SELECT `Client`.FirstName, `Client`.LastName, `Client`.BirthDate, Login.EmailAddress
FROM `Client`
INNER JOIN Login ON `Client`.ClientId = Login.ClientId
WHERE `Client`.BirthDate BETWEEN '1990-01-01' AND '1999-12-31';
-- Answer: Both the tables Client and Login has the same primary key, i.e. ClientId,
--         and both use one's own primary key also as the foreign key to access the
--         the other table's primary key.
-- Outcome: 35 rows returned.

________________________________________________________________
-- Select Workout.Name, Client.FirstName, and Client.LastName
-- for Clients with LastNames starting with 'C'?
-- How are Clients and Workouts related?
-- 25 rows

SELECT Workout.`Name`, `Client`.FirstName, `Client`.LastName
FROM Workout
INNER JOIN ClientWorkout ON Workout.WorkoutId = ClientWorkout.WorkoutId
INNER JOIN `Client` ON ClientWorkout.ClientId = `Client`.ClientId
WHERE `Client`.LastName LIKE 'C%';
-- Answer: Client table is related to Workout table through
--         a bridging table, i.e. ClientWorkout, in which two columns in
--         ClientWorkout (ClientId and WorkoutId) each link to the other
--         two tables respectively.
-- Outcome: 25 rows returned.

________________________________________________________________
-- Select Names from Workouts and their Goals.
-- This is a many-to-many relationship with a bridge table.
-- Use aliases appropriately to avoid ambiguous columns in the result.

SELECT Workout.`Name` AS WorkoutName, Goal.`Name` AS GoalName
FROM Workout
INNER JOIN WorkoutGoal ON Workout.WorkoutId = WorkoutGoal.WorkoutId
INNER JOIN Goal ON WorkoutGoal.GoalId = Goal.GoalId;
-- Outcome: 78 rows returned.

________________________________________________________________
-- Select FirstName and LastName from Client.
-- Select ClientId and EmailAddress from Login.
-- Join the tables, but make Login optional.
-- 500 rows

SELECT `Client`.FirstName, `Client`.LastName, Login.ClientId, Login.EmailAddress
FROM `Client`
LEFT OUTER JOIN Login ON `Client`.ClientId = Login.ClientId;
-- 500 rows returned.

________________________________________________________________
-- Using the query above as a foundation, select Clients
-- who do _not_ have a Login.
-- 200 rows

SELECT `Client`.FirstName, `Client`.LastName, Login.ClientId, Login.EmailAddress
FROM `Client`
LEFT OUTER JOIN Login ON `Client`.ClientId = Login.ClientId
WHERE Login.EmailAddress IS NULL;
-- 200 rows returned.

________________________________________________________________
-- Does the Client, Romeo Seaward, have a Login?
-- Decide using a single query.
-- nope :(

SELECT `Client`.FirstName, `Client`.LastName,
	     `Client`.ClientId AS Id_For_Client,
       Login.ClientId AS Id_For_Login,
       Login.EmailAddress
FROM `Client`
LEFT OUTER JOIN Login ON `Client`.ClientId = Login.ClientId
WHERE `Client`.FirstName = 'Romeo' AND `Client`.LastName = 'Seaward';
-- Answer: Client Romeo Seaward does not have a login.
--         In fact, he does not even have his ClientId in the Login table,
--         much less his email address.

________________________________________________________________






________________________________________________________________





________________________________________________________________





________________________________________________________________





________________________________________________________________




