Lab Summary for Configuring Alerts: 2022-09-01

Group 2: Aaron Low, Britney Toh, Carl Tang, Cheryl Ong



Python script used to run simple app to generate metrics for monitoring:

_________________________________________________



import logging
from prometheus_client import start_http_server
import prometheus_client as prom  ## Added for Prometheus

import time
from random import seed
from random import randint


logging.basicConfig(filename="record.log", level=logging.DEBUG)

# Try prometheus metric here:
counter = prom.Counter("user_served", "already responded to user ID")


# @c.inc()
def number_stream():

    userID = 0

    while userID != 500000:

        userID = randint(0, 1000001)
        userInput = randint(0, 1001)
        sleepLength = randint(0, 11)

        if userID % 17 == 0 or userID % 23 == 0: # Set some jackpot just in case
            print("Jackpot hit! User ID is:", userID)

            # Allow any error actions here, e.g. loop breaking

        print("\n\nUser ID is:", userID)

        # implement cases of logging:
        if userID % 5 == 0:
            print("Info: UserID is a multiple of 5:", userID)
            logging.info("Info log information - multiple of 5")

        if userID % 16 == 0:
            print("Warning: UserID is a multiple of 16:", userID)
            logging.warning("Warning log info - multiple of 16")

        if userID % 100 == 0:
            print("Debug: UserID is a multiple of 100:", userID)
            logging.debug("Debug log info - multiple of 100")

        if userID % 1000 == 0:
            print("Critical: UserID ends with 000:", userID)
            logging.critical("Critical log info - multiple of 1,000")

        if userID % 10000 == 0:
            print("Error: UserID ends with 0000:", userID)
            logging.error("Error log info - multiple of 10,000")


        printString = ""
        repeat = userID if userID < 100 else int(userID/10000)
        for i in range(repeat):
            printString += str(userID)

        seconds = sleepLength

        print("Will sleep for", seconds, "second after printing this:")
        print(printString)

        # Premetheus counter
        counter.inc()

        time.sleep(seconds)


    return 0



if __name__ == '__main__':
    prom.start_http_server(8001)   ## Start server with Prometheus client itself to post results
    number_stream()

________________________________________________


Amended YAML file for Prometheus on /etc/prometheus/ on EC2 instance which runs the Python script:

_________________________________________________

# my global config
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: "prometheus"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ["localhost:9090"]

  - job_name: "prometheus2"              ##### The added part

    static_configs:
      - targets: ["13.214.196.222:8001"]

____________________________________________________

The Prometheus monitoring is available on:

http://13.214.196.222:9090/graph?g0.expr=rate(user_served_total%5B1m%5D)&g0.tab=0&g0.stacked=0&g0.show_exemplars=0&g0.range_input=1h

The query used is: rate(user_served_total[1m])

A screenshot for the Prometheus graph UI on browser is as follows:

https://github.com/thisfeather/wiley-C279/blob/1496bfe88909fe2ad9b4352e8d424bc4f4818b6c/Prometheus%20Screen%20Capture%20Group%202.JPG


_________________________________________________________
