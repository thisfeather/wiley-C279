Docker Lab 2022-08-22


Carl Tang Yong Han


### Questions:

1. Running containers and managing them: Deploy Jenkins and perform some docker operation

2. Creating an image: Deploy Static HTML Website as Container

3. Create an image without Katacodaâ€™s autofill feature: Building Container Images

4. Working with persistent storage: Persisting Data Using Volumes





## Q1 records:

# Running Docker on AWS EC2 Ubuntu Instance:

ubuntu@ip-172-31-17-240:~$ sudo docker run -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts-jdk11

## Console output:
Unable to find image 'jenkins/jenkins:lts-jdk11' locally
lts-jdk11: Pulling from jenkins/jenkins
001c52e26ad5: Pull complete
6b8dd635df38: Pull complete
2ba4c74fd680: Pull complete
451b84b3fbee: Pull complete
bf1a1bca45f7: Pull complete
034487302eff: Pull complete
9ca88e78f65c: Pull complete
9010fbe1f5af: Pull complete
3f26de523f8f: Pull complete
e575c61d2ce2: Pull complete
ab1c361873a9: Pull complete
179290c8c621: Pull complete
04c857c79af2: Pull complete
1158f52510d7: Pull complete
Digest: sha256:cc62444630fb4b7c4694ac6b11b68dc64864a67fd98121194f913027733c9dce
Status: Downloaded newer image for jenkins/jenkins:lts-jdk11
docker: Error response from daemon: driver failed programming external connectivity on endpoint funny_shamir (33ece6db4d6a2ae06a554032527ea75e2842e99832561223b24da6d0997181bc): Error starting userland proxy: listen tcp4 0.0.0.0:8080: bind: address already in use.

# There seems to be some error. One may view the container that was created:

ubuntu@ip-172-31-17-240:~$ docker container ls

## Console output:
Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get "http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json": dial unix /var/run/docker.sock: connect: permission denied

# Again, there is some permission issue. Trying to sudo ls the container also yield no outcome, but one can still see the common fields listed with this command:

ubuntu@ip-172-31-17-240:~$ sudo docker container ls
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES

# Trying alternative methods to run Docker.
# Create a bridge network in Docker:

ubuntu@ip-172-31-17-240:~$ sudo docker network create jenkins
88f9b4bf5ee1366099f1ffb4feaa3a7fc3d70b9b1afede7f2edd99d8bd1e2e68

# For executing Docker commands inside Jenkins nodes, download and run the ocker:dind image:

ubuntu@ip-172-31-17-240:~$ sudo docker run --name jenkins-docker --rm --detach \
  --privileged --network jenkins --network-alias docker \
  --env DOCKER_TLS_CERTDIR=/certs \
  --volume jenkins-docker-certs:/certs/client \
  --volume jenkins-data:/var/jenkins_home \
  --publish 2376:2376 \
  docker:dind --storage-driver overlay2
Unable to find image 'docker:dind' locally
dind: Pulling from library/docker
213ec9aee27d: Pull complete
6eb510456a42: Pull complete
4627ba0696d0: Pull complete
e001120e1cd4: Pull complete
ff3ada922ff1: Pull complete
695833fa5c21: Pull complete
d4b32608c75f: Pull complete
7c9f0f1659d0: Pull complete
2d5cd9e469fc: Pull complete
5b73c299c185: Pull complete
156ab6250e72: Pull complete
ca981fc51fe0: Pull complete
19b6fb613d6e: Pull complete
088137a3a6e0: Pull complete
Digest: sha256:f92b5715c425e1066cab3a4d32be7b6ccee26c6a1ca3ca7544f86c6554df9424
Status: Downloaded newer image for docker:dind
1d487680304d0553956726dde43b0a3bd5692a49f3fd016d8586b32416d258dd

# Eventually EC2 instance broke connection. Using a new instance from EC2 doesn't help either. Neither of the following works:

(1) Not working:
ubuntu@ip-172-31-14-130:~$ sudo docker network create jenkins
Error response from daemon: failed to update bridge store for object type *bridge.networkConfiguration: open /var/lib/docker/network/files/local-kv.db: no such file or directory

(2) Not working (assuming previous problem was port-related. Changing 8080 to 80 does not help either):
ubuntu@ip-172-31-14-130:~$ sudo docker run -p 8080:80 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts-jdk11
Unable to find image 'jenkins/jenkins:lts-jdk11' locally
lts-jdk11: Pulling from jenkins/jenkins
001c52e26ad5: Pulling fs layer
6b8dd635df38: Pulling fs layer
2ba4c74fd680: Pulling fs layer
451b84b3fbee: Pulling fs layer
bf1a1bca45f7: Pulling fs layer
034487302eff: Pulling fs layer
9ca88e78f65c: Pulling fs layer
9010fbe1f5af: Pulling fs layer
3f26de523f8f: Pulling fs layer
e575c61d2ce2: Pulling fs layer
ab1c361873a9: Pulling fs layer
179290c8c621: Pulling fs layer
04c857c79af2: Pulling fs layer
1158f52510d7: Pulling fs layer
docker: open /var/lib/docker/tmp/GetImageBlob1923253966: no such file or directory.
See 'docker run --help'.

(3) Not working (changing ports back to 8080 also didn't help):
ubuntu@ip-172-31-14-130:~$ sudo docker run -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts-jdk11
Unable to find image 'jenkins/jenkins:lts-jdk11' locally
lts-jdk11: Pulling from jenkins/jenkins
001c52e26ad5: Pulling fs layer
6b8dd635df38: Pulling fs layer
2ba4c74fd680: Pulling fs layer
451b84b3fbee: Pulling fs layer
bf1a1bca45f7: Pulling fs layer
034487302eff: Pulling fs layer
9ca88e78f65c: Pulling fs layer
9010fbe1f5af: Pulling fs layer
3f26de523f8f: Pulling fs layer
e575c61d2ce2: Pulling fs layer
ab1c361873a9: Pulling fs layer
179290c8c621: Pulling fs layer
04c857c79af2: Pulling fs layer
1158f52510d7: Pulling fs layer
docker: open /var/lib/docker/tmp/GetImageBlob720762388: no such file or directory.
See 'docker run --help'.
ubuntu@ip-172-31-14-130:~$ ^C
ubuntu@ip-172-31-14-130:~$ vi dockerLabWebsite/index.html
ubuntu@ip-172-31-14-130:~$ ls
get-docker.sh  test-docker.sh
ubuntu@ip-172-31-14-130:~$ mkdir dockerLabWebsite
ubuntu@ip-172-31-14-130:~$ vi dockerLabWebsite/index.html
ubuntu@ip-172-31-14-130:~$ vi Dockerfile
ubuntu@ip-172-31-14-130:~$ docker build -t img-dockerLabWebsite
invalid argument "img-dockerLabWebsite" for "-t, --tag" flag: invalid reference format: repository name must be lowercase
See 'docker build --help'.









## Q2 Records:

# First, a simple folder with an html file is created on the Ubuntu instance:

ubuntu@ip-172-31-14-130:~$ mkdir dockerLabWebsite
ubuntu@ip-172-31-14-130:~$ vi dockerLabWebsite/index.html

# The created html file is as follows:

ubuntu@ip-172-31-17-240:~/dockerLabWebsite$ cat index.html
<!doctype html>
<html>
        <head>
                <title>This is a simple static website.</title>
        </head>
        <body>
                <p>This static site is used for the Docker lab of C279 SRE course</p>
        </body>
</html>

# Next, create a Dockerfile:
ubuntu@ip-172-31-14-130:~$ vi Dockerfile

# The created Dockerfile is as follows:

FROM apache
COPY . /var/www/html

# Next, create a docker image:

ubuntu@ip-172-31-14-130:~$ sudo docker build -t img-docker-lab-website .
Sending build context to Docker daemon   59.9kB
Error response from daemon: stat /var/lib/docker/tmp: no such file or directory

# Docker images show no image either:
ubuntu@ip-172-31-14-130:~$ sudo docker images
REPOSITORY   TAG       IMAGE ID   CREATED   SIZE

# Attempt to run everything from the website directory instead:
ubuntu@ip-172-31-14-130:~/dockerLabWebsite$ sudo docker build -t img-docker-lab-website .
Sending build context to Docker daemon  3.072kB
Error response from daemon: stat /var/lib/docker/tmp: no such file or directory
# The issue persists.

# An alternative command also did not work:
ubuntu@ip-172-31-14-130:~/dockerLabWebsite$ sudo docker build .
Sending build context to Docker daemon  3.072kB
Error response from daemon: stat /var/lib/docker/tmp: no such file or directory

# Another alternative command that did not work too:
ubuntu@ip-172-31-14-130:~/dockerLabWebsite$ sudo docker build -f Dockerfile .
Sending build context to Docker daemon  3.072kB
Error response from daemon: stat /var/lib/docker/tmp: no such file or directory

# Try alternative solution: use nginx instead of apache, amended Dockerfile:
FROM nginx:alpine
COPY . /usr/share/nginx/html

# And the issue persists:
ubuntu@ip-172-31-14-130:~/dockerLabWebsite$ sudo docker build -t html-server-image:v1 .
Sending build context to Docker daemon  4.096kB
Error response from daemon: stat /var/lib/docker/tmp: no such file or directory



#### Previously reinstalling Docker on a new EC2 instance was not favourable.
#### Here i am insisting to reinstall Docker as such, as see if all will finally work:

The latest version is 5:20.10.17~3-0~ubuntu-jammy, but i am choosing 5:20.10.16~3-0~ubuntu-jammy instead.


## Now try Q1, installing Jenkins on Docker, again:

ubuntu@ip-172-31-14-130:~$ sudo docker network create jenkins
8828330947cb743ed3a42e22ebeca2c263349348d890295341b8a88f5e4536a6

# The outcome seems okay this time:
ubuntu@ip-172-31-14-130:~$ sudo docker network create jenkins
8828330947cb743ed3a42e22ebeca2c263349348d890295341b8a88f5e4536a6
ubuntu@ip-172-31-14-130:~$ ^C
ubuntu@ip-172-31-14-130:~$ sudo docker run --name jenkins-docker --rm --detach \
  --privileged --network jenkins --network-alias docker \
  --env DOCKER_TLS_CERTDIR=/certs \
  --volume jenkins-docker-certs:/certs/client \
  --volume jenkins-data:/var/jenkins_home \
  --publish 2376:2376 \
  docker:dind --storage-driver overlay2
Unable to find image 'docker:dind' locally
dind: Pulling from library/docker
213ec9aee27d: Pull complete
6eb510456a42: Pull complete
4627ba0696d0: Pull complete
e001120e1cd4: Pull complete
ff3ada922ff1: Pull complete
695833fa5c21: Pull complete
d4b32608c75f: Pull complete
7c9f0f1659d0: Pull complete
2d5cd9e469fc: Pull complete
5b73c299c185: Pull complete
156ab6250e72: Pull complete
ca981fc51fe0: Pull complete
19b6fb613d6e: Pull complete
088137a3a6e0: Pull complete
Digest: sha256:f92b5715c425e1066cab3a4d32be7b6ccee26c6a1ca3ca7544f86c6554df9424
Status: Downloaded newer image for docker:dind
008821b9b268aba9a209b820af00c53521dd9e563484cd3dcbdfe6b3fb350700

# As per Jenkins' official instruction, a Dockerfile is created as follows:

FROM jenkins/jenkins:2.346.3-jdk11
USER root
RUN apt-get update && apt-get install -y lsb-release
RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc \
  https://download.docker.com/linux/debian/gpg
RUN echo "deb [arch=$(dpkg --print-architecture) \
  signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \
  https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
RUN apt-get update && apt-get install -y docker-ce-cli
USER jenkins
RUN jenkins-plugin-cli --plugins "blueocean:1.25.6 docker-workflow:1.29"

# Build a new docker image from this Dockerfile:
ubuntu@ip-172-31-14-130:~$ sudo docker build -t myjenkins-blueocean:2.346.3-1 .
The outcome:
... (abbreviated)
Successfully built e10c320b514f
Successfully tagged myjenkins-blueocean:2.346.3-1

# As per Jenkins' official instruction, one may run the image in Docker using the docker run command with options:
ubuntu@ip-172-31-14-130:~$ sudo docker run --name jenkins-blueocean --restart=on-failure --detach \
  --network jenkins --env DOCKER_HOST=tcp://docker:2376 \
  --env DOCKER_CERT_PATH=/certs/client --env DOCKER_TLS_VERIFY=1 \
  --publish 8080:8080 --publish 50000:50000 \
  --volume jenkins-data:/var/jenkins_home \
  --volume jenkins-docker-certs:/certs/client:ro \
  myjenkins-blueocean:2.346.3-1
8df550e640593fe087df05f3af52c8f1c3895ecc00103f0fccddf5f8dc3b41b1


Which seems to work so far.




## Now proceed to Q2:

(Directory dockerLabWebsites and the index.html as well as Dockerfile with Apache already created as above)

# Problem encountered: requested access denied.
ubuntu@ip-172-31-14-130:~/dockerLabWebsite$ sudo docker build -t img-docker-lab-website .
Sending build context to Docker daemon   5.12kB
Step 1/2 : FROM apache
pull access denied for apache, repository does not exist or may require 'docker login': denied: requested access to the resource is denied

# A simpler command gives the same result as above:
ubuntu@ip-172-31-14-130:~/dockerLabWebsite$ sudo docker build .
Sending build context to Docker daemon   5.12kB
Step 1/2 : FROM apache
pull access denied for apache, repository does not exist or may require 'docker login': denied: requested access to the resource is denied

# Now try Nginx version Dockerfile instead:
ubuntu@ip-172-31-14-130:~/dockerLabWebsite$ sudo docker build .
Sending build context to Docker daemon   5.12kB
Step 1/2 : FROM nginx:alpine
alpine: Pulling from library/nginx
213ec9aee27d: Already exists
2546ae67167b: Pull complete
23b845224e13: Pull complete
9bd5732789a3: Pull complete
328309e59ded: Pull complete
b231d02e5150: Pull complete
Digest: sha256:082f8c10bd47b6acc8ef15ae61ae45dd8fde0e9f389a8b5cb23c37408642bf5d
Status: Downloaded newer image for nginx:alpine
 ---> 804f9cebfdc5
Step 2/2 : COPY . /usr/share/nginx/html
 ---> f728424c455f
Successfully built f728424c455f

# The buld with Nginx seems successful:
ubuntu@ip-172-31-14-130:~/dockerLabWebsite$ sudo docker images
REPOSITORY            TAG             IMAGE ID       CREATED          SIZE
<none>                <none>          f728424c455f   39 seconds ago   23.5MB
myjenkins-blueocean   2.346.3-1       e10c320b514f   14 minutes ago   760MB
docker                dind            780523c12933   3 days ago       310MB
jenkins/jenkins       2.346.3-jdk11   ba3f3e7db66d   12 days ago      461MB
nginx                 alpine          804f9cebfdc5   12 days ago      23.5MB
hello-world           latest          feb5d9fea6a5   11 months ago    13.3kB

# The image is a little hard to identify, hence I tried again with a tag:
ubuntu@ip-172-31-14-130:~/dockerLabWebsite$ sudo docker build -t img-docker-lab-website .
Sending build context to Docker daemon   5.12kB
Step 1/2 : FROM nginx:alpine
 ---> 804f9cebfdc5
Step 2/2 : COPY . /usr/share/nginx/html
 ---> Using cache
 ---> f728424c455f
Successfully built f728424c455f
Successfully tagged img-docker-lab-website:latest

# The outcome of images:
ubuntu@ip-172-31-14-130:~/dockerLabWebsite$ sudo docker images
REPOSITORY               TAG             IMAGE ID       CREATED          SIZE
img-docker-lab-website   latest          f728424c455f   2 minutes ago    23.5MB
myjenkins-blueocean      2.346.3-1       e10c320b514f   16 minutes ago   760MB
docker                   dind            780523c12933   3 days ago       310MB
jenkins/jenkins          2.346.3-jdk11   ba3f3e7db66d   12 days ago      461MB
nginx                    alpine          804f9cebfdc5   12 days ago      23.5MB
hello-world              latest          feb5d9fea6a5   11 months ago    13.3kB

# This seems successful. We can see the image that we tagged.

# Running the containter gave some problem:
ubuntu@ip-172-31-14-130:~/dockerLabWebsite$ docker run -it -d -p 80:80 img-docker-lab-website
docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post "http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create": dial unix /var/run/docker.sock: connect: permission denied.
See 'docker run --help'.


# Tried different port setting:
ubuntu@ip-172-31-14-130:~/dockerLabWebsite$ docker run -it -d -p 8080:80 img-docker-lab-website
docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post "http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create": dial unix /var/run/docker.sock: connect: permission denied.
See 'docker run --help'.
# Which did not seem to work.

# Running with sudo solves the problem:
ubuntu@ip-172-31-14-130:~/dockerLabWebsite$ sudo docker run -it -d -p 80:80 img-docker-lab-website
b2ee81c1c9802e1495d8ea411c5dcbd02633c74574accd67416fae2888d8b6fc


# Trying out "18.138.11.252:80" on a web browser gives intended result, i.e. website showing as per html:
"This static site is used for the Docker lab of C279 SRE course"




## Q3: Actually Q2 is already done in a method consistent with Q3, hence Q3 is not repeated.



## Q4: 

# Start an ubuntu container, using bash with the string that follows to create a random number between 1 and 10000, which writes to /data.txt:

ubuntu@ip-172-31-14-130:~$ sudo docker run -d ubuntu bash -c "shuf -i 1-10000 -n 1 -o /data.txt && tail -f /dev/null"
Unable to find image 'ubuntu:latest' locally
latest: Pulling from library/ubuntu
d19f32bd9e41: Pull complete
Digest: sha256:34fea4f31bf187bc915536831fd0afc9d214755bf700b5cdb1336c82516d154e
Status: Downloaded newer image for ubuntu:latest
816f4eb78dbe01e5918eb9ce739f1e0592aff70b28bd8e12a2b8a7543b9fa37e

# Confirm that there is now an ubuntu image:

ubuntu@ip-172-31-14-130:~$ sudo docker images                                   REPOSITORY               TAG             IMAGE ID       CREATED         SIZE
img-docker-lab-website   latest          f728424c455f   15 hours ago    23.5MB
myjenkins-blueocean      2.346.3-1       e10c320b514f   15 hours ago    760MB
docker                   dind            780523c12933   4 days ago      310MB
jenkins/jenkins          2.346.3-jdk11   ba3f3e7db66d   12 days ago     461MB
nginx                    alpine          804f9cebfdc5   13 days ago     23.5MB
ubuntu                   latest          df5de72bdb3b   3 weeks ago     77.8MB
hello-world              latest          feb5d9fea6a5   11 months ago   13.3kB

# Now find out the container ID for ubuntu:

ubuntu@ip-172-31-14-130:~$ sudo docker ps
CONTAINER ID   IMAGE                           COMMAND                  CREATED         STATUS         PORTS                                                                                      NAMES
816f4eb78dbe   ubuntu                          "bash -c 'shuf -i 1-â€¦"   3 minutes ago   Up 3 minutes                                                                                              confident_beaver
b2ee81c1c980   img-docker-lab-website          "/docker-entrypoint.â€¦"   15 hours ago    Up 15 hours    0.0.0.0:80->80/tcp, :::80->80/tcp                                                          funny_bardeen
8df550e64059   myjenkins-blueocean:2.346.3-1   "/usr/bin/tini -- /uâ€¦"   15 hours ago    Up 15 hours    0.0.0.0:8080->8080/tcp, :::8080->8080/tcp, 0.0.0.0:50000->50000/tcp, :::50000->50000/tcp   jenkins-blueocean
008821b9b268   docker:dind                     "dockerd-entrypoint.â€¦"   15 hours ago    Up 15 hours    2375/tcp, 0.0.0.0:2376->2376/tcp, :::2376->2376/tcp                                        jenkins-docker

# Now we can use the container ID to exec into the container just now to see data.txt:

ubuntu@ip-172-31-14-130:~$ sudo docker exec 816f4eb78dbe cat /data.txt
8171

# Which shows the random number between 1 and 10000.

# We can likewise make a new document container1.txt, and see that it is in the same container:

ubuntu@ip-172-31-14-130:~$ sudo docker exec 816f4eb78dbe touch container1.txt
ubuntu@ip-172-31-14-130:~$ sudo docker exec 816f4eb78dbe ls
bin
boot
container1.txt
data.txt
dev
etc
home
lib
lib32
lib64
libx32
media
mnt
opt
proc
root
run
sbin
srv
sys
tmp
usr
var

# However if we docker run ubuntu again without specifying the exact same ID to exec into,
# we won't see the two files just now (data.txt and container1.txt) in the container:

ubuntu@ip-172-31-14-130:~$ sudo docker run -it ubuntu ls /
bin   dev  home  lib32  libx32  mnt  proc  run   srv  tmp  var
boot  etc  lib   lib64  media   opt  root  sbin  sys  usr

# This shows that the two files were only available to the first container,
# being written into the scratch space of only the first container.


# Now we try out the use of volumes to persist data:

# First we check what volumes we already have:

ubuntu@ip-172-31-14-130:~$ sudo docker volume list
DRIVER    VOLUME NAME
local     2cc4555cfc0e4a588c0f2c7c0e594ccbfe12fe93565440b10c9d68d23ef4e6c0
local     jenkins-data
local     jenkins-docker-certs

# Then we create a volume "volume1", and check that it is now in the volume list:

ubuntu@ip-172-31-14-130:~$ sudo docker volume create volume1
volume1
ubuntu@ip-172-31-14-130:~$ sudo docker volume list
DRIVER    VOLUME NAME
local     2cc4555cfc0e4a588c0f2c7c0e594ccbfe12fe93565440b10c9d68d23ef4e6c0
local     jenkins-data
local     jenkins-docker-certs
local     volume1

# we can inspect the volume:

ubuntu@ip-172-31-14-130:~$ sudo docker volume inspect volume1
[
    {
        "CreatedAt": "2022-08-23T02:00:15Z",
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/volume1/_data",
        "Name": "volume1",
        "Options": {},
        "Scope": "local"
    }
]

# Now we try and launch an ubuntu container and mount volume1 to it:

ubuntu@ip-172-31-14-130:~$ sudo docker run -it --name=ubuntu-example1 --mount source=volume1,destination=/volume1 ubuntu


# We can see that volume1 is now mounted in the container.
root@47cc22cca3c7:/# ls
bin   dev  home  lib32  libx32  mnt  proc  run   srv  tmp  var
boot  etc  lib   lib64  media   opt  root  sbin  sys  usr  volume1

# We go inside the volume to create a simple file:

root@47cc22cca3c7:/# cd volume1
root@47cc22cca3c7:/volume1# touch file1-in-volume1.txt


# After exiting this container, we launch a new container "ubuntu-example2":

root@47cc22cca3c7:/volume1# exit
exit
ubuntu@ip-172-31-14-130:~$ sudo docker run -it --name=ubuntu-example2 --mount source=volume1,destination=/volume1 ubuntu

# In this new container, not only is volume1 visible, we can also see the "file1-in-volume1" contained within.

root@38c7fd8c568b:/# ls
bin   dev  home  lib32  libx32  mnt  proc  run   srv  tmp  var
boot  etc  lib   lib64  media   opt  root  sbin  sys  usr  volume1
root@38c7fd8c568b:/# cd volume1
root@38c7fd8c568b:/volume1# ls
file1-in-volume1.txt

# Upon exiting, the two previous containers are not more running:

root@38c7fd8c568b:/volume1# exit
exit
ubuntu@ip-172-31-14-130:~$ sudo docker ps
CONTAINER ID   IMAGE                           COMMAND                  CREATED        STATUS        PORTS                                                                                      NAMES
b2ee81c1c980   img-docker-lab-website          "/docker-entrypoint.â€¦"   16 hours ago   Up 16 hours   0.0.0.0:80->80/tcp, :::80->80/tcp                                                          funny_bardeen
8df550e64059   myjenkins-blueocean:2.346.3-1   "/usr/bin/tini -- /uâ€¦"   16 hours ago   Up 16 hours   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp, 0.0.0.0:50000->50000/tcp, :::50000->50000/tcp   jenkins-blueocean
008821b9b268   docker:dind                     "dockerd-entrypoint.â€¦"   17 hours ago   Up 17 hours   2375/tcp, 0.0.0.0:2376->2376/tcp, :::2376->2376/tcp

# But running another ubuntu container shows that volume1 and its contents are still available:

ubuntu@ip-172-31-14-130:~$ sudo docker run -it --name=ubuntu-example3 --mount source=volume1,destination=/volume1 ubuntu
root@2a2885736e89:/# ls
bin   dev  home  lib32  libx32  mnt  proc  run   srv  tmp  var
boot  etc  lib   lib64  media   opt  root  sbin  sys  usr  volume1
root@2a2885736e89:/# ls volume1/
file1-in-volume1.txt


# Thus we have persisted data using a volume.



