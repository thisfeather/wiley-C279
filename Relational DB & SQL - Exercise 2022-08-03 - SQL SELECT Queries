Relational DB & SQL - Exercise 2022-08-03

Carl Tang Yong Han


SQL SELECT Queries



## The WHERE Clause
## Practice:

Try the other common WHERE conditions. Examine the results.
Use different states.
Limit results by Product, Issue, or SubmissionMethod.
Build a complex expression using AND or OR.

_______________________________________________
-- My attempts, 1:
SELECT *
FROM Complaint
WHERE State = 'FL'
AND (Product = 'Credit card' OR Product = 'Student loan');

-- ANSWER: Query returns 7 rows.

-- My attempts, 2:
SELECT *
FROM Complaint
WHERE State = 'MT'
AND (Issue = 'Other' OR SubmissionMethod = 'Web');

-- ANSWER: Query returns 3 rows.
_______________________________________________


How many records are fetched with the following query?
_______________________________________________
-- Given by question
USE ConsumerComplaints;

SELECT *
FROM Complaint
WHERE State = 'LA'
AND (Product = 'Mortgage' OR Product = 'Debt collection');
_______________________________________________
# ANSWER: Query returns 6 rows.


We can force boolean operator precedence by using parentheses, just like math.
How many records are fetched if we remove the parentheses?
_______________________________________________
-- Given by question
USE ConsumerComplaints;

SELECT *
FROM Complaint
WHERE State = 'LA'
AND Product = 'Mortgage' OR Product = 'Debt collection';
_______________________________________________
# ANSWER: Query returns 194 rows, most of which are "Debt collection".
          Only small minority is 'LA AND Mortgage'.



## Filtering Numbers

Comparison operators can be used to answer questions like the following:

- Does ComplaintId 1200385 exist?
_________________________________________
-- My attempt:
SELECT ComplaintID
FROM Complaint
WHERE ComplaintID = 1200385;
_________________________________________
# ANSWER: Yes, ComplaintId 1200385 exists.


- How many Complaints are there with a ComplaintId less than 100,000?
_________________________________________
-- My attempt:
SELECT ComplaintID
FROM Complaint
WHERE ComplaintId < 100000;
_________________________________________
# ANSWER: 36 complaints.


- What is the most common Product between ComplaintId 100,000 and 200,000?
_________________________________________
-- My attempt (not including boundaries):
SELECT ComplaintId, Product
FROM Complaint
WHERE ComplaintId > 100000 AND ComplaintId < 200000;

-- Alternative method, whereby boundaries are included:
SELECT ComplaintId, Product
FROM Complaint
WHERE ComplaintId BETWEEN 100000 AND 200000;
_________________________________________
# ANSWER: Mortgage. Out of 42 rows returned by the query, by manual calculation there are 29 rows of
          'Mortgage', which makes it the majority of the Product in the ComplaintId range.
          (NOTE: both methods above happen to give the same query outcomes, as the boundaries are not actually touched.)


Guessing a bit about the column meanings, what does the following query do? How many rows does it return?
_______________________________________________
-- Given by question
USE ConsumerComplaints;

SELECT 
    Product, 
    Issue, 
    Company, 
    ResponseToConsumer
FROM Complaint
WHERE ConsumerDisputed = 1
AND ConsumerConsent = 1
AND Product NOT IN ('Mortgage', 'Debt collection');
_______________________________________________
# ANSWER: The query tries to pull out Products that are not from 'Mortgage' or 'Debt collection'
          whereby consumers have disputed and did not give consent, and tries to show what are the
          issues and companies evolved, and what are the responses to consumers in these cases.
          There are 23 rows returned.



## Filtering Dates

Date filters can be used to answer questions like the following:

- Did anyone submit a complaint on New Year's Day, 2014?
_________________________________________
-- My attempt:
SELECT ComplaintId, DateReceived
FROM Complaint
WHERE DateReceived = '2014-01-01';
_________________________________________
# ANSWER: There is no complaint received on 1st Jan 2014 on this table.
          (Query returns 0 row.) Hence based on this table, no one submitted
          any complaint on 2014's New Year's Day.


- Are there complaints in 2018?
_________________________________________
-- My attempt:
SELECT ComplaintId, DateReceived
FROM Complaint
WHERE DateReceived >= '2018-01-01' AND DateReceived <= '2018-12-31';
_________________________________________
# ANSWER: The query returns 3 rows. Hence there were 3 complaints in 2018.


- How many complaints were reported in July of 2015?
_________________________________________
-- My attempt:
SELECT ComplaintId, DateReceived
FROM Complaint
WHERE DateReceived >= '2015-07-01' AND DateReceived <= '2015-07-31';
_________________________________________
# ANSWER: The query returns 15 rows. 15 complaints were reported in July of 2015.


- Do any complaints claim to have been sent to the company (DateSentToCompany) before the complaint was received (DateReceived)?
_________________________________________
-- My attempt:
SELECT ComplaintId, DateReceived, DateSentToCompany
FROM Complaint
WHERE DateSentToCompany < DateReceived;
_________________________________________
# ANSWER: The query returns 6 rows. There were 6 complaints which claim to have been sent to the company
          before the complaint was received. All 6 of them claimed to have sent one day earlier than receiving date.



## Pattern Matching Text

We can use wildcards to answer questions like the following:

- Find consumer complaints about companies with names that start with 'V'.
_________________________________________
-- My attempt:
SELECT ComplaintId, Company
FROM Complaint
WHERE Company LIKE 'V%';
_________________________________________
# ANSWER: There are 86 of such complaints.


- Find complaints that use the word 'whom' in their ComplaintNarrative.
_________________________________________
-- My attempt:
SELECT ComplaintId, ComplaintNarrative
FROM Complaint
WHERE ComplaintNarrative LIKE '%whom%';
_________________________________________
# ANSWER: There are 3 such complaints.


- What are the SubmissionMethods with exactly three characters?
_________________________________________
-- My attempt:
SELECT ComplaintId, SubmissionMethod
FROM Complaint
WHERE SubmissionMethod LIKE '___';
_________________________________________
# ANSWER: The above query returns 698 rows, with SubmissionMethod of 'Web' and 'Fax'
          by manual inspection.


- Which Complaints mention 'loan' in their Issue?
_________________________________________
-- My attempt:
SELECT ComplaintId, Issue
FROM Complaint
WHERE Issue LIKE '%loan%';
_________________________________________
# ANSWER: The above query returns 289 rows, for issues such as 'Loan modification,collection,foreclosure',
          'Loan servicing, payments, escrow account', 'Repaying your loan', etc.



## NULL â€“ the "Billion-Dollar Mistake"

To find NULL values, we have to use the special operator IS. Then we can express that a value IS NULL or IS NOT NULL. Our queries can be rewritten:

_________________________________
-- Given by question:

USE ConsumerComplaints;

SELECT *
FROM Complaint
WHERE SubProduct IS NULL;
-- ANSWER: 279 rows returned.

SELECT * 
FROM Complaint 
WHERE SubProduct IS NOT NULL;
-- ANSWER: 722 rows returned.

SELECT *
FROM Complaint
WHERE ComplaintId > 15000 OR ComplaintId IS NULL;
-- ANSWER: 991 rows returned.

SELECT *
FROM Complaint
WHERE SubIssue = 'Account status'
OR SubIssue IS NULL;
-- ANSWER: 657 rows returned.

-- All Complaints with a value for ComplaintNarrative. 
-- Exclude null values.
SELECT *
FROM Complaint
WHERE ComplaintNarrative IS NOT NULL;
-- ANSWER: 219 rows returned.
______________________________________



#### Exercise: SELECT Queries
Complete a series of SELECT queries using the PersonalTrainer schema.

## Activity 1
Select all rows and columns from the Exercise table. (64 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT * FROM Exercise;
_________________________________________
# OUTCOME: 64 rows returned, but only shows all 3 columns available in Exercise table,
           no additional columns derived from other tabled.
          

## Activity 2
Select all rows and columns from the Client table. (500 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT * FROM Client;
_________________________________________
# OUTCOME: 500 rows and 8 columns returned from query, consistent with sample solution.



## Activity 3
Select all columns from Client where the City is Metairie. (29 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT * FROM `Client`
WHERE City = 'Metairie';
_________________________________________
# OUTCOME: 29 rows returned from query, consistent with sample solution.



## Activity 4
Is there a Client with the ClientId '818u7faf-7b4b-48a2-bf12-7a26c92de20c'? (0 rows)
_________________________________________
-- My attempt:
SELECT ClientId
FROM `Client`
WHERE ClientId = '818u7faf-7b4b-48a2-bf12-7a26c92de20c';
_________________________________________
# OUTCOME: 0 row returned from query, consistent with sample solution.
           No such client with this ClientId.



## Activity 5
How many rows are in the Goal table? (17 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT GoalId FROM Goal;
_________________________________________
# OUTCOME: 17 rows returned from query, consistent with sample solution.



## Activity 6
Select Name and LevelId from the Workout table. (26 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT `Name`, LevelId FROM Workout;
_________________________________________
# OUTCOME: 26 rows returned from query, consistent with sample solution.



## Activity 7
Select Name, LevelId, and Notes from Workout where LevelId is 2. (11 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT `Name`, LevelID, Notes
FROM Workout
WHERE LevelID = 2
_________________________________________
# OUTCOME: 11 rows returned from query, consistent with sample solution.



## Activity 8
Select FirstName, LastName, and City from Client where City is Metairie, Kenner, or Gretna. (77 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT FirstName, LastName, City
FROM `Client`
WHERE City IN ('Metairie', 'Kenner', 'Gretna');
_________________________________________
# OUTCOME: 77 rows returned from query, consistent with sample solution.



## Activity 9
Select FirstName, LastName, and BirthDate from Client for Clients born in the 1980s. (72 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT FirstName, LastName, BirthDate
FROM `Client`
WHERE BirthDate BETWEEN '1980-01-01' AND '1989-12-31';
_________________________________________
# OUTCOME: 72 rows returned from query, consistent with sample solution.



## Activity 10
Write the query above in a different way.
 - If you used BETWEEN, you can't use it again.
 - If you didn't use BETWEEN, use it!
The results should be the same as for the previous query, with 72 rows.
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT FirstName, LastName, BirthDate
FROM `Client`
WHERE BirthDate > '1979-12-31' AND BirthDate < '1990-01-01';
_________________________________________
# OUTCOME: 72 rows returned from query, consistent with sample solution.



## Activity 11
How many rows in the Login table have a .gov EmailAddress? (17 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT * FROM Login
WHERE EmailAddress LIKE '%.gov';
_________________________________________
# OUTCOME: 17 rows returned from query, consistent with sample solution.
           However, if we are not asking for email addresses strictly ending in .gov
           followed by nothing else, then by using matching pattern of '%.gov%', we actually
           get 20 rows from the query, which include additional 3 rows with email addresses
           ending with '.gov.cn'.



## Activity 12
How many Logins do NOT have a .com EmailAddress? (122 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT * FROM Login
WHERE EmailAddress NOT LIKE '%.com';
_________________________________________
# OUTCOME: 122 rows returned from query, consistent with sample solution.
           However, if we are not trying to exclude email addresses strictly ending in .com
           followed by nothing else, then by using matching pattern of '%.com%', we actually
           get 112 rows from the query, which would not include additional 10 rows with email addresses
           ending with more than just '.com', such as '.com.cn', '.com.hk', '.com.br' and '.com.au'.
           These extra 10 email addresses would have survived the screening through '%.com'.



## Activity 13
Select first and last name of Clients without a BirthDate. (37 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT FirstName, LastName
FROM `Client`
WHERE BirthDate IS NULL;
_________________________________________
# OUTCOME: 37 rows returned from query, consistent with sample solution.



## Activity 14
Select the Name of each ExerciseCategory that has a parent (ParentCategoryId value is not null). (12 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT `Name` FROM ExerciseCategory
WHERE ParentCategoryId IS NOT NULL;
_________________________________________
# OUTCOME: 12 rows returned from query, consistent with sample solution.



## Activity 15
Select Name and Notes of each level 3 Workout that contains the word 'you' in its Notes. (4 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT `Name`, Notes
FROM Workout
WHERE LevelId = 3 AND Notes LIKE '%you%';
_________________________________________
# OUTCOME: 4 rows returned from query, consistent with sample solution.



## Activity 16
Select FirstName, LastName, City from Client whose LastName starts with L,M, or N and who live in LaPlace. (5 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT FirstName, LastName, City
FROM `Client`
WHERE City = 'LaPlace' AND 
	  (LastName LIKE 'L%' OR
             LastName LIKE 'M%' OR
             LastName LIKE 'N%');
_________________________________________
# OUTCOME: 5 rows returned from query, consistent with sample solution.



## Activity 17
Select InvoiceId, Description, Price, Quantity, ServiceDate and the line item total, a calculated value,
from InvoiceLineItem, where the line item total is between 15 and 25 dollars. (667 rows)
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT InvoiceId, `Description`, Price, Quantity, ServiceDate,
		(Price * Quantity) AS 'Line_Item_Total'
FROM InvoiceLineItem
WHERE (Price * Quantity) BETWEEN 15 AND 25;
_________________________________________
# OUTCOME: 667 rows returned from query, consistent with sample solution.



## Activity 18
Does the database include an email address for the Client, Estrella Bazely?
This requires two queries:
 - Select a Client record for Estrella Bazely. Does it exist?
 - If it does, select a Login record that matches its ClientId.
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT ClientId, FirstName, LastName
FROM `Client`
WHERE FirstName = 'Estrella' AND LastName = 'Bazely';

SELECT ClientId, EmailAddress
FROM Login
WHERE ClientId = '87976c42-9226-4bc6-8b32-23a8cd7869a5';
_________________________________________
# OUTCOME: The first part of the query confirms the existence of one row of client
           with the name of Estrella Bazely, with ClientID '87976c42-9226-4bc6-8b32-23a8cd7869a5'.
           The second part of the query found out that the database does contain an email address
           for Estrella Bazely, i.e. 'ebazelybf@123-reg.co.uk'.



## Activity 19
What are the Goals of the Workout with the Name 'This Is Parkour'?
You need three queries!
 - Select the WorkoutId from Workout where Name equals 'This Is Parkour'. (1 row)
 - Select GoalId from WorkoutGoal where the WorkoutId matches the WorkoutId from your first query. (3 rows)
 - Select the goal name from Goal where the GoalId is one of the GoalIds from your second query. (3 rows)
Results:
 - Endurance
 - Muscle Bulk
 - Focus: Shoulders
_________________________________________
-- My attempt:
USE PersonalTrainer;
SELECT WorkoutId FROM Workout
WHERE `Name` = 'This Is Parkour';

SELECT GoalId FROM WorkoutGoal
WHERE WorkoutId = 12;

SELECT GoalId, `Name`
FROM Goal
WHERE GoalId IN (3, 8, 15);
_________________________________________
# OUTCOME: First Part: Found one WorkoutId, i.e. 12 with that workout name.
           Second Part: Found 3 rows of GoalId, i.e. 3, 8 and 15.
           Third Part: Found the three goal names 'Endurance', 'Muscle Bulk', and 'Focus: Shoulders'.
           Consistent with sample solution,


