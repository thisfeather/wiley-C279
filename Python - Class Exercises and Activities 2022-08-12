Python - Class Exercises and Activities 2022-08-12

Carl Tang Yong Han


_______________________

#### Worksheet 2 - Classes and Objects

### Practice 1
Create a class Animal that could represent any animal.
Include at least two attributes within the new class.

## Answer:
_____________________________________
# your code here

class Animal:
    animal_name = ""
    number_of_legs = None
    category = ""
    have_visible_ears = None
    
print(Animal)
_____________________________________
## Outcome of running codes:

<class '__main__.Animal'>
_____________________________________



### Practice 2
Using the Animal class from the previous exercise, create three objects that represent animals.
Print out all attributes for each animal.

## Answer:
_____________________________________
# your code here

cat = Animal()
cat.animal_name = "Cat"
cat.number_of_legs = 4
cat.category = "mammal"
cat.have_visible_ears = True

gold_fish = Animal()
gold_fish.animal_name = "Gold Fish"
gold_fish.number_of_legs = 0
gold_fish.category = "fish"
gold_fish.have_visible_ears = False

python = Animal()
python.animal_name = "Python"
python.number_of_legs = 0
python.category = "reptile"
python.have_visible_ears = False

print("\nThese are attributes of:", cat.animal_name)
print("Number of legs:", cat.number_of_legs)
print("Category:", cat.category)
print("Have visible ears or not:", cat.have_visible_ears)

print("\nThese are attributes of:", gold_fish.animal_name)
print("Number of legs:", gold_fish.number_of_legs)
print("Category:", gold_fish.category)
print("Have visible ears or not:", gold_fish.have_visible_ears)

print("\nThese are attributes of:", python.animal_name)
print("Number of legs:", python.number_of_legs)
print("Category:", python.category)
print("Have visible ears or not:", python.have_visible_ears)
_____________________________________
## Outcome of running codes:

These are attributes of: Cat
Number of legs: 4
Category: mammal
Have visible ears or not: True

These are attributes of: Gold Fish
Number of legs: 0
Category: fish
Have visible ears or not: False

These are attributes of: Python
Number of legs: 0
Category: reptile
Have visible ears or not: False
_____________________________________



### Practice 3
Create an __init__ method for the Animal class.
Include at least three of the attributes you originally defined in the new method.

## Answer:
_____________________________________
# your code here

class Animal:
    animal_name = ""
    number_of_legs = None
    category = ""
    have_visible_ears = None
    
    def __init__(self, aname, numoflegs, category, havevisears):
        self.animal_name = aname
        self.number_of_legs = numoflegs
        self.category = category
        self.have_visible_ears = havevisears

# Try intantiate an animal object:
monkey = Animal("Monkey", 2, "mammal", True)

print(monkey)

print("\nThese are attributes of:", monkey.animal_name)
print("Number of legs:", monkey.number_of_legs)
print("Category:", monkey.category)
print("Have visible ears or not:", monkey.have_visible_ears)
_____________________________________
## Outcome of running codes:

<__main__.Animal object at 0x000001A4AEBD3D60>

These are attributes of: Monkey
Number of legs: 2
Category: mammal
Have visible ears or not: True
_____________________________________



### Practice 4
Create a display_info method for the Animal class.
Create three objects from the Animal class and display each object using the display_info method.

## Answer:
_____________________________________
# your code here

class Animal:
    animal_name = ""
    number_of_legs = None
    category = ""
    have_visible_ears = None
    
    def __init__(self, aname, numoflegs, category, havevisears):
        self.animal_name = aname
        self.number_of_legs = numoflegs
        self.category = category
        self.have_visible_ears = havevisears
        
    def display_info(self):
        print("\nThese are attributes of:", self.animal_name)
        print("Number of legs:", self.number_of_legs)
        print("Category:", self.category)
        print("Have visible ears or not:", self.have_visible_ears)     

        
# Try intantiate three animal object:
monkey = Animal("Monkey", 2, "mammal", True)
lizard = Animal("Lizard", 4, "reptile", False)
eagle = Animal("Eagle", 2, "bird", False)

monkey.display_info()
lizard.display_info()
eagle.display_info()
_____________________________________
## Outcome of running codes:

These are attributes of: Monkey
Number of legs: 2
Category: mammal
Have visible ears or not: True

These are attributes of: Lizard
Number of legs: 4
Category: reptile
Have visible ears or not: False

These are attributes of: Eagle
Number of legs: 2
Category: bird
Have visible ears or not: False
_____________________________________



### Practice 5a
The following code includes multiple errors. Find the errors and update the code as necessary.
Do not change any of the existing code above line 9.
The final output should read: Harry Potter and the Sorcerer's Stone by J. K. Rowling, published in 1997

## Answer:
_____________________________________
class Book:
    title = ""
    author = ""
    pub_date = ""
    def __init__ (book, ti, au, da):
        book.title = ti
        book.author = au
        book.pub_date = da
        
#Change only the code below this line
    def book_details(self):
        print (self.title + " by " + self.author + ", published in " + self.pub_date)
        
book_1 = Book("Harry Potter and the Sorcerer's Stone", "J. K. Rowling","1997")
book_1.book_details()
_____________________________________
## Outcome of running codes:

Harry Potter and the Sorcerer's Stone by J. K. Rowling, published in 1997
_____________________________________



### Practice 5b
Create and execute another meaningful method for the Animal class.
Make sure to pass the self object when executing the method.

## Answer:
_____________________________________
# your code here

class Animal:
    animal_name = ""
    number_of_legs = None
    category = ""
    have_visible_ears = None
    sound = ""
    
    def __init__(self, aname, numoflegs, category, havevisears, sound):
        self.animal_name = aname
        self.number_of_legs = numoflegs
        self.category = category
        self.have_visible_ears = havevisears
        self.sound = sound
        
    def display_info(self):
        print("\nThese are attributes of:", self.animal_name)
        print("Number of legs:", self.number_of_legs)
        print("Category:", self.category)
        print("Have visible ears or not:", self.have_visible_ears)     
        
    def signal_call(self, times):
        print(self.animal_name, "says: ")
        for i in range(times):
            print(self.sound, end=" ")
            print((i + 1) * "~", end="  ")
        print("\n")

wolf = Animal("Wolf", 4, "mammal", True, "Woooff")
wolf.signal_call(4)

salmon = Animal("Salmon", 0, "fish", False, "Blurb")
salmon.signal_call(5)
_____________________________________
## Outcome of running codes:

Wolf says: 
Woooff ~  Woooff ~~  Woooff ~~~  Woooff ~~~~  

Salmon says: 
Blurb ~  Blurb ~~  Blurb ~~~  Blurb ~~~~  Blurb ~~~~~  
_____________________________________



### Practice 6
Revise the following code so that the Person class includes a list of addresses rather than a single address.

## Answer:
_____________________________________
class Address:
    number = None
    street  = None
    city = None
    state = None
    zipcode = None
    def  __init__(self,num,st,cty,ste,zc):
        self.number = num
        self.street = st 
        self.city = cty
        self.state= ste
        self.zipcode  = zc
    def display(self):
        print(str(self.number) + " " + self.street + " " + self.city + " " + self.state + " " + self.zipcode)
        

class Person:
    fname = None
    lname = None
    addresses = None # addresses will hold a list  of addresses that belong to a person
    def __init__(self,fname,lname,addrs):
        self.fname = fname
        self.lname = lname
        self.addresses = addrs
    def display(self):
        # implement the display method to display  first name,  last name, 
        print(self.fname, self.lname)
        # then iterate through addresses and display each address in one line.
        for i in range(len(self.addresses)):
            self.addresses[i].display()        
        pass
    def add_address(self,addr):
        # implement
        self.addresses.append(addr)
        pass
     
class Account:
    ain = None 
    person = None 
    def __init__(self,ain,person):
        self.ain = ain
        self.person = person
    def display(self):
        print("Account Number: " + str(self.ain))
        print("Account Holder Information: ")
        self.person.display()

addr1 = Address(123,"Main Street","Asbury Park","NJ","07712")
addr2 = Address(12,"Rue Simon Bolivard","Paris","France","75019")
addresses = list()
addresses.append(addr1)
addresses.append(addr2)


p = Person("Haythem","Balti",addresses)
addr3 = Address(46,"Fourth Street","Louisville","KY","40208")

p.add_address(addr3)

# p.display()
a = Account("C1566X56576",p)
a.display()
_____________________________________
## Outcome of running codes:

Account Number: C1566X56576
Account Holder Information: 
Haythem Balti
123 Main Street Asbury Park NJ 07712
12 Rue Simon Bolivard Paris France 75019
46 Fourth Street Louisville KY 40208
_____________________________________




#### Activities: Classes and Objects


### Activity 1
The lesson uses Person and Animal as example classes. For this activity, choose another Noun of your choice
to create a class. It can be anything you wish, as long as it meets the following criteria:
 - Do not use people or animals.
 - The category must be broad enough to include different examples of the category.
 - It must represent a real-life object.
Include at least three attributes that are common to most (if not all) instances of the Noun. Use appropriate naming conventions.

## Answer:
_____________________________________
class Inventory:
    sku_no = ""          # SKU (stock-keeping unit) number as ID
    brand = ""           # such as Toshiba
    product_name = ""    # such as Awesome-112 Laptop
    price = None         # float
    disc_app = None      # boolean, to check if discount is applicable
    stock_avail = None   # int to keep track of stock available
    
    def __init__(self, sku, brand, pname, price, disc, stock):
        self.sku_no = sku
        self.brand = brand
        self.product_name = pname
        self.price = price
        self.disc_app = disc
        self.stock_avail = stock
        
    def display_attributes(self):
        print("\n")
        print("The SKU Code is:", self.sku_no)
        print("The brand is:", self.brand)
        print("The product name is:", self.product_name)
        print("The price is:", self.price)
        print("The discount applicability is:", self.disc_app)
        print("The unit(s) of stock available is:", self.stock_avail)
        
print(Inventory)

    
_____________________________________
## Outcome of running codes:

<class '__main__.Inventory'>
_____________________________________



### Activity 2
Use the Noun class you created in the previous activity to create at least four different objects.
Print out all attributes for each object.

## Answer:  ## Based on class methods already defined in Activity 1
_____________________________________
mouse_MOSDEL1234 = Inventory("MOS-DEL-1234", "Dell", "Wireless Mouse Model 1234", 15.50, False, 34)
mouse_MOSDEL1234.display_attributes()

keyb_KEBTOS3310 = Inventory("KEB-TOS-3310", "Toshiba", "Wireless Keyboard Model 3310", 27.80, True, 26)
keyb_KEBTOS3310.display_attributes()

thud_THDKST2688_128 = Inventory("THD-KST-2688", "Kingston", "Thumb Drive 128GB Model 2688", 58.80, True, 43)
thud_THDKST2688_128.display_attributes()

tabl_TABWAC4730 = Inventory("TAB-WAC-4730", "Wacom", "Drawing Tablet Model 4730", 670.70, True, 16)
tabl_TABWAC4730.display_attributes()
_____________________________________
## Outcome of running codes:


The SKU Code is: MOS-DEL-1234
The brand is: Dell
The product name is: Wireless Mouse Model 1234
The price is: 15.5
The discount applicability is: False
The unit(s) of stock available is: 34


The SKU Code is: KEB-TOS-3310
The brand is: Toshiba
The product name is: Wireless Keyboard Model 3310
The price is: 27.8
The discount applicability is: True
The unit(s) of stock available is: 26


The SKU Code is: THD-KST-2688
The brand is: Kingston
The product name is: Thumb Drive 128GB Model 2688
The price is: 58.8
The discount applicability is: True
The unit(s) of stock available is: 43


The SKU Code is: TAB-WAC-4730
The brand is: Wacom
The product name is: Drawing Tablet Model 4730
The price is: 670.7
The discount applicability is: True
The unit(s) of stock available is: 16
_____________________________________



### Activity 3
Create an __init__ method for your Noun class.
Include at least four of the attributes you originally defined in the new method.

## Answer:
_____________________________________
## NOTE: Already created in Activity 1 above.
_____________________________________
## Outcome of running codes:
## Refer to Activity 1 above.
_____________________________________



### Activity 4
Create a method for your Noun class. The method should perform a specific activity
(or series of activities) on objects based on the class.
Although this can be a simple display, you are encouraged to consider more complicated activities in the method.

## Answer Part 1: Update the initial class with added method
_____________________________________
class Inventory:
    sku_no = ""          # SKU (stock-keeping unit) number as ID
    brand = ""           # such as Toshiba
    product_name = ""    # such as Awesome-112 Laptop
    price = None         # float
    disc_app = None      # boolean, to check if discount is applicable
    stock_avail = None   # int to keep track of stock available
    
    def __init__(self, sku, brand, pname, price, disc, stock):
        self.sku_no = sku
        self.brand = brand
        self.product_name = pname
        self.price = price
        self.disc_app = disc
        self.stock_avail = stock
        
    def display_attributes(self):
        print("\n")
        print("The SKU Code is:", self.sku_no)
        print("The brand is:", self.brand)
        print("The product name is:", self.product_name)
        print("The price is:", self.price)
        print("The discount applicability is:", self.disc_app)
        print("The unit(s) of stock available is:", self.stock_avail)
        
    def display_promo(self, percent):  # Display a promo message based on percentage
        print("\nWelcome to Awesome Electronics!")
        print(f"{self.brand} {self.product_name}")
        originalDollar = "{:.2f}".format(self.price)
        if self.disc_app:
            # Discount message
            print(f"Now at {percent}% discount!!")
            discountedPrice = ((100 - percent) / 100) * self.price
            discountedDollar = "{:.2f}".format(discountedPrice)
            print(f"    ONLY ${discountedDollar} !!")
            print(f"Original Price: ${originalDollar} //")
            
            # Giving rough idea of stocks left to create urgency to buy
            left = self.stock_avail
            if left < 20:
                print("\nLess than 20 units left! Hurry!\n")
            elif left < 30:
                print("\nLess than 30 units left! What are you waiting for?\n")
            elif left < 50:
                print("\nLess than 50 units left! Get your promo code from our app!\n")
            
        else:
            print(f"Now at: ${originalDollar}")
            print("Download our app to check out our latest products and promotion!\n")
_____________________________________
## Answer Part 2: Use the updated class to run method. The class definition was run again,
                  and the objects creation as in Activity 2 was also run again before the
                  following codes are run:
_____________________________________
# No discount
mouse_MOSDEL1234.display_promo(0)

# 10% discount for relatively cheap items
keyb_KEBTOS3310.display_promo(10)
thud_THDKST2688_128.display_promo(10)

# 15% discount for big ticket purchase, clearing stock for new product release.
tabl_TABWAC4730.display_promo(15)
_____________________________________
## Outcome of running codes:


Welcome to Awesome Electronics!
Dell Wireless Mouse Model 1234
Now at: $15.50
Download our app to check out our latest products and promotion!


Welcome to Awesome Electronics!
Toshiba Wireless Keyboard Model 3310
Now at 10% discount!!
    ONLY $25.02 !!
Original Price: $27.80 //

Less than 30 units left! What are you waiting for?


Welcome to Awesome Electronics!
Kingston Thumb Drive 128GB Model 2688
Now at 10% discount!!
    ONLY $52.92 !!
Original Price: $58.80 //

Less than 50 units left! Get your promo code from our app!


Welcome to Awesome Electronics!
Wacom Drawing Tablet Model 4730
Now at 15% discount!!
    ONLY $570.10 !!
Original Price: $670.70 //

Less than 20 units left! Hurry!

_____________________________________



### Activity 5
Create a separate class that is logically related to your original Noun class,
based on the example that a Person can have one or more Addresses.
Create at least one Noun object that includes a list of objects from the associated class.
Display the Noun with the related objects.

## Answer Part 1: Create a separate class
_____________________________________
class Branch:
    branch_name = ""
    branch_email = ""
    branch_address = ""
    stocks = []  # A list of inventories that the branch store hold
    inventory_estimation = None  # Estimation of how much the stocks are worth in total sales price
    
    def __init__(self, bname, bemail, baddress, stocks):
        self.branch_name = bname
        self.branch_email = bemail
        self.branch_address = baddress
        self.stocks = stocks
    
    def display_branch(self):
        print("//--------------------------------------//")
        print(self.branch_name.upper())  ## Display upper case for branch name
        print("Address: ", self.branch_address)
        print("Email: ", self.branch_email)
        print("//--------------------------------------//")
        
    def stocks_report(self):
        stockList = self.stocks
        self.inventory_estimation = 0
        print("\nStocks held by the branch:\n")
        
        # Loop to print report while adding up estimation of inventory
        for i in range(len(stockList)):
            item = stockList[i]
            price = item.price
            avail = item.stock_avail
            self.inventory_estimation += avail * price
            print(f"{item.sku_no}:\t\t{avail} unit(s)\t\t{item.brand} {item.product_name}")
            
        # Present estimation of inventory:
        inventorySum = "{:.2f}".format(self.inventory_estimation)
        print(f"\nTotal estimated value of inventory above: ${inventorySum}." )

_____________________________________
## Answer Part 2: Create one Noun object that includes a list of earlier class of objects
                  and show case the object from the new class with the help of the list of objects.
_____________________________________
# Create list of stocks
print("Creating a list of stocks, 'nystock'")
nystock = []
print(nystock)

item001 = Inventory("MOS-DEL-1234", "Dell", "Wireless Mouse Model 1234", 15.50, False, 34)
nystock.append(item001)
item001.display_attributes()

item002 = Inventory("KEB-TOS-3310", "Toshiba", "Wireless Keyboard Model 3310", 27.80, True, 26)
nystock.append(item002)
item002.display_attributes()

item003 = Inventory("THD-KST-2688", "Kingston", "Thumb Drive 128GB Model 2688", 58.80, True, 43)
nystock.append(item003)
item003.display_attributes()

item004 = Inventory("TAB-WAC-4730", "Wacom", "Drawing Tablet Model 4730", 670.70, True, 16)
nystock.append(item004)
item004.display_attributes()
        

# Instantiate object:
new_york_branch = Branch("Awesome Electronics New York", "new.york.branch@awesomeelectronics.com",\
                  "28 Fifth Avenue NYC, NY 10129", nystock)

print("\nInstantiate object 'new_york_branch' and use its methods")

print("\nThis method displays the branch's basic info:\n")
new_york_branch.display_branch()

print("\nThis method provides a report on the branch's stocks and inventories:")
new_york_branch.stocks_report()
_____________________________________
## Outcome of running codes:

Creating a list of stocks, 'nystock'
[]


The SKU Code is: MOS-DEL-1234
The brand is: Dell
The product name is: Wireless Mouse Model 1234
The price is: 15.5
The discount applicability is: False
The unit(s) of stock available is: 34


The SKU Code is: KEB-TOS-3310
The brand is: Toshiba
The product name is: Wireless Keyboard Model 3310
The price is: 27.8
The discount applicability is: True
The unit(s) of stock available is: 26


The SKU Code is: THD-KST-2688
The brand is: Kingston
The product name is: Thumb Drive 128GB Model 2688
The price is: 58.8
The discount applicability is: True
The unit(s) of stock available is: 43


The SKU Code is: TAB-WAC-4730
The brand is: Wacom
The product name is: Drawing Tablet Model 4730
The price is: 670.7
The discount applicability is: True
The unit(s) of stock available is: 16

Instantiate object 'new_york_branch' and use its methods

This method displays the branch's basic info:

//--------------------------------------//
AWESOME ELECTRONICS NEW YORK
Address:  28 Fifth Avenue NYC, NY 10129
Email:  new.york.branch@awesomeelectronics.com
//--------------------------------------//

This method provides a report on the branch's stocks and inventories:

Stocks held by the branch:

MOS-DEL-1234:		34 unit(s)		Dell Wireless Mouse Model 1234
KEB-TOS-3310:		26 unit(s)		Toshiba Wireless Keyboard Model 3310
THD-KST-2688:		43 unit(s)		Kingston Thumb Drive 128GB Model 2688
TAB-WAC-4730:		16 unit(s)		Wacom Drawing Tablet Model 4730

Total estimated value of inventory above: $14509.40.
_____________________________________




#### Classes and Objects Self-Assessment: A Simple Calculator

### Instructions
Your program should include the following:
 - Design a class called SimpleCalculator that performs basic math operations 
   (addition, subtraction, multiplication, division) on two operands.
    - Create a separate method for each operation in the class.
 - The program should accept two values and an operator from the user,
   perform the selected operation using those two values,
   and display the result to the user in a meaningful way.
 - The user should be able to exit the program at any time,
   using a keyword like "Quit" or "Exit" in any letter case.
    - If the user chooses to exit,
      the program should end with an appropriate output message thanking the user.

## Answer Part 1: Build a class
_____________________________________
# Carl Tang Yong Han 2022-08-12

class SimpleCalculator:
    model_name = ""
    version = ""
    user_instruction = ""
    
    # Save the current operator for method's access later:
    operator = ""
    # Save the user-inputted operands for method's access later:
    operand1 = None
    operand2 = None
    
    
    def __init__(self, model, version, instruction):
        self.model_name = model
        self.version = version
        self.user_instruction = instruction
        
    def manual(self):
        print(f"{self.model_name} Version {self.version}\n")
        print("Manual for a Simple Calculator\n")
        print("Instruction for Use:")
        print(self.user_instruction)
        
    # This is just a function, not a method, to check for decimal input later:
    def is_decimal(self, numStr):
        return ("." in numStr)
    
    
    # In principle, user may set the operands and operator attributes in the class,
    # and invoke the following 4 methods from the class for different methematical operations.
    # but one may simply run the "run" method further below from the class, and have a better
    # user experience doing the operations.
    
    # Method for Addition:
    def add(self):
        if self.operator != "A":
            print("Something wrong with the operator, which is not specifically for addition.")
        elif (self.operand1 != None) and (self.operand2 != None):
            answer = self.operand1 + self.operand2
            print(f"\n   Results:      {self.operand1} + {self.operand2} = {answer}\n")
        else:
            print("Something wrong with the operands.")

    # Method for Subtraction:
    def subtract(self):
        if self.operator != "S":
            print("Something wrong with the operator, which is not specifically for subtraction.")
        elif (self.operand1 != None) and (self.operand2 != None):
            answer = self.operand1 - self.operand2
            print(f"\n   Results:      {self.operand1} - {self.operand2} = {answer}\n")
        else:
            print("Something wrong with the operands.")
            
    # Method for Multiplication:
    def multiply(self):
        if self.operator != "M":
            print("Something wrong with the operator, which is not specifically for multiplication.")
        elif (self.operand1 != None) and (self.operand2 != None):
            answer = self.operand1 * self.operand2
            print(f"\n   Results:      {self.operand1} x {self.operand2} = {answer}\n")
        else:
            print("Something wrong with the operands.")
            
    # Method for Addition:
    def divide(self):
        if self.operator != "D":
            print("Something wrong with the operator, which is not specifically for division.")
        elif (self.operand1 != None) and (self.operand2 != None):
            answer = self.operand1 / self.operand2
            print(f"\n   Results:      {self.operand1} / {self.operand2} = {answer}\n")
        else:
            print("Something wrong with the operands.")
    
    
    
    # A more user-friendly way to run and use the calculator by easy input UI.    
    # This will kickstart the use of calculator
    def run(self):
        print(f"You are using Simple Calculator\n{self.model_name} Version {self.version}\n")
        
        while True:
            input0 = input("Do you want to proceed (P) or quit (Q)? >>>> ").upper()
            
            if input0[0] == "Q":   # In case some users actually type out "quit"
                print("\nYou have chosen to quit.\nThank you, and see you again!\n")
                break
            
            input1 = input("Please enter first number: >>>> ")
            input2 = input("Please enter second number: >>>> ")
            input3 = input("Please enter operand:\n(A)dd, (S)ubtract, (M)ultiply or (D)ivide: >>>> ").upper()

            # To avoid making unnecessary float outcomes, we only treat input as float when
            # user actually have a "." in the input
            
            if self.is_decimal(input1):
                self.operand1 = float(input1)
            else:
                self.operand1 = int(input1)
                
            if self.is_decimal(input2):
                self.operand2 = float(input2)
            else:
                self.operand2 = int(input2)
                
            # User could have typed in "Add", "Subtract", etc., instead of the more convenient
            # initial letters A, S, D, or M. We can read initial characters.
            # Also be prepared for some users inputting "+", "-", "*", and "/",
            # which is more classical though less easy for users to type.
            # Sometimes user might forget if "M" refers to "Minus" or "Multiply",
            # which is when "*" would be useful.
            
            if (input3[0] == "A") or (input3[0] == "+"):
                self.operator = "A"
                self.add()
            elif (input3[0] == "S") or (input3[0] == "-"):
                self.operator = "S"
                self.subtract()
            elif (input3[0] == "M") or (input3[0] == "*"):
                self.operator = "M"
                self.multiply()
            elif (input3[0] == "D") or (input3[0] == "/"):
                self.operator = "D"
                self.divide()
            else:
                print("\nSorry, the calculator does not do the operation you mentioned.\n")

print(SimpleCalculator)
_____________________________________
## Answer Part 2a: Use the class in a slow manner to perform calculation:
_____________________________________
# Write the user instructions in a string:

instr = "Welcome to our simple calculator.\nThis calculator takes two operand values and one operator value, and \
function like common mathematical operations, like 'A + B', where A and B are the two operands you input first \
in sequence, followed by the operator (e.g. '+') that you input later.\nWe offer addition, subtraction, multiplication \
and division, which you can choose as your input for operator, in the form of  'addition' or 'add' or 'A' or '+' \
in any case, at your convenience. Similarly for other three operations.\n\n\
You may manually input the operands and operator as follows,\n\
my_calculator.operand1 = 123\n\
my_calculator.operand2 = 456\n\
my_calculator.operator = 'A'\n\
and call your intended method matching your operator of choice, i.e. add(), subtract(), multiply() and divide():\n\
my_calculator.add()    for example\n\n\
But a better way to use the calculator, which is more fun and convenient, is to call the run() method:\n\
my_calculator.run()    which will offer easier inputs.\n\n\
Give it a try, and have fun!"


# Instantiate an object and start using:
print("Instantiate an object and start using:\n ------------------------------")
my_calc = SimpleCalculator("Classio C279", "3.14", instr)
print("\n ------------------------------")

# Look up the manual:
print("Calling my_calc.manual() to look up the manual:\n ------------------------------")
my_calc.manual()
print("\n ------------------------------")

# Try a slow and inconvenient method to perform '123 + 456' by manually setting class attributes:
print("Try a slow and inconvenient method to perform '123 + 456' \
by manually setting class attributes, followed by running the add() method:\n ------------------------------\n")
my_calc.operand1 = 123
my_calc.operand2 = 456
my_calc.operator = "A"
my_calc.add()
print("\n ------------------------------")
_____________________________________
## Outcome of running codes, Part 2a:  ## (NOTE: longer text output has been broken up for easier reading on GitHub)

Instantiate an object and start using:
 ------------------------------

 ------------------------------
Calling my_calc.manual() to look up the manual:
 ------------------------------
Classio C279 Version 3.14

Manual for a Simple Calculator

Instruction for Use:
Welcome to our simple calculator.
This calculator takes two operand values and one operator value, and function like common mathematical operations,
like 'A + B', where A and B are the two operands you input first in sequence, followed by the operator (e.g. '+')
that you input later. We offer addition, subtraction, multiplication and division,
which you can choose as your input for operator, in the form of  'addition' or 'add' or 'A' or '+' in any case,
at your convenience. Similarly for other three operations.

You may manually input the operands and operator as follows,
my_calculator.operand1 = 123
my_calculator.operand2 = 456
my_calculator.operator = 'A'
and call your intended method matching your operator of choice, i.e. add(), subtract(), multiply() and divide():
my_calculator.add()    for example

But a better way to use the calculator, which is more fun and convenient, is to call the run() method:
my_calculator.run()    which will offer easier inputs.

Give it a try, and have fun!

 ------------------------------
Try a slow and inconvenient method to perform '123 + 456' by manually setting class attributes, followed by running the add() method:
 ------------------------------


   Results:      123 + 456 = 579


 ------------------------------
_____________________________________
## Answer Part 2b: Use the class in a more convenient manner to perform calculation:
_____________________________________
# Use the calculator in a more convenient way, by calling the my_calc.run() method:

my_calc.run()
_____________________________________
## Outcome of running codes:

You are using Simple Calculator
Classio C279 Version 3.14

Do you want to proceed (P) or quit (Q)? >>>> p
Please enter first number: >>>> 56
Please enter second number: >>>> 78
Please enter operand:
(A)dd, (S)ubtract, (M)ultiply or (D)ivide: >>>> addition

   Results:      56 + 78 = 134

Do you want to proceed (P) or quit (Q)? >>>> Proceed
Please enter first number: >>>> 3.142
Please enter second number: >>>> 7
Please enter operand:
(A)dd, (S)ubtract, (M)ultiply or (D)ivide: >>>> SUB

   Results:      3.142 - 7 = -3.858

Do you want to proceed (P) or quit (Q)? >>>> Proceed!!!
Please enter first number: >>>> -234
Please enter second number: >>>> 567
Please enter operand:
(A)dd, (S)ubtract, (M)ultiply or (D)ivide: >>>> *

   Results:      -234 x 567 = -132678

Do you want to proceed (P) or quit (Q)? >>>> p
Please enter first number: >>>> 897.453
Please enter second number: >>>> 34.59
Please enter operand:
(A)dd, (S)ubtract, (M)ultiply or (D)ivide: >>>> D

   Results:      897.453 / 34.59 = 25.945446660884645

Do you want to proceed (P) or quit (Q)? >>>> pro
Please enter first number: >>>> 6
Please enter second number: >>>> 2
Please enter operand:
(A)dd, (S)ubtract, (M)ultiply or (D)ivide: >>>> Power

Sorry, the calculator does not do the operation you mentioned.

Do you want to proceed (P) or quit (Q)? >>>> P
Please enter first number: >>>> -90.0
Please enter second number: >>>> -15.0
Please enter operand:
(A)dd, (S)ubtract, (M)ultiply or (D)ivide: >>>> ///

   Results:      -90.0 / -15.0 = 6.0

Do you want to proceed (P) or quit (Q)? >>>> Quit !!!!

You have chosen to quit.
Thank you, and see you again!
_____________________________________




#### Worksheet 3 - Inheritance


### Practice 1
Create an Animal class that includes two string attributes: name and location.
Implement the appropriate __init__ and display methods to create and display objects respectively.
Using inheritance, create another class called Mammal that inherits from the Animal class.
Create two Mammal objects and display each object's information using the display method.

## Answer:
_____________________________________
# your code here  

class Animal:
    name = ""
    location = ""
    have_fins_or_wings = None   # Boolean to indicate if this animal has fins or wings
    num_of_legs = None          # Integer
    
    def __init__(self, name, location, finWing, numLeg):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        if self.have_fins_or_wings:
            print("This animal has fins or wings.")
        else:
            print("This animal does not have fins or wings.")
        if self.num_of_legs == 0:
            print("This animal has no leg.")
        else:
            print(f"This animal has {self.num_of_legs} legs.")

# Test the class:
print(Animal)

print("Test instantiate an Animal object:\n")
lion = Animal("Lion", "Africa", False, 4)

print(lion)
lion.display()

# Now use inheritance to create class Mammal:
print("\nThis is creating an inherited class, Mammal:\n")

class Mammal(Animal):
    pass

print("Test instantiating two Mammal objects:\n")

print("\nMammal 1:")
tiger = Mammal("Tiger", "India", False, 4)
print(tiger)
tiger.display()

print("\nMammal 2:")
orangutan = Mammal("Orang Utan", "Malaysia", False, 2)
print(orangutan)
orangutan.display()
_____________________________________
## Outcome of running codes:

<class '__main__.Animal'>
Test instantiate an Animal object:

<__main__.Animal object at 0x000002159A79F760>

Name of animal: Lion
Found in location: Africa
This animal does not have fins or wings.
This animal has 4 legs.

This is creating an inherited class, Mammal:

Test instantiating two Mammal objects:


Mammal 1:
<__main__.Mammal object at 0x000002159A772790>

Name of animal: Tiger
Found in location: India
This animal does not have fins or wings.
This animal has 4 legs.

Mammal 2:
<__main__.Mammal object at 0x000002159A772580>

Name of animal: Orang Utan
Found in location: Malaysia
This animal does not have fins or wings.
This animal has 2 legs.
_____________________________________



### Practice 2
Create an Animal class that includes two string attributes: name and location.
Implement the appropriate __init__ and display methods to create and display objects.
Using inheritance, create another class called Mammal that inherits from the Animal class.
Add at least one more attribute that is specific to the Mammal class and is not included in the Animal class.
Create two Mammal objects and display them.

## Answer:
_____________________________________
# your code here  

class Animal:
    name = ""
    location = ""
    have_fins_or_wings = None   # Boolean to indicate if this animal has fins or wings
    num_of_legs = None          # Integer
    
    def __init__(self, name, location, finWing, numLeg):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        if self.have_fins_or_wings:
            print("This animal has fins or wings.")
        else:
            print("This animal does not have fins or wings.")
        if self.num_of_legs == 0:
            print("This animal has no leg.")
        else:
            print(f"This animal has {self.num_of_legs} legs.")

            
# Now use inheritance to create child class Mammal:

class Mammal(Animal):
    # Boolean to indicate if the animal has pouch for its baby
    have_pouch = None         
    # Boolean to indicate if the animal is protected by law from poaching
    protected_from_poaching = None

print("This is class Mammal with new attributes:")
print(Mammal)

# Instantiate two Mammal objects:

print("\nHere are two objects from the Mammal class:\n")

elephant = Mammal("Elephant", "Africa", False, 4)
elephant.have_pouch = False
elephant.protected_from_poaching = True
print("\nNew Mammal 1:")
print(elephant)
elephant.display()
print(f"{elephant.name} have pouch? {elephant.have_pouch}!!")
print(f"{elephant.name} is protected from poaching? {elephant.protected_from_poaching}!!")


kangaroo = Mammal("Kangaroo", "Australia", False, 2)
kangaroo.have_pouch = True
kangaroo.protected_from_poaching = False
print("\nNew Mammal 2:")
print(kangaroo)
kangaroo.display()
print(f"{kangaroo.name} have pouch? {kangaroo.have_pouch}!!")
print(f"{kangaroo.name} is protected from poaching? {kangaroo.protected_from_poaching}!!")
_____________________________________
## Outcome of running codes:

This is class Mammal with new attributes:
<class '__main__.Mammal'>

Here are two objects from the Mammal class:


New Mammal 1:
<__main__.Mammal object at 0x000002159A7AD100>

Name of animal: Elephant
Found in location: Africa
This animal does not have fins or wings.
This animal has 4 legs.
Elephant have pouch? False!!
Elephant is protected from poaching? True!!

New Mammal 2:
<__main__.Mammal object at 0x000002159A7B7F40>

Name of animal: Kangaroo
Found in location: Australia
This animal does not have fins or wings.
This animal has 2 legs.
Kangaroo have pouch? True!!
Kangaroo is protected from poaching? False!!
_____________________________________



### Practice 3
Create a class Animal that includes two string attributes: name and location.
Implement the appropriate __init__ and display methods to create and display objects.

Use inheritance to create another class called Mammal that inherits from the Animal class.
 - Add one more attribute specific to the Mammal class.
 - Override the display method to display the newly-added attribute of the Mammal class.
 - Create two Mammal objects and display them.
 
Create another class called Bird that also inherits from the Animal class.
 - Add one more attribute that is specific to the Bird class.
 - Override the display method to display the new attribute of the Bird class.
 - Create two Bird objects and display them.
 
Create another class called Reptile that inherits from the Animal class.
 - Add one more attribute specific to the Reptile class.
 - Override the display method to display the new attribute of the Reptile class.
 - Create two Reptile objects and display them.

## Answer Part 1: Mammal
_____________________________________
# your code here  

class Animal:
    name = ""
    location = ""
    have_fins_or_wings = None   # Boolean to indicate if this animal has fins or wings
    num_of_legs = None          # Integer
    
    def __init__(self, name, location, finWing, numLeg):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        if self.have_fins_or_wings:
            print("This animal has fins or wings.")
        else:
            print("This animal does not have fins or wings.")
        if self.num_of_legs == 0:
            print("This animal has no leg.")
        else:
            print(f"This animal has {self.num_of_legs} legs.")

            
# Now use inheritance to create child class Mammal:

class Mammal(Animal):
    # Boolean to indicate if the animal has pouch for its baby
    have_pouch = None         
    # Boolean to indicate if the animal is protected by law from poaching
    protected_from_poaching = None
    
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        
        if self.have_fins_or_wings:
            print(f"The {self.name} has fins or wings.", end=" ")
        else:
            print(f"The {self.name} does not have fins or wings.", end=" ")
        if self.num_of_legs == 0:
            print("It has no leg.")
        else:
            print(f"It has {self.num_of_legs} legs.")
            
        if self.have_pouch:
            print(f"Oh, by the way, the {self.name} has a pouch for its baby!")
        else:
            print("Oh, by the way, don't bother to look for a pouch on it. It has none.")
            
        if self.protected_from_poaching:
            print("For your information, this species is protected from poaching! Just so you know.")
        else:
            print(f"For your information, the {self.name} is not protected by law.")
            print("But show it some love, will ya?")
            

print("This is class Mammal with new attributes:")
print(Mammal)

# Instantiate two Mammal objects:

print("\nHere are two objects from the Mammal class:\n")

elephant = Mammal("Elephant", "Africa", False, 4)
elephant.have_pouch = False
elephant.protected_from_poaching = True
print("\nNew Mammal 1:")
print(elephant)
elephant.display()

kangaroo = Mammal("Kangaroo", "Australia", False, 2)
kangaroo.have_pouch = True
kangaroo.protected_from_poaching = False
print("\nNew Mammal 2:")
print(kangaroo)
kangaroo.display()
_____________________________________
## Outcome of running codes Part 1: Mammal

This is class Mammal with new attributes:
<class '__main__.Mammal'>

Here are two objects from the Mammal class:


New Mammal 1:
<__main__.Mammal object at 0x000002159A6C42B0>

Name of animal: Elephant
Found in location: Africa
The Elephant does not have fins or wings. It has 4 legs.
Oh, by the way, don't bother to look for a pouch on it. It has none.
For your information, this species is protected from poaching! Just so you know.

New Mammal 2:
<__main__.Mammal object at 0x000002159A7728E0>

Name of animal: Kangaroo
Found in location: Australia
The Kangaroo does not have fins or wings. It has 2 legs.
Oh, by the way, the Kangaroo has a pouch for its baby!
For your information, the Kangaroo is not protected by law.
But show it some love, will ya?
_____________________________________
## Answer Part 2: Bird
_____________________________________
# Now use inheritance to create child class Bird:

class Bird(Animal):
    can_actually_fly = None    # Boolean
    eggs_eaten = None          # Boolean, to indicate if humans eat the bird's eggs
    
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Soars, or runs around, in location: {self.location}")
        
        if self.have_fins_or_wings:
            print(f"The {self.name} has wings. (Well, we don't call them fins)")
        else:
            print(f"The {self.name}, if found with no wings, is probably disabled or disformed.")
        if self.num_of_legs == 0:
            print("If found with no legs at all, it is probably injured or disabled.")
        else:
            print(f"It has {self.num_of_legs} legs,", end=" ")
            
        if self.can_actually_fly:
            if self.num_of_legs != 0:
                print("which allows it to rest on tree branches.")
            print(f"A healthy {self.name} can usually fly, though not as fast as an airplane.")
        else:
            if self.num_of_legs != 0:
                print("which allows it to run around on the ground.")
            print(f"Despite being a winged animal (usually), the {self.name} can't actually fly.")
            
        if self.eggs_eaten:
            print(f"Humans actually do eat the eggs of the {self.name}.")
        else:
            print(f"Gluttons as we are, humans usually don't eat the eggs of the {self.name}.")
            

print("This is class Bird with new attributes:")
print(Bird)

# Instantiate two Bird objects:

print("\nHere are two objects from the Bird class:\n")

parrot = Bird("Parrot", "Everywhere", True, 2)
parrot.can_actually_fly = True
parrot.eggs_eaten = False
print("\nNew Bird 1:")
print(parrot)
parrot.display()

ostrich = Bird("Ostrich", "Africa", True, 2)
ostrich.can_actually_fly = False
ostrich.eggs_eaten = True
print("\nNew Bird 2:")
print(ostrich)
ostrich.display()   
_____________________________________
## Outcome of running codes Part 2: Bird

This is class Bird with new attributes:
<class '__main__.Bird'>

Here are two objects from the Bird class:


New Bird 1:
<__main__.Bird object at 0x000002159A79FEE0>

Name of animal: Parrot
Soars, or runs around, in location: Everywhere
The Parrot has wings. (Well, we don't call them fins)
It has 2 legs, which allows it to rest on tree branches.
A healthy Parrot can usually fly, though not as fast as an airplane.
Gluttons as we are, humans usually don't eat the eggs of the Parrot.

New Bird 2:
<__main__.Bird object at 0x000002159A772460>

Name of animal: Ostrich
Soars, or runs around, in location: Africa
The Ostrich has wings. (Well, we don't call them fins)
It has 2 legs, which allows it to run around on the ground.
Despite being a winged animal (usually), the Ostrich can't actually fly.
Humans actually do eat the eggs of the Ostrich.
_____________________________________
## Answer Part 3: Reptile
_____________________________________
# Now use inheritance to create child class Reptile:

class Reptile(Animal):
    cultural_ref = ""     # A string describing the cultural references of this reptile
    movies_made = None    # Boolean indicating if there are already movies on this reptile
    
    def display(self):
        intro = f"\nFrom paleontologic times when reptiles lived among the dinosaurs,\n\
to the urban legends that there are Reptilian humanoids of possibly extraterrestial origin,\n\
reptiles are no strangers to popular cultures.\n\
Introducing a member of the reptilian family, the {self.name}!\n"
        print(intro)
        print("If you're thinking of its mythical Mayan counterpart, a.k.a. the winged serpant god Kukulcan,")
        print(f"well, the {self.name} {'has' if self.have_fins_or_wings else 'has no'} wings.")
        print(f"On the other hand, if you're thinking of the 'Controlling-the-World-Behind-the-Scene'\n\
powerful intelligent Reptilian species walking on two feet, well, the more mundane {self.name} has \
{self.num_of_legs if self.num_of_legs != 0 else 'no'} legs.\n")
        if self.movies_made:
            print(f"You might already know, that there are movies about {self.name}!")
        else:
            print(f"It's a shame that the Hollywood has not made a movie about {self.name}!")
        print("By the way, did you know that: \n", self.cultural_ref)
        

# Create some cultural reference texts:

anaconda_ref = "'Anaconda' turns out is the name of a famous software used by Data Scientists,\n\
which includes programming tools of -- Python! How funny!\n"

crocodile_ref = "'Crocodile' turns out is a brand of luxury clothing and accessories,\n\
which some believe to be a rip-off from a similar famous brand Lacoste!\n"


print("This is class Reptile with new attributes:")
print(Reptile)

# Instantiate two Bird objects:

print("\nHere are two objects from the Reptile class:\n")

crocodile = Reptile("Crocodile", "Everywhere", False, 4)
crocodile.cultural_ref = crocodile_ref
crocodile.movies_made = True
print("\nNew Reptile 1:")
print(crocodile)
crocodile.display()

anaconda = Reptile("Anaconda", "Everywhere", False, 0)
anaconda.cultural_ref = anaconda_ref
anaconda.movies_made = True
print("\nNew Reptile 2:")
print(anaconda)
anaconda.display() 
_____________________________________
## Outcome of running codes Part 3: Reptile

This is class Reptile with new attributes:
<class '__main__.Reptile'>

Here are two objects from the Reptile class:


New Reptile 1:
<__main__.Reptile object at 0x000002159A79F130>

From paleontologic times when reptiles lived among the dinosaurs,
to the urban legends that there are Reptilian humanoids of possibly extraterrestial origin,
reptiles are no strangers to popular cultures.
Introducing a member of the reptilian family, the Crocodile!

If you're thinking of its mythical Mayan counterpart, a.k.a. the winged serpant god Kukulcan,
well, the Crocodile has no wings.
On the other hand, if you're thinking of the 'Controlling-the-World-Behind-the-Scene'
powerful intelligent Reptilian species walking on two feet, well, the more mundane Crocodile has 4 legs.

You might already know, that there are movies about Crocodile!
By the way, did you know that: 
 'Crocodile' turns out is a brand of luxury clothing and accessories,
which some believe to be a rip-off from a similar famous brand Lacoste!


New Reptile 2:
<__main__.Reptile object at 0x000002159A871EE0>

From paleontologic times when reptiles lived among the dinosaurs,
to the urban legends that there are Reptilian humanoids of possibly extraterrestial origin,
reptiles are no strangers to popular cultures.
Introducing a member of the reptilian family, the Anaconda!

If you're thinking of its mythical Mayan counterpart, a.k.a. the winged serpant god Kukulcan,
well, the Anaconda has no wings.
On the other hand, if you're thinking of the 'Controlling-the-World-Behind-the-Scene'
powerful intelligent Reptilian species walking on two feet, well, the more mundane Anaconda has no legs.

You might already know, that there are movies about Anaconda!
By the way, did you know that: 
 'Anaconda' turns out is the name of a famous software used by Data Scientists,
which includes programming tools of -- Python! How funny!
_____________________________________



### Practice 4
Create a class Animal that includes two string attributes: name and location.
Implement the appropriate __init__ and display methods to create and display objects respectively.

Use inheritance to create another class called Mammal that inherits from the Animal class.
 - Add one more attribute specific to the Mammal class.
 - Override the __init__ and display methods to display the new attribute of the Mammal class.
 - Create two Mammal objects and display them.

Create another class called Bird that also inherits from the Animal class.
 - Add one more attribute specific to the Bird class.
 - Override the __init__ and display methods to display the new attribute of the Bird class.
 - Create two Bird objects and display them.

Create another class called Reptile that inherits from the Animal class.
 - Add one more attribute specific to the Reptile class.
 - Override the __init__ and display methods to display the new attribute of the Reptile class.
 - Create two Reptile objects and display them.

## Answer Part 1: Mammal
_____________________________________
# your code here  

class Animal:
    name = ""
    location = ""
    have_fins_or_wings = None   # Boolean to indicate if this animal has fins or wings
    num_of_legs = None          # Integer
    
    def __init__(self, name, location, finWing, numLeg):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        if self.have_fins_or_wings:
            print("This animal has fins or wings.")
        else:
            print("This animal does not have fins or wings.")
        if self.num_of_legs == 0:
            print("This animal has no leg.")
        else:
            print(f"This animal has {self.num_of_legs} legs.")

            
# Now use inheritance to create child class Mammal:

class Mammal(Animal):
    # Boolean to indicate if the animal has pouch for its baby
    have_pouch = None         
    # Boolean to indicate if the animal is protected by law from poaching
    protected_from_poaching = None
    
    def __init__(self, name, location, finWing, numLeg, pouch, protect):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        self.have_pouch = pouch
        self.protected_from_poaching = protect
    
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        
        if self.have_fins_or_wings:
            print(f"The {self.name} has fins or wings.", end=" ")
        else:
            print(f"The {self.name} does not have fins or wings.", end=" ")
        if self.num_of_legs == 0:
            print("It has no leg.")
        else:
            print(f"It has {self.num_of_legs} legs.")
            
        if self.have_pouch:
            print(f"Oh, by the way, the {self.name} has a pouch for its baby!")
        else:
            print("Oh, by the way, don't bother to look for a pouch on it. It has none.")
            
        if self.protected_from_poaching:
            print("For your information, this species is protected from poaching! Just so you know.")
        else:
            print(f"For your information, the {self.name} is not protected by law.")
            print("But show it some love, will ya?")
            

print("This is class Mammal with new attributes:")
print(Mammal)

# Instantiate two Mammal objects:

print("\nHere are two objects from the Mammal class:\n")

elephant = Mammal("Elephant", "Africa", False, 4, False, True)
print("\nNew Mammal 1:")
print(elephant)
elephant.display()

kangaroo = Mammal("Kangaroo", "Australia", False, 2, True, False)
print("\nNew Mammal 2:")
print(kangaroo)
kangaroo.display()
_____________________________________
## Outcome of running codes Part 1: Mammal

## NOTE: same as Practice 3, no need to repeat here.
_____________________________________
## Answer Part 2: Bird
_____________________________________
# Now use inheritance to create child class Bird:

class Bird(Animal):
    can_actually_fly = None    # Boolean
    eggs_eaten = None          # Boolean, to indicate if humans eat the bird's eggs
    
    def __init__(self, name, location, finWing, numLeg, fly, eggs):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        self.can_actually_fly = fly
        self.eggs_eaten = eggs   
    
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Soars, or runs around, in location: {self.location}")
        
        if self.have_fins_or_wings:
            print(f"The {self.name} has wings. (Well, we don't call them fins)")
        else:
            print(f"The {self.name}, if found with no wings, is probably disabled or disformed.")
        if self.num_of_legs == 0:
            print("If found with no legs at all, it is probably injured or disabled.")
        else:
            print(f"It has {self.num_of_legs} legs,", end=" ")
            
        if self.can_actually_fly:
            if self.num_of_legs != 0:
                print("which allows it to rest on tree branches.")
            print(f"A healthy {self.name} can usually fly, though not as fast as an airplane.")
        else:
            if self.num_of_legs != 0:
                print("which allows it to run around on the ground.")
            print(f"Despite being a winged animal (usually), the {self.name} can't actually fly.")
            
        if self.eggs_eaten:
            print(f"Humans actually do eat the eggs of the {self.name}.")
        else:
            print(f"Gluttons as we are, humans usually don't eat the eggs of the {self.name}.")
            

print("This is class Bird with new attributes:")
print(Bird)

# Instantiate two Bird objects:

print("\nHere are two objects from the Bird class:\n")

parrot = Bird("Parrot", "Everywhere", True, 2, True, False)
print("\nNew Bird 1:")
print(parrot)
parrot.display()

ostrich = Bird("Ostrich", "Africa", True, 2, False, True)
print("\nNew Bird 2:")
print(ostrich)
ostrich.display()   
_____________________________________
## Outcome of running codes Part 2: Bird

## NOTE: same as Practice 3, no need to repeat here.
_____________________________________
## Answer Part 3: Reptile
_____________________________________
# Now use inheritance to create child class Reptile:

class Reptile(Animal):
    cultural_ref = ""     # A string describing the cultural references of this reptile
    movies_made = None    # Boolean indicating if there are already movies on this reptile

    def __init__(self, name, location, finWing, numLeg, cultural, movies):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        self.cultural_ref = cultural
        self.movies_made = movies   
    
    def display(self):
        intro = f"\nFrom paleontologic times when reptiles lived among the dinosaurs,\n\
to the urban legends that there are Reptilian humanoids of possibly extraterrestial origin,\n\
reptiles are no strangers to popular cultures.\n\
Introducing a member of the reptilian family, the {self.name}!\n"
        print(intro)
        print("If you're thinking of its mythical Mayan counterpart, a.k.a. the winged serpant god Kukulcan,")
        print(f"well, the {self.name} {'has' if self.have_fins_or_wings else 'has no'} wings.")
        print(f"On the other hand, if you're thinking of the 'Controlling-the-World-Behind-the-Scene'\n\
powerful intelligent Reptilian species walking on two feet, well, the more mundane {self.name} has \
{self.num_of_legs if self.num_of_legs != 0 else 'no'} legs.\n")
        if self.movies_made:
            print(f"You might already know, that there are movies about {self.name}!")
        else:
            print(f"It's a shame that the Hollywood has not made a movie about {self.name}!")
        print("By the way, did you know that: \n", self.cultural_ref)
        

# Create some cultural reference texts:

anaconda_ref = "'Anaconda' turns out is the name of a famous software used by Data Scientists,\n\
which includes programming tools of -- Python! How funny!\n"

crocodile_ref = "'Crocodile' turns out is a brand of luxury clothing and accessories,\n\
which some believe to be a rip-off from a similar famous brand Lacoste!\n"


print("This is class Reptile with new attributes:")
print(Reptile)

# Instantiate two Bird objects:

print("\nHere are two objects from the Reptile class:\n")

crocodile = Reptile("Crocodile", "Everywhere", False, 4, crocodile_ref, True)
print("\nNew Reptile 1:")
print(crocodile)
crocodile.display()

anaconda = Reptile("Anaconda", "Everywhere", False, 0, anaconda_ref, True)
print("\nNew Reptile 2:")
print(anaconda)
anaconda.display() 
_____________________________________
## Outcome of running codes Part 3: Reptile

## NOTE: same as Practice 3, no need to repeat here.
_____________________________________



### Practice 5
Create a class Animal that includes two string attributes: name and location.
Implement the appropriate __init__ and display method, to create and display objects respectively.

Use inheritance to create another class called Mammal that will inherit from the Animal class.
 - Add one more attribute specific to the Mammal class.
 - Override the __init__ and display methods to display the new added attribute of the mammal class.
   Use the __init__ method of the parent class (Animal) to set the values of the name and location attributes.
 - Create two mammal objects and display them.

Create another class called Bird that also inherits from the Animal class.
 - Add one more attribute that specific to the bird class.
 - Override the __init__ and display methods to display the new added attribute of the bird class.
   Use the __init__ method of the parent class (Animal) to set the values of the name and location attributes.
 - Create two bird objects and display them.

Create another class called Reptile that inherits from the animal class.
 - Add one more attribute that specific to the reptile class.
 - Override the __init__ and display methods to display the new added attribute of the reptile class.
   Use the __init__ method of the parent class (Animal) to set the values of the name and location attributes.
 - Create two reptile objects and display them

## Answer Part 1: Mammal
_____________________________________
# your code here  

class Animal:
    name = ""
    location = ""
    have_fins_or_wings = None   # Boolean to indicate if this animal has fins or wings
    num_of_legs = None          # Integer
    
    def __init__(self, name, location, finWing, numLeg):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        if self.have_fins_or_wings:
            print("This animal has fins or wings.")
        else:
            print("This animal does not have fins or wings.")
        if self.num_of_legs == 0:
            print("This animal has no leg.")
        else:
            print(f"This animal has {self.num_of_legs} legs.")

            
# Now use inheritance to create child class Mammal:

class Mammal(Animal):
    # Boolean to indicate if the animal has pouch for its baby
    have_pouch = None         
    # Boolean to indicate if the animal is protected by law from poaching
    protected_from_poaching = None
    
    def __init__(self, name, location, finWing, numLeg, pouch, protect):
        Animal.__init__(self, name, location, finWing, numLeg)
        self.have_pouch = pouch
        self.protected_from_poaching = protect
    
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        
        if self.have_fins_or_wings:
            print(f"The {self.name} has fins or wings.", end=" ")
        else:
            print(f"The {self.name} does not have fins or wings.", end=" ")
        if self.num_of_legs == 0:
            print("It has no leg.")
        else:
            print(f"It has {self.num_of_legs} legs.")
            
        if self.have_pouch:
            print(f"Oh, by the way, the {self.name} has a pouch for its baby!")
        else:
            print("Oh, by the way, don't bother to look for a pouch on it. It has none.")
            
        if self.protected_from_poaching:
            print("For your information, this species is protected from poaching! Just so you know.")
        else:
            print(f"For your information, the {self.name} is not protected by law.")
            print("But show it some love, will ya?")
            

print("This is class Mammal with new attributes:")
print(Mammal)

# Instantiate two Mammal objects:

print("\nHere are two objects from the Mammal class:\n")

elephant = Mammal("Elephant", "Africa", False, 4, False, True)
print("\nNew Mammal 1:")
print(elephant)
elephant.display()

kangaroo = Mammal("Kangaroo", "Australia", False, 2, True, False)
print("\nNew Mammal 2:")
print(kangaroo)
kangaroo.display()
_____________________________________
## Outcome of running codes Part 1: Mammal

## NOTE: same as Practice 3, no need to repeat here.
_____________________________________
## Answer Part 2: Bird
_____________________________________
# Now use inheritance to create child class Bird:

class Bird(Animal):
    can_actually_fly = None    # Boolean
    eggs_eaten = None          # Boolean, to indicate if humans eat the bird's eggs
    
    def __init__(self, name, location, finWing, numLeg, fly, eggs):
        Animal.__init__(self, name, location, finWing, numLeg)
        self.can_actually_fly = fly
        self.eggs_eaten = eggs   
    
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Soars, or runs around, in location: {self.location}")
        
        if self.have_fins_or_wings:
            print(f"The {self.name} has wings. (Well, we don't call them fins)")
        else:
            print(f"The {self.name}, if found with no wings, is probably disabled or disformed.")
        if self.num_of_legs == 0:
            print("If found with no legs at all, it is probably injured or disabled.")
        else:
            print(f"It has {self.num_of_legs} legs,", end=" ")
            
        if self.can_actually_fly:
            if self.num_of_legs != 0:
                print("which allows it to rest on tree branches.")
            print(f"A healthy {self.name} can usually fly, though not as fast as an airplane.")
        else:
            if self.num_of_legs != 0:
                print("which allows it to run around on the ground.")
            print(f"Despite being a winged animal (usually), the {self.name} can't actually fly.")
            
        if self.eggs_eaten:
            print(f"Humans actually do eat the eggs of the {self.name}.")
        else:
            print(f"Gluttons as we are, humans usually don't eat the eggs of the {self.name}.")
            

print("This is class Bird with new attributes:")
print(Bird)

# Instantiate two Bird objects:

print("\nHere are two objects from the Bird class:\n")

parrot = Bird("Parrot", "Everywhere", True, 2, True, False)
print("\nNew Bird 1:")
print(parrot)
parrot.display()

ostrich = Bird("Ostrich", "Africa", True, 2, False, True)
print("\nNew Bird 2:")
print(ostrich)
ostrich.display()   
_____________________________________
## Outcome of running codes Part 2: Bird

## NOTE: same as Practice 3, no need to repeat here.
_____________________________________
## Answer Part 3: Reptile
_____________________________________
# Now use inheritance to create child class Reptile:

class Reptile(Animal):
    cultural_ref = ""     # A string describing the cultural references of this reptile
    movies_made = None    # Boolean indicating if there are already movies on this reptile

    def __init__(self, name, location, finWing, numLeg, cultural, movies):
        Animal.__init__(self, name, location, finWing, numLeg)
        self.cultural_ref = cultural
        self.movies_made = movies   
    
    def display(self):
        intro = f"\nFrom paleontologic times when reptiles lived among the dinosaurs,\n\
to the urban legends that there are Reptilian humanoids of possibly extraterrestial origin,\n\
reptiles are no strangers to popular cultures.\n\
Introducing a member of the reptilian family, the {self.name}!\n"
        print(intro)
        print("If you're thinking of its mythical Mayan counterpart, a.k.a. the winged serpant god Kukulcan,")
        print(f"well, the {self.name} {'has' if self.have_fins_or_wings else 'has no'} wings.")
        print(f"On the other hand, if you're thinking of the 'Controlling-the-World-Behind-the-Scene'\n\
powerful intelligent Reptilian species walking on two feet, well, the more mundane {self.name} has \
{self.num_of_legs if self.num_of_legs != 0 else 'no'} legs.\n")
        if self.movies_made:
            print(f"You might already know, that there are movies about {self.name}!")
        else:
            print(f"It's a shame that the Hollywood has not made a movie about {self.name}!")
        print("By the way, did you know that: \n", self.cultural_ref)
        

# Create some cultural reference texts:

anaconda_ref = "'Anaconda' turns out is the name of a famous software used by Data Scientists,\n\
which includes programming tools of -- Python! How funny!\n"

crocodile_ref = "'Crocodile' turns out is a brand of luxury clothing and accessories,\n\
which some believe to be a rip-off from a similar famous brand Lacoste!\n"


print("This is class Reptile with new attributes:")
print(Reptile)

# Instantiate two Bird objects:

print("\nHere are two objects from the Reptile class:\n")

crocodile = Reptile("Crocodile", "Everywhere", False, 4, crocodile_ref, True)
print("\nNew Reptile 1:")
print(crocodile)
crocodile.display()

anaconda = Reptile("Anaconda", "Everywhere", False, 0, anaconda_ref, True)
print("\nNew Reptile 2:")
print(anaconda)
anaconda.display() 
_____________________________________
## Outcome of running codes Part 3: Reptile

## NOTE: same as Practice 3, no need to repeat here.
_____________________________________



### Practice 6
Change the code below as follows:
 - Add an attribute to the Director class called team. The team represents the employees that the director manages.
   The team attribute should be a list of Employee objects.
    - Implement the add_employee method, which takes as input an Employee object and adds it to the team object.
    - Implement the display method of the Director class to display the information about the director
      and the list of the employees that the director manages.
 - Create another class called HourlyEmployee that inherits from Employee.
    - Add one attribute to the HourlyEmployee class called hourly_rate,
      which represents the hourly pay rate for the hourly employee.
    - Implement the __init__ method and display methods for the HourlyEmployee class.
After you make these changes, verify that the code works by making sure it can display the attributes of the Director object using the display method.

## Answer:
_____________________________________
class Person:
    first_name="" 
    last_name="" 
    def __init__(self,fname,lname): 
        self.first_name = fname
        self.last_name = lname
    def display(self): 
        print("Person First Name: " + self.first_name)
        print("Person Last Name: " + self.last_name)
        

class Employee(Person):
    employee_id=None
    def __init__(self,emp_id,fname,lname):
        Person.__init__(self,fname,lname) 
        self.employee_id =emp_id
    def display(self):
        print("Employee ID: " + self.employee_id)
        print("Employee First Name: " + self.first_name)
        print("Employee Last Name: " + self.last_name)

class Director(Employee):
    director_level=None
    team =None
    def __init__(self,emp_id,fname,lname,d_level):
        # do not change this code
        Employee.__init__(self,emp_id,fname,lname)
        self.director_level = d_level
        self.team = list()
    def display(self):
        # a method that displays all the attributes of a director object
        print("Director ID: " + self.employee_id)
        print("Director First Name: " + self.first_name)
        print("Director Last Name: " + self.last_name)
        print("Director Level: " + self.director_level)
        print("\nEmployees managed by this Director:\n")
        for i in range(len(self.team)):
            employeeI = self.team[i]
            print(f"{i+1}. {employeeI.first_name} {employeeI.last_name}, ID {employeeI.employee_id}")
        pass
    def add_employee(self,emp):
        # a method to add an employee object to the team attribute 
        self.team.append(emp)
        pass
    
class HourlyEmployee(Employee):
    hourly_rate = None
    # implement this  class
    def __init__(self,emp_id,fname,lname,hrate):
        Employee.__init__(self,emp_id,fname,lname)
        self.hourly_rate = hrate
    def display(self):
        print("Employee ID: " + self.employee_id)
        print("Employee First Name: " + self.first_name)
        print("Employee Last Name: " + self.last_name)
        print("This is an Hourly Employee.")
        print("Hourly rate: $" + "{:.2f}".format(self.hourly_rate))     
    pass


# DO NOT CHANGE THIS CODE 
d1 = Director("E24523525","Haythem","Balti","D-LEVEL-1")


# create first employee object 
e1 = Employee("E4746456456","Mark","Smith")
# add employee e1 to the team attribute of the Director class 
d1.add_employee(e1)
# create second hourlyemployee object 
e2 = HourlyEmployee("E47464578978","Mary","Lang", 16.50)
# add hourly employee e2 to the team attribute of the Director class 
d1.add_employee(e2)


d1.display()

# additional: display the hourly employee:
print("\nThis is the hourly employee e2:\n")
e2.display()
_____________________________________
## Outcome of running codes:

Director ID: E24523525
Director First Name: Haythem
Director Last Name: Balti
Director Level: D-LEVEL-1

Employees managed by this Director:

1. Mark Smith, ID E4746456456
2. Mary Lang, ID E47464578978

This is the hourly employee e2:

Employee ID: E47464578978
Employee First Name: Mary
Employee Last Name: Lang
This is an Hourly Employee.
Hourly rate: $16.50
_____________________________________




### Practice 7
Implement the classes below as follows:
Implement the __init__ and display methods of the Asset class.
Next, leverage the __init__ and display methods from the Asset class to create the following:
 - Implement the __init__ and display methods of the Stock class.
 - Implement the __init__ and display methods of the Bond class.
 - Implement the __init__ and display methods of the MutualFund class.
Create two objects from each of the Stock, Bond, and MutualFund classes.
Use the display method to display the contents of each object.

## Answer:
_____________________________________
class Asset: 
    symbol=None
    price=None
    description=None
    def __init__(self,sym,pce,desc):
        self.symbol = sym
        self.price = pce
        self.description = desc
        pass
    def display(self):
        print("\nAsset Symbol:", self.symbol)
        print("Asset Price:", self.price)
        print("Description:", self.description)
        pass


class Stock(Asset):
    company_name = None
    def __init__(self,sym,pce,desc,comname):
        Asset.__init__(self,sym,pce,desc)
        self.company_name = comname
    def display(self):
        print(f"\nStocks for {self.symbol} ({self.company_name}):")
        print(f"NOTE: {self.description}")
        print(f"Total value held: ${self.price}")


class Bond(Asset):
    interest_rate=None
    def __init__(self,sym,pce,desc,intrate):
        Asset.__init__(self,sym,pce,desc)
        self.interest_rate = intrate
    def display(self):
        print(f"\n{self.description} ({self.symbol})")
        print(f"Interest Rate (a.k.a. Coupon Rate): {self.interest_rate}%")
        print(f"Total value held: ${self.price}")
        

class MutualFund(Asset):
    fund_manager=None
    def __init__(self,sym,pce,desc,fundman):
        Asset.__init__(self,sym,pce,desc)
        self.fund_manager = fundman
    def display(self):
        print(f"\nMutual Fund {self.symbol}, Fund Manager: {self.fund_manager}")
        print(f"More info:\n{self.description}")
        print(f"Total value held: ${self.price}")
        
    
# Now create two objects from each child class:    
    
stock_desc1 = "Asset price refers to total valuation of all units of shares as of today."
stock_desc2 = "Alphabet Inc. was restructured from Google LLC.\n\
Asset price refers to total valuation of all units of shares as of today."

bond_desc1 = "Treasury 5-Year Bond"
bond_desc2 = "Amazon.com, Inc. 3-Year Company Bond"

mutual_fund_desc1 = "Golden Bull Investment Fund. Portfolio includes exposure to:\n\
treasury and company bonds, REITs, stocks, and Forex."
mutual_fund_desc2 = "Quantum Wealth Fund. Portfolio includes exposure to:\n\
bonds, stocks, futures, options, Forex and privare equities."

aaplStock = Stock("AAPL", 600000, stock_desc1, "Apple Inc.")
print("\nStock 1 instantiated:", aaplStock)
aaplStock.display()

googStock = Stock("GOOG", 500000, stock_desc2, "Alphabet Inc.")
print("\nStock 2 instantiated:", googStock)
googStock.display()

treasBond = Bond("TREAS", 800000, bond_desc1, 5)
print("\nBond 1 instantiated:", treasBond)
treasBond.display()

amznBond = Bond("AMZN", 700000, bond_desc2, 7)
print("\nBond 1 instantiated:", amznBond)
amznBond.display()

golbMFund = MutualFund("GOLB", 400000, mutual_fund_desc1, "David Rich")
print("\nMutual Fund 1 instantiated:", golbMFund)
golbMFund.display()

quawMFund = MutualFund("QUAW", 300000, mutual_fund_desc2, "Richard Buffet")
print("\nMutual Fund 1 instantiated:", quawMFund)
quawMFund.display()
_____________________________________
## Outcome of running codes:

Stock 1 instantiated: <__main__.Stock object at 0x000002159A79FB20>

Stocks for AAPL (Apple Inc.):
NOTE: Asset price refers to total valuation of all units of shares as of today.
Total value held: $600000

Stock 2 instantiated: <__main__.Stock object at 0x000002159A79FD00>

Stocks for GOOG (Alphabet Inc.):
NOTE: Alphabet Inc. was restructured from Google LLC.
Asset price refers to total valuation of all units of shares as of today.
Total value held: $500000

Bond 1 instantiated: <__main__.Bond object at 0x000002159A772910>

Treasury 5-Year Bond (TREAS)
Interest Rate (a.k.a. Coupon Rate): 5%
Total value held: $800000

Bond 1 instantiated: <__main__.Bond object at 0x000002159A7AD790>

Amazon.com, Inc. 3-Year Company Bond (AMZN)
Interest Rate (a.k.a. Coupon Rate): 7%
Total value held: $700000

Mutual Fund 1 instantiated: <__main__.MutualFund object at 0x000002159A8ACF10>

Mutual Fund GOLB, Fund Manager: David Rich
More info:
Golden Bull Investment Fund. Portfolio includes exposure to:
treasury and company bonds, REITs, stocks, and Forex.
Total value held: $400000

Mutual Fund 1 instantiated: <__main__.MutualFund object at 0x000002159A7ADFA0>

Mutual Fund QUAW, Fund Manager: Richard Buffet
More info:
Quantum Wealth Fund. Portfolio includes exposure to:
bonds, stocks, futures, options, Forex and privare equities.
Total value held: $300000
_____________________________________




#### Activities: Inheritance


### Activity 0
Before beginning, create a class Noun to use as the starting point for the activities in this section.
The Noun class can be anything you wish, as long as it meets the following criteria:
 - Do not use people or animals.
 - The category must be broad enough to include different examples of the category.
 - It must represent a real-life object.
Include at least three attributes that are common to most (if not all) instances of the Noun.
Use appropriate naming conventions. If you created a Noun class for an earlier activity in this course,
you are welcome to use it for the activities in this page, or you can create a new one.
Implement the appropriate __init__ and display methods to create and display objects respectively.

## Answer:
_____________________________________
class Drink:
    drink_name = ""
    sweet_or_not = None         # Boolean
    alcoholic = None            # Boolean, in case it's alcoholic and not children-friendly
    calories_12_oz = None       # Calories for every 12 ounces
    
    def __init__(self, dname, sweet, alcoholic, calories):
        self.drink_name = dname
        self.sweet_or_not = sweet
        self.alcoholic = alcoholic
        self.calories_12_oz = calories
        
    def display(self):
        print(f"\nThe drink is {self.drink_name}.")
        print(f"It is {'sweetened' if self.sweet_or_not else 'not sweetened'} and", end = " ")
        print(f"{'alcoholic, please try and avoid' if self.alcoholic else 'non-alcoholic'}.")
        print(f"Each serving of 12 ounces contains {self.calories_12_oz} calories.")

print("Test create two drinks:")

black_coffee = Drink("Black Coffee", False, False, 3)
print("\nDrink 1, black_coffee:", black_coffee)
black_coffee.display()

regular_beer = Drink("Regular Beer", False, True, 155)
print("\nDrink 2, regular_beer:", regular_beer)
regular_beer.display()
_____________________________________
## Outcome of running codes:

Test create two drinks:

Drink 1, black_coffee: <__main__.Drink object at 0x00000253C0AB2100>

The drink is Black Coffee.
It is not sweetened and non-alcoholic.
Each serving of 12 ounces contains 3 calories.

Drink 2, regular_beer: <__main__.Drink object at 0x00000253C09D35E0>

The drink is Regular Beer.
It is not sweetened and alcoholic, please try and avoid.
Each serving of 12 ounces contains 155 calories.
_____________________________________



### Activity 1
Use inheritance to create another class that will inherit from the Noun class.
Create two objects using the new class and display each object's information using the display method.
As an example from this lesson, we started with an Animal class, created a Mammal class that inherits from Animal,
and then created two Mammal objects.
You will need to identify an appropriate class based on your own Noun class as well as appropriate objects
that represent the inherited class.

## Answer:
_____________________________________
class CafeDrink(Drink):
    pass

print("Test create two objects using this child class, CafeDrink:")

earl_grey = Drink("Earl Grey Tea", False, False, 4)
print("\nCafe Drink 1, earl_grey:", earl_grey)
earl_grey.display()

coffee_light_whipped = Drink("Coffee with Light Whipped Cream", True, False, 17)
print("\nCafe Drink 2, coffee_light_whipped:", coffee_light_whipped)
coffee_light_whipped.display()
_____________________________________
## Outcome of running codes:

Test create two objects using this child class, CafeDrink:

Cafe Drink 1, earl_grey: <__main__.Drink object at 0x00000253C0AB2400>

The drink is Earl Grey Tea.
It is not sweetened and non-alcoholic.
Each serving of 12 ounces contains 4 calories.

Cafe Drink 2, coffee_light_whipped: <__main__.Drink object at 0x00000253C0AB2C40>

The drink is Coffee with Light Whipped Cream.
It is sweetened and non-alcoholic.
Each serving of 12 ounces contains 17 calories.
_____________________________________



### Activity 2
Add at least two attributes to the new class created in the previous activity.
These attributes should be different from the attributes in the original Noun class and specific to the new class.
As an example from the lesson, the Animal class included the attributes of name and place.
The Mammal class that inherits from the Animal class would include mammal-specific attributes, such as gender and fur length.
Override the __init__ and display methods to display the new attributes,
and then create at least two new objects based on the inherited class and display them with the class attributes.

## Answer:
_____________________________________
class CafeDrink(Drink):
    price_medium = None      # price for a medium-sized serving
    cafe_name = ""           # name of the Cafe or Cafe Franchise
    member_discount = None   # boolean, if any member discount is given
    
    def __init__(self, dname, sweet, alcoholic, calories, price, cafe, discount):
        Drink.__init__(self, dname, sweet, alcoholic, calories)
        self.price_medium = price
        self.cafe_name = cafe
        self.member_discount = discount
        
    def display(self):
        print(f"\nCheck out {self.drink_name}, available at {self.cafe_name}.")
        print(f"It is {'sweetened' if self.sweet_or_not else 'not sweetened'} and", end = " ")
        print(f"{'alcoholic, not recommended for minors' if self.alcoholic else 'non-alcoholic'}.")
        print(f"Each serving of 12 ounces contains {self.calories_12_oz} calories, your cup size may vary.")
        print(f"Medium cup at ${'{:.2f}'.format(self.price_medium)},", end=" ")
        gotDiscount = "member discount available!"
        noDiscount = "download our app to check out promotions!"
        print(f"{gotDiscount if self.member_discount else noDiscount}\n")
        

print("Test create two objects using this amended child class, CafeDrink:")

latte_espresso_whole = \
CafeDrink("Latte (Espressio Coffee) with Whole Milk", False, False, 122, 5.60, "Starbucks Coffee", False)
print("\nCafe Drink 1, latte_espresso_whole:", latte_espresso_whole)
latte_espresso_whole.display()

kombucha = \
CafeDrink("Kombucha", True, True, 157, 5.80, "Real Food Cafe", True)
print("\nCafe Drink 2, kombucha:", kombucha)
kombucha.display()
_____________________________________
## Outcome of running codes:

Test create two objects using this amended child class, CafeDrink:

Cafe Drink 1, latte_espresso_whole: <__main__.CafeDrink object at 0x00000253C0AB7FA0>

Check out Latte (Espressio Coffee) with Whole Milk, available at Starbucks Coffee.
It is not sweetened and non-alcoholic.
Each serving of 12 ounces contains 122 calories, your cup size may vary.
Medium cup at $5.60, download our app to check out promotions!


Cafe Drink 2, kombucha: <__main__.CafeDrink object at 0x00000253C0AB2D00>

Check out Kombucha, available at Real Food Cafe.
It is sweetened and alcoholic, not recommended for minors.
Each serving of 12 ounces contains 157 calories, your cup size may vary.
Medium cup at $5.80, member discount available!
_____________________________________



### Activity 3
Create a second and a third class that inherit from the Noun class you started with.

Include at least three class-specific attributes for each class.
For each of the new classes, override the __init__ and display methods to display the new attributes.
Create at least two new objects based on the inherited class and display them with the class attributes.

## Answer:
_____________________________________
# Make a child class of Vending Machine Drinks

class VendingMachineDrink(Drink):
    brand = ""
    packaging_unit = ""    # e.g. 8-ounce can or 16-ounce bottle
    price = None          # price of packaging unit from a vending machine.
    recycleable = None    # boolean for whether the packaging can be recycled locally
    
    def __init__(self, dname, sweet, alcoholic, calories, brand, pack, price, recycle):
        Drink.__init__(self, dname, sweet, alcoholic, calories)
        self.brand = brand
        self.packaging_unit = pack
        self.price = price
        self.recycleable = recycle
        
    def display(self):
        print("\nAvailable at our network of vending machines:", end=" ")
        print(f"{self.brand} ({self.drink_name}), {self.packaging_unit}")
        priceDollar = "{:.2f}".format(self.price)
        print(f"${priceDollar} / unit, accepts coins, $2 and $5 notes, and bus fare card scan.")
        sw = "Sweetened" if self.sweet_or_not else "Non-sweetened"
        alc = "contains alcohol" if self.alcoholic else "non-alcoholic"
        print(f"Info: {sw}, {alc}.")
        print(f"Calories per 12 ounce: {self.calories_12_oz}, please enjoy in moderation.")
        if self.recycleable:
            print("Please recycle the can or bottle.")
        else:
            print("Please keep our environment clean, dispose of used containers properly.")
        
        
coke_classic = \
VendingMachineDrink("Classic Coke Soda", True, False, 140, "Coca-Cola", "8-Oz Can", 1.20, True)
print("\nVending Machine Drink 1, coke_classic:", coke_classic)
coke_classic.display()

sports_drink_gatorade = \
VendingMachineDrink("Sports Drink Isotonic", True, False, 94, "Gatorade", "12-Oz Bottle", 1.50, False )
print("\nVending Machine Drink 2, sports_drink_gatorade:", sports_drink_gatorade)
sports_drink_gatorade.display()


# Make a child class of Supermarket-sold Drinks

class SupermarketDrink(Drink):
    brand = ""
    price = None              # price per unit of packaging
    packaging = ""
    section = ""              # section in Supermarket
    discount_percent = None   # if 0, it means no discount
    
    def __init__(self, dname, sweet, alcoholic, calories, brand, price, pack, sect, discPer):
        Drink.__init__(self, dname, sweet, alcoholic, calories)
        self.brand = brand
        self.price = price
        self.packaging = pack
        self.section = sect
        self.discount_percent = discPer
        
    def display(self):
        print(f"\nSection: {self.section}")
        print(f"Product: {self.brand} {self.drink_name}, {self.packaging}")
        priceDollar = "{:.2f}".format(self.price * (100 - self.discount_percent) / 100)
        dp = self.discount_percent
        print(f"Now at ${priceDollar}, {'lowest price' if dp == 0 else 'at ' + str(dp) + '% discount'}!")
        sw = "Sweetened" if self.sweet_or_not else "Non-sweetened"
        alc = "contains alcohol" if self.alcoholic else "non-alcoholic"
        print(f"Note: {sw}, {alc}.")
        print(f"Nutritional info: {self.calories_12_oz} calories per 12 ounce.")
        

cranberry_lakewood = \
SupermarketDrink("Organic Pure Cranberry Juice", False, False, 205, \
                 "Lakewood", 12.50, "34-Oz Bottle", "Health Foods Section", 15)
print("\nSupermarket Drink 1, cranberry_lakewood:", cranberry_lakewood)
cranberry_lakewood.display()

soy_nutrisoy = \
SupermarketDrink("Classic Soya Milk", True, False, 172, \
                 "NutriSoy", 2.20, "34-Oz Box", "Refrigerated Drinks Section", 0)
print("\nSupermarket Drink 2, soy_nutrisoy:", soy_nutrisoy)
soy_nutrisoy.display()
_____________________________________
## Outcome of running codes:

Vending Machine Drink 1, coke_classic: <__main__.VendingMachineDrink object at 0x00000253C0AB2CD0>

Available at our network of vending machines: Coca-Cola (Classic Coke Soda), 8-Oz Can
$1.20 / unit, accepts coins, $2 and $5 notes, and bus fare card scan.
Info: Sweetened, non-alcoholic.
Calories per 12 ounce: 140, please enjoy in moderation.
Please recycle the can or bottle.

Vending Machine Drink 2, sports_drink_gatorade: <__main__.VendingMachineDrink object at 0x00000253C0AB2220>

Available at our network of vending machines: Gatorade (Sports Drink Isotonic), 12-Oz Bottle
$1.50 / unit, accepts coins, $2 and $5 notes, and bus fare card scan.
Info: Sweetened, non-alcoholic.
Calories per 12 ounce: 94, please enjoy in moderation.
Please keep our environment clean, dispose of used containers properly.

Supermarket Drink 1, cranberry_lakewood: <__main__.SupermarketDrink object at 0x00000253C0AB2310>

Section: Health Foods Section
Product: Lakewood Organic Pure Cranberry Juice, 34-Oz Bottle
Now at $10.62, at 15% discount!
Note: Non-sweetened, non-alcoholic.
Nutritional info: 205 calories per 12 ounce.


Supermarket Drink 2, soy_nutrisoy: <__main__.SupermarketDrink object at 0x00000253C09C9370>

Section: Refrigerated Drinks Section
Product: NutriSoy Classic Soya Milk, 34-Oz Box
Now at $2.20, lowest price!
Note: Sweetened, non-alcoholic.
Nutritional info: 172 calories per 12 ounce.
_____________________________________



### Activity 4
Using the three inherited classes you have already created, use the __init__ method 
of the Noun class to set the values of the original attributes defined in the Noun class.
Create two objects for each of the three inherited classes and display all attributes,
including attributes from the original Noun class.

## Answer:
_____________________________________
## NOTE: Not sure what the question wants and how to achieve what the question says,
##       here's a probably incorrect attempt:

cappuccino = CafeDrink("Cappuccino", True, False, 123, None, None, None)

cappuccino.price_medium = 5.70
cappuccino.cafe_name = "The Coffee Bean & Tea Leaf"
cappuccino.member_discount = True

print("Cafe Drink Sample 1, cappuccino:", cappuccino)
cappuccino.display()
_____________________________________
## Outcome of running codes:

Cafe Drink Sample 1, cappuccino: <__main__.CafeDrink object at 0x00000253C09D3760>

Check out Cappuccino, available at The Coffee Bean & Tea Leaf.
It is sweetened and non-alcoholic.
Each serving of 12 ounces contains 123 calories, your cup size may vary.
Medium cup at $5.70, member discount available!
_____________________________________



### Activity 5
Create a class that inherits from your initial inherited class.
Include at least one attribute specific to this class.
Create two objects based on this class and display all attributes for each object.
As an example from the lesson, we started with an Animal class and then created a 
Mammal class that inherits from Animal. We could have also created additional classes 
that inherit from Mammal, such as Dog and Cat, which would have their own class-specific attributes.

## Answer:
_____________________________________
class PackedDrink(SupermarketDrink):
    bundle_packing = ""          # e.g. Pack of 12
    # price is now referring to the bundle price, not single can.
    
    def __init__(self, dname, sweet, alcoholic, calories, brand, price, pack, sect, discPer, bunPack):
        SupermarketDrink.__init__(self, dname, sweet, alcoholic, calories, brand, price, pack, sect, discPer)
        self.bundle_packing = bunPack
        
    def display(self):
        print(f"\nSection: {self.section}")
        print(f"Product: {self.brand} {self.drink_name}, {self.packaging}")
        print(f"Special Bundle: {self.bundle_packing}")
        priceDollar = "{:.2f}".format(self.price * (100 - self.discount_percent) / 100)
        dp = self.discount_percent
        print(f"Now at Bundle Price ${priceDollar}, {'lowest price' if dp == 0 else 'at ' + str(dp) + '% discount'}!")
        sw = "Sweetened" if self.sweet_or_not else "Non-sweetened"
        alc = "contains alcohol" if self.alcoholic else "non-alcoholic"
        print(f"Note: {sw}, {alc}.")
        print(f"Nutritional info: {self.calories_12_oz} calories per 12 ounce.")

# Create objects:
coke_diet_bundle = \
PackedDrink("Diet Coke Soda", True, False, 7, "Coca-Cola", \
            14.00, "8-Oz Can", "Cased and Bundled Drinks Section", 10, "Pack of 12")
print("\nPacked Drink 1, coke_diet_bundle:", coke_diet_bundle)
coke_diet_bundle.display()

chrysanthemum_he_bundle = \
PackedDrink("Chrysanthemum Tea", True, False, 133, "Heaven & Earth", \
           19.20, "8-Oz Box", "Cased and Bundled Drinks Section", 5, "Pack of 16")
print("\nPacked Drink 2, chrysanthemum_he_bundle:", chrysanthemum_he_bundle)
chrysanthemum_he_bundle.display()
_____________________________________
## Outcome of running codes:

Packed Drink 1, coke_diet_bundle: <__main__.PackedDrink object at 0x00000253C09BAEB0>

Section: Cased and Bundled Drinks Section
Product: Coca-Cola Diet Coke Soda, 8-Oz Can
Special Bundle: Pack of 12
Now at Bundle Price $12.60, at 10% discount!
Note: Sweetened, non-alcoholic.
Nutritional info: 7 calories per 12 ounce.

Packed Drink 2, chrysanthemum_he_bundle: <__main__.PackedDrink object at 0x00000253C0914E20>

Section: Cased and Bundled Drinks Section
Product: Heaven & Earth Chrysanthemum Tea, 8-Oz Box
Special Bundle: Pack of 16
Now at Bundle Price $18.24, at 5% discount!
Note: Sweetened, non-alcoholic.
Nutritional info: 133 calories per 12 ounce.
_____________________________________



### Activity 6
Create another class that inherits from the class created for the previous activity.
For the new class, create at least one class-specific attribute and one object based on the class.
Use isinstance() to verify that the new object is an instance of each of the parent classes of the new class.

## Answer:
_____________________________________
class OnlineDrink(PackedDrink):
    online_platform = ""       # Platform at which product is sold online
    delivery_charge = None
    
    def __init__(self, dname, sweet, alcoholic, calories, \
                 brand, price, pack, sect, discPer, bunPack, platform, deliCharge):
        PackedDrink.__init__(self, dname, sweet, alcoholic, calories, \
                 brand, price, pack, sect, discPer, bunPack)
        self.online_platform = platform
        self.delivery_charge = deliCharge
        
    def display(self):
        print(f"\nAvailable online: {self.online_platform}")
        print(f"Product: {self.brand} {self.drink_name}, {self.packaging}")
        print(f"Special Bundle: {self.bundle_packing}")
        priceDollar = "{:.2f}".format(self.price * (100 - self.discount_percent) / 100)
        dp = self.discount_percent
        print(f"Now at Bundle Price ${priceDollar}, {'lowest price' if dp == 0 else 'at ' + str(dp) + '% discount'}!")
        print(f"Delivery charge: ${'{:.2f}'.format(self.delivery_charge)}")
        sw = "Sweetened" if self.sweet_or_not else "Non-sweetened"
        alc = "contains alcohol" if self.alcoholic else "non-alcoholic"
        print(f"Note: {sw}, {alc}.")
        print(f"Nutritional info: {self.calories_12_oz} calories per 12 ounce.")
        print(f"Also available at brick-and-mortar store: Awesome Supermarket, {self.section}")
        

tomato_gh_bundle_online = \
OnlineDrink("Tomato Juice", False, False, 80, "Good Health", 12.00, "8-Oz Bottle",\
            "Health Foods Section", 5, "Pack of 6", "amazon.com.sg", 2.30)
print("\nOnline Drink 1, tomato_gh_bundle_online:", tomato_gh_bundle_online)
tomato_gh_bundle_online.display()

# Check for inheritance:
print("\nInheritance Check:")
print("\nIs tomato_gh_bundle_online an instance of the class OnlineDrink?", \
      isinstance(tomato_gh_bundle_online, OnlineDrink))
print("\nIs tomato_gh_bundle_online an instance of the class PackedDrink?", \
      isinstance(tomato_gh_bundle_online, PackedDrink))
print("\nIs tomato_gh_bundle_online an instance of the class SupermarketDrink?", \
      isinstance(tomato_gh_bundle_online, SupermarketDrink))
print("\nIs tomato_gh_bundle_online an instance of the class Drink?", \
      isinstance(tomato_gh_bundle_online, Drink))
_____________________________________
## Outcome of running codes:

Online Drink 1, tomato_gh_bundle_online: <__main__.OnlineDrink object at 0x00000253C09142B0>

Available online: amazon.com.sg
Product: Good Health Tomato Juice, 8-Oz Bottle
Special Bundle: Pack of 6
Now at Bundle Price $11.40, at 5% discount!
Delivery charge: $2.30
Note: Non-sweetened, non-alcoholic.
Nutritional info: 80 calories per 12 ounce.
Also available at brick-and-mortar store: Awesome Supermarket, Health Foods Section

Inheritance Check:

Is tomato_gh_bundle_online an instance of the class OnlineDrink? True

Is tomato_gh_bundle_online an instance of the class PackedDrink? True

Is tomato_gh_bundle_online an instance of the class SupermarketDrink? True

Is tomato_gh_bundle_online an instance of the class Drink? True
_____________________________________




#### Inheritance Self-Assessment: File System

For this assessment, you will use Python to model a computer's file system.
1. Create a class called FileItem that represents any file in an operating system.
    - Research and identify attributes that are common to all files in an OS, 
      such as permissions, owner, size, and so on.
2. Create a class called CsvFile that inherits from FileItem and that represents a CSV file in an operating system.
    - Include attributes that are specific to a CSV file.
3. Create a class JpgFile that inherits from FileItem and that represents a JPG file in an operating system.
    - Include attributes that are specific to a JPG file.
4. Create a class Mp3File that inherits from FileItem and that represents an MP3 file in an operating system.
    - Include attributes that are specific to an MP3 file.

## Answer Part 1: Create a class called FileItem
_____________________________________
## Part 1: create class FileItem:

class FileItem:
    file_name = ""
    item_type = ""        # refers to file type, e.g. .jpg
    directory_path = ""
    date_created = ""     # Assuming the format of YYYY-MM-DD HH:MM
    date_modified = ""    # Assuming the format of YYYY-MM-DD HH:MM
    size = None           # float, assuming no unit conversion needed
    size_unit = ""        # assuming only use KB and MB for now, without conversion
    owner = ""
    computer = ""
    permission = ""       # using Linux syntax of -rwxrwxrwx, though the OS looks more Windows-like
    password = ""
    
    def __init__(self, fname, itype, path, created, modified, size, unit, owner, computer, permission, password):
        self.file_name = fname
        self.item_type = itype.lower()
        self.directory_path = path
        self.date_created = created
        self.date_modified = modified
        self.size = size
        self.size_unit = unit
        self.owner = owner
        self.computer = computer
        self.permission = permission
        self.permission = password
        
    def display_full_name(self, breakLine):
        if breakLine == True:
            print(f"{self.file_name}.{self.item_type.lower()}")
        else:
            print(f"{self.file_name}.{self.item_type.lower()}", end = "")
        
    def display_full_size(self, breakLine):
        if breakLine == True:
            print(f"{self.size} {self.size_unit}")
        else:
            print(f"{self.size} {self.size_unit}", end = "")
        
    def display_short_summary(self):
        self.display_full_name(False)
        print("\t\t", end = "")
        self.display_full_size(False)
        print("\t\t", end = "")
        print(f"Modified {self.date_modified}", end = "")
        
    def display_attributes(self):
        print(f"File Name:\t\t", end = "")
        self.display_full_name(True)
        print(f"Item Type:\t\t{self.item_type.upper()}")
        print(f"Directory Path:\t\t{self.directory_path}", )
        print(f"Date Created:\t\t{self.date_created}")
        print(f"Date Modified:\t\t{self.date_modified}")
        print(f"Size:         \t\t", end = "")
        self.display_full_size(True)
        print(f"Owner:        \t\t{self.owner}")
        print(f"Computer:\t\t{self.computer}")
        
        
    # the permission setting can only be viewed and edited with password input.
    def security(self, inputPassword):
        while inputPassword != self.password:
            print("\nPassword incorrect.")
        else:
            print("\nThis is the permission setting: ", self.permission)
            change = input("Change permission setting? y/n: >>>> ")
            if change == "y":
                newPermission = input("Input new permission in the form of '-rwxrwxrwx': >>>> ")
                self.permission = newPermission
            print("Quitting security settings now.")
 
print(FileItem)

# Test create a PDF file:

reading01pdf = \
FileItem("Reading 01", "PDF", "C:\\Users\\Carl\\Documents", "2022-08-12 01:02", "2022-08-12 01:07", \
         510, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "")
print("\nCreated a PDF file, and displaying its attributes:\n")
reading01pdf.display_attributes()
_____________________________________
## Outcome of running codes Part 1: Create a class called FileItem

<class '__main__.FileItem'>

Created a PDF file, and displaying its attributes:

File Name:		Reading 01.pdf
Item Type:		PDF
Directory Path:		C:\Users\Carl\Documents
Date Created:		2022-08-12 01:02
Date Modified:		2022-08-12 01:07
Size:         		510 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)
_____________________________________
## Answer Part 2: Create a class called CsvFile
_____________________________________
## Part 2: Create a class called CsvFile

class CsvFile(FileItem):
    # list of software that the file type is compatible with
    compatible = []
    # integer index for the compatible software element that opens this CSV file by default
    default_open = None
    
    def __init__(self, fname, itype, path, created, modified, size, unit, \
                 owner, computer, permission, password, compatible, default):
        FileItem.__init__(self, fname, itype, path, created, modified, size, unit, \
                          owner, computer, permission, password)
        self.compatible = compatible
        self.default_open = default
        
    def display_attributes(self):
        super().display_attributes()
        print("Compatible Software:")
        for i in range(len(self.compatible)):
            print(f"\t\t\t\t{self.compatible[i]}")
        print(f"Default Software to Open File:\t{self.compatible[self.default_open]}")
        # show if file is password-protected:
        if self.password != "":
            print("This file is password-protected.")
        

# We shall temporarily initialize the 6 CSV files to temporary directory paths at Documents,
# which can be changed later with directory-related class.

compatibleSoftwares = ["Microsoft Excel", "Google Sheets", "MySQL"]

research01csv = \
CsvFile("Research 01", "CSV", "C:\\Users\\Carl\\Documents", "2022-08-12 02:02", "2022-08-12 02:17", \
         231, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxr--r--", "Password123", \
       compatibleSoftwares, 0)
print("\nCreated a CSV file, and displaying its attributes:\n")
research01csv.display_attributes()

research02csv = \
CsvFile("Research 02", "CSV", "C:\\Users\\Carl\\Documents", "2022-08-12 02:12", "2022-08-12 02:27", \
         231.6, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxr--r--", "Password123", \
       compatibleSoftwares, 1)
print("\nCreated a CSV file, and displaying its attributes:\n")
research02csv.display_attributes()

research03csv = \
CsvFile("Research 03", "CSV", "C:\\Users\\Carl\\Documents", "2022-08-12 02:23", "2022-08-12 02:38", \
         185.7, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxr--r--", "Password123", \
       compatibleSoftwares, 0)
print("\nCreated a CSV file, and displaying its attributes:\n")
research03csv.display_attributes()

research04csv = \
CsvFile("Research 04", "CSV", "C:\\Users\\Carl\\Documents", "2022-08-12 02:34", "2022-08-12 02:49", \
         207.4, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxr--r--", "Password123", \
       compatibleSoftwares, 2)
print("\nCreated a CSV file, and displaying its attributes:\n")
research04csv.display_attributes()

research05csv = \
CsvFile("Research 05", "CSV", "C:\\Users\\Carl\\Documents", "2022-08-12 02:45", "2022-08-12 03:04", \
         218.3, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxr--r--", "Password123", \
       compatibleSoftwares, 0)
print("\nCreated a CSV file, and displaying its attributes:\n")
research05csv.display_attributes()

research06csv = \
CsvFile("Research 05", "CSV", "C:\\Users\\Carl\\Documents", "2022-08-12 02:58", "2022-08-12 03:19", \
         196.2, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxr--r--", "Password123", \
       compatibleSoftwares, 2)
print("\nCreated a CSV file, and displaying its attributes:\n")
research05csv.display_attributes()
_____________________________________
## Outcome of running codes Part 2: Create a class called CsvFile


Created a CSV file, and displaying its attributes:

File Name:		Research 01.csv
Item Type:		CSV
Directory Path:		C:\Users\Carl\Documents
Date Created:		2022-08-12 02:02
Date Modified:		2022-08-12 02:17
Size:         		231 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)
Compatible Software:
				Microsoft Excel
				Google Sheets
				MySQL
Default Software to Open File:	Microsoft Excel
This file is password-protected.

Created a CSV file, and displaying its attributes:

File Name:		Research 02.csv
Item Type:		CSV
Directory Path:		C:\Users\Carl\Documents
Date Created:		2022-08-12 02:12
Date Modified:		2022-08-12 02:27
Size:         		231.6 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)
Compatible Software:
				Microsoft Excel
				Google Sheets
				MySQL
Default Software to Open File:	Google Sheets
This file is password-protected.

Created a CSV file, and displaying its attributes:

File Name:		Research 03.csv
Item Type:		CSV
Directory Path:		C:\Users\Carl\Documents
Date Created:		2022-08-12 02:23
Date Modified:		2022-08-12 02:38
Size:         		185.7 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)
Compatible Software:
				Microsoft Excel
				Google Sheets
				MySQL
Default Software to Open File:	Microsoft Excel
This file is password-protected.

Created a CSV file, and displaying its attributes:

File Name:		Research 04.csv
Item Type:		CSV
Directory Path:		C:\Users\Carl\Documents
Date Created:		2022-08-12 02:34
Date Modified:		2022-08-12 02:49
Size:         		207.4 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)
Compatible Software:
				Microsoft Excel
				Google Sheets
				MySQL
Default Software to Open File:	MySQL
This file is password-protected.

Created a CSV file, and displaying its attributes:

File Name:		Research 05.csv
Item Type:		CSV
Directory Path:		C:\Users\Carl\Documents
Date Created:		2022-08-12 02:45
Date Modified:		2022-08-12 03:04
Size:         		218.3 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)
Compatible Software:
				Microsoft Excel
				Google Sheets
				MySQL
Default Software to Open File:	Microsoft Excel
This file is password-protected.

Created a CSV file, and displaying its attributes:

File Name:		Research 05.csv
Item Type:		CSV
Directory Path:		C:\Users\Carl\Documents
Date Created:		2022-08-12 02:45
Date Modified:		2022-08-12 03:04
Size:         		218.3 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)
Compatible Software:
				Microsoft Excel
				Google Sheets
				MySQL
Default Software to Open File:	Microsoft Excel
This file is password-protected.
_____________________________________
## Answer Part 3: Create a class called JpgFile
_____________________________________
## Part 3: Create a class called JpgFile

class JpgFile(FileItem):
    # Origin
    authors = ""
    date_taken = ""
    program_name = ""         # not applicable if it's screen capture, but can refer to camera driver
    # Image details
    image_id = ""
    width = None              # in pixel, integer
    height = None             # in pixel, integer
    horizontal_resolution = None    # in dpi, integer
    vertical_resolution = None      # in dpi, integer
    bit_depth = None                # integer representing no. of bits
    
    
    
    def __init__(self, fname, itype, path, created, modified, size, unit, \
                 owner, computer, permission, password, \
                 authors, taken, program, imageId, width, height, hoRes, veRes, bitDepth):
        FileItem.__init__(self, fname, itype, path, created, modified, size, unit, \
                          owner, computer, permission, password)
        # Allow flexibility in one of the parent attributes,
        # i.e. allowing either JPG or JPEG as input, in either case
        if itype.lower() == "jpg" or itype.lower() == "jpeg":
            self.item_type = "jpg"
            
        self.authors = authors
        self.date_taken = taken
        self.program_name = program
        self.image_id = imageId
        self.width = width
        self.height = height
        self.horizontal_resolution = hoRes
        self.vertical_resolution = veRes
        self.bit_depth = bitDepth
        
    def display_attributes(self):
        super().display_attributes()
        print("\nOrigin ----------")
        print(f"Authors:\t\t{self.authors}")
        print(f"Date Taken:\t\t{self.date_taken}")
        print(f"Program Name:\t\t{self.program_name}")
        print("\nImage ----------")
        print(f"Image ID:\t\t{self.image_id}")
        print(f"Dimensions:\t\t{self.width} x {self.height}")
        print(f"Width:\t\t{self.width}")
        print(f"Height:\t\t{self.height}")
        print(f"Horizontal Resolution:\t{self.horizontal_resolution}")
        print(f"Vertical Resolution:\t{self.vertical_resolution}")
        print(f"Bit Depth:\t\t{self.bit_depth}")
        

# We shall temporarily initialize the 8 JPG files to temporary directory paths at Pictures,
# which can be changed later with directory-related class. We might also change file name later.
    
picture01jpg = \
JpgFile("Picture 01", "JPG", "C:\\Users\\Carl\\Pictures", "2022-08-13 03:12", "2022-08-13 03:19", \
        178.2, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "", \
        "Carl", "2022-08-13 03:11", "Screenshot", "", 2082, 1310, 192, 192, 24)
print("\nCreated a JPG file picture01jpg, and displaying its attributes:\n")
picture01jpg.display_attributes()

picture02jpg = \
JpgFile("Picture 02", "jpg", "C:\\Users\\Carl\\Pictures", "2022-08-13 03:17", "2022-08-13 03:24", \
        183.1, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "", \
        "Carl", "2022-08-13 03:16", "Screenshot", "", 2082, 1310, 192, 192, 24)
print("\nCreated a JPG file picture02jpg, and displaying its attributes:\n")
picture02jpg.display_attributes()

picture03jpg = \
JpgFile("Picture 03", "JPEG", "C:\\Users\\Carl\\Pictures", "2022-08-13 03:22", "2022-08-13 03:29", \
        179.6, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "", \
        "Carl", "2022-08-13 03:21", "Screenshot", "", 2082, 1310, 192, 192, 24)
print("\nCreated a JPG file picture03jpg, and displaying its attributes:\n")
picture03jpg.display_attributes()

picture04jpg = \
JpgFile("Picture 04", "jpeg", "C:\\Users\\Carl\\Pictures", "2022-08-13 03:27", "2022-08-13 03:34", \
        179.6, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "", \
        "Carl", "2022-08-13 03:26", "Screenshot", "", 2082, 1310, 192, 192, 24)
print("\nCreated a JPG file picture04jpg, and displaying its attributes:\n")
picture04jpg.display_attributes()

picture05jpg = \
JpgFile("Picture 05", "jpeg", "C:\\Users\\Carl\\Pictures", "2022-07-23 08:27", "2022-07-23 08:34", \
        179.6, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "", \
        "Carl", "2022-07-23 08:26", "CANON 456.17.3", "", 5472, 3648, 350, 350, 24)
print("\nCreated a JPG file picture05jpg, and displaying its attributes:\n")
picture05jpg.display_attributes()

picture06jpg = \
JpgFile("Picture 06", "JPG", "C:\\Users\\Carl\\Pictures", "2022-07-23 08:12", "2022-07-23 08:19", \
        178.2, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "", \
        "Carl", "2022-07-23 08:11", "CANON 456.17.3", "", 5472, 3648, 350, 350, 24)
print("\nCreated a JPG file picture06jpg, and displaying its attributes:\n")
picture06jpg.display_attributes()

picture07jpg = \
JpgFile("Picture 07", "jpg", "C:\\Users\\Carl\\Pictures", "2022-07-23 08:17", "2022-07-23 08:24", \
        183.1, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "", \
        "Carl", "2022-07-23 08:16", "CANON 456.17.3", "", 5472, 3648, 350, 350, 24)
print("\nCreated a JPG file picture07jpg, and displaying its attributes:\n")
picture07jpg.display_attributes()

picture08jpg = \
JpgFile("Picture 08", "JPEG", "C:\\Users\\Carl\\Pictures", "2022-07-23 08:22", "2022-07-23 08:29", \
        179.6, "KB", "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "", \
        "Carl", "2022-07-23 08:21", "CANON 456.17.3", "", 5472, 3648, 350, 350, 24)
print("\nCreated a JPG file picture08jpg, and displaying its attributes:\n")
picture08jpg.display_attributes()

_____________________________________
## Outcome of running codes Part 3: Create a class called JpgFile

Created a JPG file picture01jpg, and displaying its attributes:

File Name:		Picture 01.jpg
Item Type:		JPG
Directory Path:		C:\Users\Carl\Pictures
Date Created:		2022-08-13 03:12
Date Modified:		2022-08-13 03:19
Size:         		178.2 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Origin ----------
Authors:		Carl
Date Taken:		2022-08-13 03:11
Program Name:		Screenshot

Image ----------
Image ID:		
Dimensions:		2082 x 1310
Width:		2082
Height:		1310
Horizontal Resolution:	192
Vertical Resolution:	192
Bit Depth:		24

Created a JPG file picture02jpg, and displaying its attributes:

File Name:		Picture 02.jpg
Item Type:		JPG
Directory Path:		C:\Users\Carl\Pictures
Date Created:		2022-08-13 03:17
Date Modified:		2022-08-13 03:24
Size:         		183.1 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Origin ----------
Authors:		Carl
Date Taken:		2022-08-13 03:16
Program Name:		Screenshot

Image ----------
Image ID:		
Dimensions:		2082 x 1310
Width:		2082
Height:		1310
Horizontal Resolution:	192
Vertical Resolution:	192
Bit Depth:		24

Created a JPG file picture03jpg, and displaying its attributes:

File Name:		Picture 03.jpg
Item Type:		JPG
Directory Path:		C:\Users\Carl\Pictures
Date Created:		2022-08-13 03:22
Date Modified:		2022-08-13 03:29
Size:         		179.6 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Origin ----------
Authors:		Carl
Date Taken:		2022-08-13 03:21
Program Name:		Screenshot

Image ----------
Image ID:		
Dimensions:		2082 x 1310
Width:		2082
Height:		1310
Horizontal Resolution:	192
Vertical Resolution:	192
Bit Depth:		24

Created a JPG file picture04jpg, and displaying its attributes:

File Name:		Picture 04.jpg
Item Type:		JPG
Directory Path:		C:\Users\Carl\Pictures
Date Created:		2022-08-13 03:27
Date Modified:		2022-08-13 03:34
Size:         		179.6 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Origin ----------
Authors:		Carl
Date Taken:		2022-08-13 03:26
Program Name:		Screenshot

Image ----------
Image ID:		
Dimensions:		2082 x 1310
Width:		2082
Height:		1310
Horizontal Resolution:	192
Vertical Resolution:	192
Bit Depth:		24

Created a JPG file picture05jpg, and displaying its attributes:

File Name:		Picture 05.jpg
Item Type:		JPG
Directory Path:		C:\Users\Carl\Pictures
Date Created:		2022-07-23 08:27
Date Modified:		2022-07-23 08:34
Size:         		179.6 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Origin ----------
Authors:		Carl
Date Taken:		2022-07-23 08:26
Program Name:		CANON 456.17.3

Image ----------
Image ID:		
Dimensions:		5472 x 3648
Width:		5472
Height:		3648
Horizontal Resolution:	350
Vertical Resolution:	350
Bit Depth:		24

Created a JPG file picture06jpg, and displaying its attributes:

File Name:		Picture 06.jpg
Item Type:		JPG
Directory Path:		C:\Users\Carl\Pictures
Date Created:		2022-07-23 08:12
Date Modified:		2022-07-23 08:19
Size:         		178.2 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Origin ----------
Authors:		Carl
Date Taken:		2022-07-23 08:11
Program Name:		CANON 456.17.3

Image ----------
Image ID:		
Dimensions:		5472 x 3648
Width:		5472
Height:		3648
Horizontal Resolution:	350
Vertical Resolution:	350
Bit Depth:		24

Created a JPG file picture07jpg, and displaying its attributes:

File Name:		Picture 07.jpg
Item Type:		JPG
Directory Path:		C:\Users\Carl\Pictures
Date Created:		2022-07-23 08:17
Date Modified:		2022-07-23 08:24
Size:         		183.1 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Origin ----------
Authors:		Carl
Date Taken:		2022-07-23 08:16
Program Name:		CANON 456.17.3

Image ----------
Image ID:		
Dimensions:		5472 x 3648
Width:		5472
Height:		3648
Horizontal Resolution:	350
Vertical Resolution:	350
Bit Depth:		24

Created a JPG file picture08jpg, and displaying its attributes:

File Name:		Picture 08.jpg
Item Type:		JPG
Directory Path:		C:\Users\Carl\Pictures
Date Created:		2022-07-23 08:22
Date Modified:		2022-07-23 08:29
Size:         		179.6 KB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Origin ----------
Authors:		Carl
Date Taken:		2022-07-23 08:21
Program Name:		CANON 456.17.3

Image ----------
Image ID:		
Dimensions:		5472 x 3648
Width:		5472
Height:		3648
Horizontal Resolution:	350
Vertical Resolution:	350
Bit Depth:		24
_____________________________________
## Answer Part 4: Create a class called Mp3File
_____________________________________
## Part 4: Create a class called Mp3File

class Mp3File(FileItem):
    # Description
    title = ""
    rating = None   # integer, 1 - 5 stars
    # Media
    artists = ""
    album = ""
    year = None     # integer for year
    genre = ""
    length = ""     # format: HH:MM:SS for time length
    # Audio
    bit_rate = None # integer, in kbps
    # Origin
    publisher = ""
    copyright = ""
    
    def __init__(self, fname, itype, path, created, modified, size, unit, \
                 owner, computer, permission, password, \
                 title, rating, artists, album, year, genre, length, \
                 bitRate, publisher, copyright):
        FileItem.__init__(self, fname, itype, path, created, modified, size, unit, \
                 owner, computer, permission, password)
        self.title = title
        self.rating = rating
        self.artists = artists
        self.album = album
        self.year = year
        self.genre = genre
        self.length = length
        self.bit_rate = bitRate
        self.publisher = publisher
        self.copyright = copyright
        
    def display_rating(self):
        i = self.rating
        if i > 5:
            print(5 * "* ")
        else:
            print(i * "* ")
            
    def display_attributes(self):
        super().display_attributes()
        print("\nDescription ----------")
        print(f"Title:\t\t{self.title}")
        print(f"Rating:\t\t", end="")
        self.display_rating()
        print("\nMedia ----------")
        print(f"Artists:\t\t{self.artists}")
        print(f"Album:\t\t{self.album}")
        print(f"Year:\t\t{self.year}")
        print(f"Genre:\t\t{self.genre}")
        print(f"Length:\t\t{self.length}")
        print("\nAudio ----------")
        print(f"Bit Rate:\t\t{self.bit_rate} kbps")
        print("\nOrigin ----------")
        print(f"Publisher:\t\t{self.publisher}")
        print(f"Copyright:\t\t{self.copyright}")
        
        
# Creating objects:

song01mp3 = \
Mp3File("Song 01", "MP3", "C:\\Users\\Carl\\Music", "2021-06-12 09:17", "2021-06-12 09:17", 3.8, "MB", \
        "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "", \
        "Happy Times", 4, "Alice Wood", "Camping Songs - the Must-Have Collection", 1997, "Country", \
        "00:03:48", 128, "Pacific Music", "NA")
print("\nCreated an MP3 file item song01mp3, and displaying its attributes:\n")        
song01mp3.display_attributes()    

song02mp3 = \
Mp3File("Song 02", "MP3", "C:\\Users\\Carl\\Music", "2021-06-12 09:18", "2021-06-12 09:18", 3.9, "MB", \
        "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "", \
        "Bon Fire", 3, "Bob Hill", "Camping Songs - the Must-Have Collection", 1997, "Rock", \
        "00:03:54", 128, "Pacific Music", "NA")
print("\nCreated an MP3 file item song02mp3, and displaying its attributes:\n")        
song02mp3.display_attributes() 

song03mp3 = \
Mp3File("Song 03", "MP3", "C:\\Users\\Carl\\Music", "2021-06-12 09:18", "2021-06-12 09:18", 4.1, "MB", \
        "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "", \
        "Memories in the Hill", 5, "Cindy Green", "Camping Songs - the Must-Have Collection", 1997, "Country", \
        "00:04:06", 128, "Pacific Music", "NA")
print("\nCreated an MP3 file item song03mp3, and displaying its attributes:\n")        
song03mp3.display_attributes() 

song04mp3 = \
Mp3File("Song 04", "MP3", "C:\\Users\\Carl\\Music", "2021-06-12 09:18", "2021-06-12 09:18", 4.2, "MB", \
        "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "", \
        "Memories in the Hill", 5, "Dan Creek", "Camping Songs - the Must-Have Collection", 1997, "Jazz", \
        "00:04:12", 128, "Pacific Music", "NA")
print("\nCreated an MP3 file item song04mp3, and displaying its attributes:\n")        
song04mp3.display_attributes() 

song05mp3 = \
Mp3File("Song 05", "MP3", "C:\\Users\\Carl\\Music", "2021-06-12 09:18", "2021-06-12 09:18", 3.7, "MB", \
        "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "", \
        "Butterflies", 3, "Ellen Stone", "Camping Songs - the Must-Have Collection", 1997, "Country", \
        "00:03:42", 128, "Pacific Music", "NA")
print("\nCreated an MP3 file item song05mp3, and displaying its attributes:\n")        
song05mp3.display_attributes() 

researchInterview01mp3 = \
Mp3File("Research Interview 01", "MP3", "C:\\Users\\Carl\\Documents", "2022-07-29 14:25", "2022-07-29 14:25", 131.5, "MB", \
        "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxr--r--", "Password123", \
        "", 0, "", "", None, "", \
        "02:11:03", 128, "", "")
print("\nCreated an MP3 file item researchInterview01mp3, and displaying its attributes:\n")        
researchInterview01mp3.display_attributes() 

researchInterview02mp3 = \
Mp3File("Research Interview 02", "MP3", "C:\\Users\\Carl\\Documents", "2022-07-30 15:45", "2022-07-30 15:45", 140.2, "MB", \
        "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxr--r--", "Password123", \
        "", 0, "", "", None, "", \
        "02:20:12", 128, "", "")
print("\nCreated an MP3 file item researchInterview02mp3, and displaying its attributes:\n")        
researchInterview02mp3.display_attributes() 
    
researchInterview03mp3 = \
Mp3File("Research Interview 03", "MP3", "C:\\Users\\Carl\\Documents", "2022-07-31 13:06", "2022-07-31 13:06", 90.7, "MB", \
        "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxr--r--", "Password123", \
        "", 0, "", "", None, "", \
        "01:30:42", 128, "", "")
print("\nCreated an MP3 file item researchInterview03mp3, and displaying its attributes:\n")        
researchInterview03mp3.display_attributes() 

researchInterview04mp3 = \
Mp3File("Research Interview 04", "MP3", "C:\\Users\\Carl\\Documents", "2022-07-31 15:31", "2022-07-31 15:31", 65.8, "MB", \
        "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxr--r--", "Password123", \
        "", 0, "", "", None, "", \
        "01:05:48", 128, "", "")
print("\nCreated an MP3 file item researchInterview04mp3, and displaying its attributes:\n")        
researchInterview04mp3.display_attributes() 
_____________________________________
## Outcome of running codes Part 4: Create a class called Mp3File


Created an MP3 file item song01mp3, and displaying its attributes:

File Name:		Song 01.mp3
Item Type:		MP3
Directory Path:		C:\Users\Carl\Music
Date Created:		2021-06-12 09:17
Date Modified:		2021-06-12 09:17
Size:         		3.8 MB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Description ----------
Title:		Happy Times
Rating:		* * * * 

Media ----------
Artists:		Alice Wood
Album:		Camping Songs - the Must-Have Collection
Year:		1997
Genre:		Country
Length:		00:03:48

Audio ----------
Bit Rate:		128 kbps

Origin ----------
Publisher:		Pacific Music
Copyright:		NA

Created an MP3 file item song02mp3, and displaying its attributes:

File Name:		Song 02.mp3
Item Type:		MP3
Directory Path:		C:\Users\Carl\Music
Date Created:		2021-06-12 09:18
Date Modified:		2021-06-12 09:18
Size:         		3.9 MB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Description ----------
Title:		Bon Fire
Rating:		* * * 

Media ----------
Artists:		Bob Hill
Album:		Camping Songs - the Must-Have Collection
Year:		1997
Genre:		Rock
Length:		00:03:54

Audio ----------
Bit Rate:		128 kbps

Origin ----------
Publisher:		Pacific Music
Copyright:		NA

Created an MP3 file item song03mp3, and displaying its attributes:

File Name:		Song 03.mp3
Item Type:		MP3
Directory Path:		C:\Users\Carl\Music
Date Created:		2021-06-12 09:18
Date Modified:		2021-06-12 09:18
Size:         		4.1 MB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Description ----------
Title:		Memories in the Hill
Rating:		* * * * * 

Media ----------
Artists:		Cindy Green
Album:		Camping Songs - the Must-Have Collection
Year:		1997
Genre:		Country
Length:		00:04:06

Audio ----------
Bit Rate:		128 kbps

Origin ----------
Publisher:		Pacific Music
Copyright:		NA

Created an MP3 file item song04mp3, and displaying its attributes:

File Name:		Song 04.mp3
Item Type:		MP3
Directory Path:		C:\Users\Carl\Music
Date Created:		2021-06-12 09:18
Date Modified:		2021-06-12 09:18
Size:         		4.2 MB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Description ----------
Title:		Memories in the Hill
Rating:		* * * * * 

Media ----------
Artists:		Dan Creek
Album:		Camping Songs - the Must-Have Collection
Year:		1997
Genre:		Jazz
Length:		00:04:12

Audio ----------
Bit Rate:		128 kbps

Origin ----------
Publisher:		Pacific Music
Copyright:		NA

Created an MP3 file item song05mp3, and displaying its attributes:

File Name:		Song 05.mp3
Item Type:		MP3
Directory Path:		C:\Users\Carl\Music
Date Created:		2021-06-12 09:18
Date Modified:		2021-06-12 09:18
Size:         		3.7 MB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Description ----------
Title:		Butterflies
Rating:		* * * 

Media ----------
Artists:		Ellen Stone
Album:		Camping Songs - the Must-Have Collection
Year:		1997
Genre:		Country
Length:		00:03:42

Audio ----------
Bit Rate:		128 kbps

Origin ----------
Publisher:		Pacific Music
Copyright:		NA

Created an MP3 file item researchInterview01mp3, and displaying its attributes:

File Name:		Research Interview 01.mp3
Item Type:		MP3
Directory Path:		C:\Users\Carl\Documents
Date Created:		2022-07-29 14:25
Date Modified:		2022-07-29 14:25
Size:         		131.5 MB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Description ----------
Title:		
Rating:		

Media ----------
Artists:		
Album:		
Year:		None
Genre:		
Length:		02:11:03

Audio ----------
Bit Rate:		128 kbps

Origin ----------
Publisher:		
Copyright:		

Created an MP3 file item researchInterview02mp3, and displaying its attributes:

File Name:		Research Interview 02.mp3
Item Type:		MP3
Directory Path:		C:\Users\Carl\Documents
Date Created:		2022-07-30 15:45
Date Modified:		2022-07-30 15:45
Size:         		140.2 MB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Description ----------
Title:		
Rating:		

Media ----------
Artists:		
Album:		
Year:		None
Genre:		
Length:		02:20:12

Audio ----------
Bit Rate:		128 kbps

Origin ----------
Publisher:		
Copyright:		

Created an MP3 file item researchInterview03mp3, and displaying its attributes:

File Name:		Research Interview 03.mp3
Item Type:		MP3
Directory Path:		C:\Users\Carl\Documents
Date Created:		2022-07-31 13:06
Date Modified:		2022-07-31 13:06
Size:         		90.7 MB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Description ----------
Title:		
Rating:		

Media ----------
Artists:		
Album:		
Year:		None
Genre:		
Length:		01:30:42

Audio ----------
Bit Rate:		128 kbps

Origin ----------
Publisher:		
Copyright:		

Created an MP3 file item researchInterview04mp3, and displaying its attributes:

File Name:		Research Interview 04.mp3
Item Type:		MP3
Directory Path:		C:\Users\Carl\Documents
Date Created:		2022-07-31 15:31
Date Modified:		2022-07-31 15:31
Size:         		65.8 MB
Owner:        		DESKTOP-TZBC123\Carl
Computer:		DESKTOP-TZBC123 (This PC)

Description ----------
Title:		
Rating:		

Media ----------
Artists:		
Album:		
Year:		None
Genre:		
Length:		01:05:48

Audio ----------
Bit Rate:		128 kbps

Origin ----------
Publisher:		
Copyright:

_____________________________________



### Challenge
Create a class Directory that inherits from FileItem and that represents a directory in an operating system.
  - Create a filesystem with at least 20 objects
  - Include at least three objects of each type (CsvFile, JpgFile, Mp3File, and Directory)
  - Include a directory structure with a depth of at least three (directory in a directory in a directory)
  - Include at least one directory that contains at least two other directories and at least two files.

## Answer Part 1: Create the class Directory
_____________________________________
# Create a class Directory

class Directory(FileItem):
    directory_list = []            # Isolating directories and different items within a directory
    file_list = []                 # Keeping a list of files in the directory
    
    
    # Assuming the item_type for a directory is a file item type called ".dir"
    
    def __init__(self, fname, itype, path, created, modified, size, unit, owner, \
                 computer, permission, password, dirList, fileList):
        FileItem.__init__(self, fname, itype, path, created, modified, size, unit, owner, \
                          computer, permission, password)
        self.directory_list = dirList
        self.file_list = fileList
 

    def add_to_dir(self, item):         # Adding any file item, either directory or file, to this directory
        item.directory_path = self.path + "\\" + self.file_name
        if item.item_type == "dir":
            self.directory_list.append(item)
        else:
            self.file_list.append(item)
            
        # sorting directories based on names
        # create dictionary of key:value of file_name:fileItem
        dirDict = {}
        dirLength = len(self.directory_list)
        sortedDirList = []
        for i in range(dirLength):
            dirDict[self.directory_list[i].file_name] = self.directory_list[i]
        for j in sorted(dirDict.keys()):
            sortedDirList.append(dirDict[j])
        self.directory_list = sortedDirList
        
        # sorting files based on names
        # create dictionary of key:value of file_name:fileItem
        fileDict = {}
        fileLength = len(self.file_list)
        sortedFileList = []
        for i in range(fileLength):
            fileDict[self.file_list[i].file_name] = self.file_list[i]
        for j in sorted(fileDict.keys()):
            sortedFileList.append(fileDict[j])
        self.file_list = sortedFileList
        
        
    def remove_from_dir(self, item):    # Removing any file item
        if item.item_type == "dir":
            self.directory_list.remove(item)
        else:
            self.file_list.remove(item)
            
            
    # Count directory depth of an item:
    def dir_depth(item):
        dirDepth = 0
        pathStr = item.directory_path
        for char in pathStr:
            if char == "\\":
                dirDepth += 1
        return dirDepth
        

    
    # Give full size of directories with its contents
    
    def dir_full_size(self):
        # sum over all file items, with KB or MB conversion:
        # do directories first, followed by files:
        
        totalSizeInKB = 0                # Total size in KB
        
        if self.directory_list == []:
            pass
        else:
            for item in self.directory_list:
                itemSize = item.size
                itemUnit = item.size_unit
                if itemUnit == "MB":
                    itemSize = 1024 * itemSize       # Conversion from MB to KB
                totalSizeInKB += itemSize
                
        if self.file_list == []:
            pass
        else:
            for item in self.file_list:
                itemSize = item.size
                itemUnit = item.size_unit
                if itemUnit == "MB":
                    itemSize = 1024 * itemSize       # Conversion from MB to KB
                totalSizeInKB += itemSize
        
        return totalSizeInKB
    
    
    def display_fill_directory_path(self):
        pathText = self.directory_path + '\\' + self.file_name
        print(f"Full Directory Path:    {pathText}")
            
    
            
    def display_attributes(self):
        print(f"Directory Name:\t\t", end = "")
        print(f"Item Type:\t\t{self.item_type.upper()}")
        print(f"Directory Path:\t\t{self.directory_path}", )
        print(f"Date Created:\t\t{self.date_created}")
        print(f"Date Modified:\t\t{self.date_modified}")
        print(f"Size:         \t\t{self.dir_full_size()}")
        print(f"Owner:        \t\t{self.owner}")
        print(f"Computer:\t\t{self.computer}")
        
        # Display if directory is password-protected
        if self.password != "":
            print("This directory is password-protected")
        
    
    def display_basic(self):           # Display basic contents in directory, without branching in trees.
        pathText = self.directory_path + "\\" + self.file_name
        print(f"\nDirectory: {pathText}")
        print(f"Size: {self.full_size()}    Date Modified: {self.date_modified}\n")
        print(f"    Item Name\t\t\tSize\t\tDate Modified")
        for item in self.directory_list:
            print(f"    {item.file_name}\t\t\t{item.size} {item.size_unit}\t\t{item.date_modified}")
        for item in self.file_list:
            print(f"    {item.file_name}\t\t\t{item.size} {item.size_unit}\t\t{item.date_modified}")
 

    def display_expand(self):         # Display the whole tree structure of the directory
        if self.directory_list != []:
            for folder in self.directory_list:
                folderDirNum = dir_depth(folder)
                folderSpace = folderDirNum * "    "
                print(f"{folderSpace}-- {folder.file_name} >")
                display_expand(folder)
        for file in self.file_list:
            fileDirNum = dir_depth(file)
            fileSpace = fileDirNum * "    "
            print(f"{fileSpace}-- {file.file_name}.{file.item_type.lower()}")
            


# Now test create the Home directory:

homeDir = \
Directory("Carl", "DIR", "C:\\Users", "2022-08-13 22:22", "2022-08-13 22:22", 1, "KB",\
           "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxr--r--", "Password123",\
           [], [])

print("\nHome Directory created:", homeDir)
homeDir.display_fill_directory_path()

# Create the Documents directory
        
documentsDir = \
Directory("Documents", "DIR", "C:\\Users\\Carl", "2022-08-13 22:32", "2022-08-13 22:32", 1, "KB",\
           "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxr--r--", "Password123",\
           [], [])

print("\nDocuments Directory created:", documentsDir)
documentsDir.display_fill_directory_path()        

# Create the Pictures directory
        
picturesDir = \
Directory("Pictures", "DIR", "C:\\Users\\Carl", "2022-08-13 22:42", "2022-08-13 22:42", 1, "KB",\
           "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "",\
           [], [])

print("\nPictures Directory created:", picturesDir)
picturesDir.display_fill_directory_path()     
                
# Create the Music directory
        
MusicDir = \
Directory("Music", "DIR", "C:\\Users\\Carl", "2022-08-13 22:52", "2022-08-13 22:52", 1, "KB",\
           "DESKTOP-TZBC123\\Carl", "DESKTOP-TZBC123 (This PC)", "-rwxrwxrwx", "",\
           [], [])

print("\nMusic Directory created:", MusicDir)
MusicDir.display_fill_directory_path()   
_____________________________________
## Outcome of running codes Part 1: Create the class Directory

Home Directory created: <__main__.Directory object at 0x00000253C0AF2070>
Full Directory Path:    C:\Users\Carl

Documents Directory created: <__main__.Directory object at 0x00000253C0AF2F70>
Full Directory Path:    C:\Users\Carl\Documents

Pictures Directory created: <__main__.Directory object at 0x00000253C0AF2610>
Full Directory Path:    C:\Users\Carl\Pictures

Music Directory created: <__main__.Directory object at 0x00000253C0AF2970>
Full Directory Path:    C:\Users\Carl\Music
_____________________________________
## Answer Part 2: Populate and manipulate directories
_____________________________________

_____________________________________
## Outcome of running codes Part 2: Populate and manipulate directories

_____________________________________










### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________




### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________
