Python - Class Exercises and Activities 2022-08-12

Carl Tang Yong Han


_______________________

#### Worksheet 2 - Classes and Objects

### Practice 1
Create a class Animal that could represent any animal.
Include at least two attributes within the new class.

## Answer:
_____________________________________
# your code here

class Animal:
    animal_name = ""
    number_of_legs = None
    category = ""
    have_visible_ears = None
    
print(Animal)
_____________________________________
## Outcome of running codes:

<class '__main__.Animal'>
_____________________________________



### Practice 2
Using the Animal class from the previous exercise, create three objects that represent animals.
Print out all attributes for each animal.

## Answer:
_____________________________________
# your code here

cat = Animal()
cat.animal_name = "Cat"
cat.number_of_legs = 4
cat.category = "mammal"
cat.have_visible_ears = True

gold_fish = Animal()
gold_fish.animal_name = "Gold Fish"
gold_fish.number_of_legs = 0
gold_fish.category = "fish"
gold_fish.have_visible_ears = False

python = Animal()
python.animal_name = "Python"
python.number_of_legs = 0
python.category = "reptile"
python.have_visible_ears = False

print("\nThese are attributes of:", cat.animal_name)
print("Number of legs:", cat.number_of_legs)
print("Category:", cat.category)
print("Have visible ears or not:", cat.have_visible_ears)

print("\nThese are attributes of:", gold_fish.animal_name)
print("Number of legs:", gold_fish.number_of_legs)
print("Category:", gold_fish.category)
print("Have visible ears or not:", gold_fish.have_visible_ears)

print("\nThese are attributes of:", python.animal_name)
print("Number of legs:", python.number_of_legs)
print("Category:", python.category)
print("Have visible ears or not:", python.have_visible_ears)
_____________________________________
## Outcome of running codes:

These are attributes of: Cat
Number of legs: 4
Category: mammal
Have visible ears or not: True

These are attributes of: Gold Fish
Number of legs: 0
Category: fish
Have visible ears or not: False

These are attributes of: Python
Number of legs: 0
Category: reptile
Have visible ears or not: False
_____________________________________



### Practice 3
Create an __init__ method for the Animal class.
Include at least three of the attributes you originally defined in the new method.

## Answer:
_____________________________________
# your code here

class Animal:
    animal_name = ""
    number_of_legs = None
    category = ""
    have_visible_ears = None
    
    def __init__(self, aname, numoflegs, category, havevisears):
        self.animal_name = aname
        self.number_of_legs = numoflegs
        self.category = category
        self.have_visible_ears = havevisears

# Try intantiate an animal object:
monkey = Animal("Monkey", 2, "mammal", True)

print(monkey)

print("\nThese are attributes of:", monkey.animal_name)
print("Number of legs:", monkey.number_of_legs)
print("Category:", monkey.category)
print("Have visible ears or not:", monkey.have_visible_ears)
_____________________________________
## Outcome of running codes:

<__main__.Animal object at 0x000001A4AEBD3D60>

These are attributes of: Monkey
Number of legs: 2
Category: mammal
Have visible ears or not: True
_____________________________________



### Practice 4
Create a display_info method for the Animal class.
Create three objects from the Animal class and display each object using the display_info method.

## Answer:
_____________________________________
# your code here

class Animal:
    animal_name = ""
    number_of_legs = None
    category = ""
    have_visible_ears = None
    
    def __init__(self, aname, numoflegs, category, havevisears):
        self.animal_name = aname
        self.number_of_legs = numoflegs
        self.category = category
        self.have_visible_ears = havevisears
        
    def display_info(self):
        print("\nThese are attributes of:", self.animal_name)
        print("Number of legs:", self.number_of_legs)
        print("Category:", self.category)
        print("Have visible ears or not:", self.have_visible_ears)     

        
# Try intantiate three animal object:
monkey = Animal("Monkey", 2, "mammal", True)
lizard = Animal("Lizard", 4, "reptile", False)
eagle = Animal("Eagle", 2, "bird", False)

monkey.display_info()
lizard.display_info()
eagle.display_info()
_____________________________________
## Outcome of running codes:

These are attributes of: Monkey
Number of legs: 2
Category: mammal
Have visible ears or not: True

These are attributes of: Lizard
Number of legs: 4
Category: reptile
Have visible ears or not: False

These are attributes of: Eagle
Number of legs: 2
Category: bird
Have visible ears or not: False
_____________________________________



### Practice 5a
The following code includes multiple errors. Find the errors and update the code as necessary.
Do not change any of the existing code above line 9.
The final output should read: Harry Potter and the Sorcerer's Stone by J. K. Rowling, published in 1997

## Answer:
_____________________________________
class Book:
    title = ""
    author = ""
    pub_date = ""
    def __init__ (book, ti, au, da):
        book.title = ti
        book.author = au
        book.pub_date = da
        
#Change only the code below this line
    def book_details(self):
        print (self.title + " by " + self.author + ", published in " + self.pub_date)
        
book_1 = Book("Harry Potter and the Sorcerer's Stone", "J. K. Rowling","1997")
book_1.book_details()
_____________________________________
## Outcome of running codes:

Harry Potter and the Sorcerer's Stone by J. K. Rowling, published in 1997
_____________________________________



### Practice 5b
Create and execute another meaningful method for the Animal class.
Make sure to pass the self object when executing the method.

## Answer:
_____________________________________
# your code here

class Animal:
    animal_name = ""
    number_of_legs = None
    category = ""
    have_visible_ears = None
    sound = ""
    
    def __init__(self, aname, numoflegs, category, havevisears, sound):
        self.animal_name = aname
        self.number_of_legs = numoflegs
        self.category = category
        self.have_visible_ears = havevisears
        self.sound = sound
        
    def display_info(self):
        print("\nThese are attributes of:", self.animal_name)
        print("Number of legs:", self.number_of_legs)
        print("Category:", self.category)
        print("Have visible ears or not:", self.have_visible_ears)     
        
    def signal_call(self, times):
        print(self.animal_name, "says: ")
        for i in range(times):
            print(self.sound, end=" ")
            print((i + 1) * "~", end="  ")
        print("\n")

wolf = Animal("Wolf", 4, "mammal", True, "Woooff")
wolf.signal_call(4)

salmon = Animal("Salmon", 0, "fish", False, "Blurb")
salmon.signal_call(5)
_____________________________________
## Outcome of running codes:

Wolf says: 
Woooff ~  Woooff ~~  Woooff ~~~  Woooff ~~~~  

Salmon says: 
Blurb ~  Blurb ~~  Blurb ~~~  Blurb ~~~~  Blurb ~~~~~  
_____________________________________



### Practice 6
Revise the following code so that the Person class includes a list of addresses rather than a single address.

## Answer:
_____________________________________
class Address:
    number = None
    street  = None
    city = None
    state = None
    zipcode = None
    def  __init__(self,num,st,cty,ste,zc):
        self.number = num
        self.street = st 
        self.city = cty
        self.state= ste
        self.zipcode  = zc
    def display(self):
        print(str(self.number) + " " + self.street + " " + self.city + " " + self.state + " " + self.zipcode)
        

class Person:
    fname = None
    lname = None
    addresses = None # addresses will hold a list  of addresses that belong to a person
    def __init__(self,fname,lname,addrs):
        self.fname = fname
        self.lname = lname
        self.addresses = addrs
    def display(self):
        # implement the display method to display  first name,  last name, 
        print(self.fname, self.lname)
        # then iterate through addresses and display each address in one line.
        for i in range(len(self.addresses)):
            self.addresses[i].display()        
        pass
    def add_address(self,addr):
        # implement
        self.addresses.append(addr)
        pass
     
class Account:
    ain = None 
    person = None 
    def __init__(self,ain,person):
        self.ain = ain
        self.person = person
    def display(self):
        print("Account Number: " + str(self.ain))
        print("Account Holder Information: ")
        self.person.display()

addr1 = Address(123,"Main Street","Asbury Park","NJ","07712")
addr2 = Address(12,"Rue Simon Bolivard","Paris","France","75019")
addresses = list()
addresses.append(addr1)
addresses.append(addr2)


p = Person("Haythem","Balti",addresses)
addr3 = Address(46,"Fourth Street","Louisville","KY","40208")

p.add_address(addr3)

# p.display()
a = Account("C1566X56576",p)
a.display()
_____________________________________
## Outcome of running codes:

Account Number: C1566X56576
Account Holder Information: 
Haythem Balti
123 Main Street Asbury Park NJ 07712
12 Rue Simon Bolivard Paris France 75019
46 Fourth Street Louisville KY 40208
_____________________________________




#### Activities: Classes and Objects


### Activity 1
The lesson uses Person and Animal as example classes. For this activity, choose another Noun of your choice
to create a class. It can be anything you wish, as long as it meets the following criteria:
 - Do not use people or animals.
 - The category must be broad enough to include different examples of the category.
 - It must represent a real-life object.
Include at least three attributes that are common to most (if not all) instances of the Noun. Use appropriate naming conventions.

## Answer:
_____________________________________
class Inventory:
    sku_no = ""          # SKU (stock-keeping unit) number as ID
    brand = ""           # such as Toshiba
    product_name = ""    # such as Awesome-112 Laptop
    price = None         # float
    disc_app = None      # boolean, to check if discount is applicable
    stock_avail = None   # int to keep track of stock available
    
    def __init__(self, sku, brand, pname, price, disc, stock):
        self.sku_no = sku
        self.brand = brand
        self.product_name = pname
        self.price = price
        self.disc_app = disc
        self.stock_avail = stock
        
    def display_attributes(self):
        print("\n")
        print("The SKU Code is:", self.sku_no)
        print("The brand is:", self.brand)
        print("The product name is:", self.product_name)
        print("The price is:", self.price)
        print("The discount applicability is:", self.disc_app)
        print("The unit(s) of stock available is:", self.stock_avail)
        
print(Inventory)

    
_____________________________________
## Outcome of running codes:

<class '__main__.Inventory'>
_____________________________________



### Activity 2
Use the Noun class you created in the previous activity to create at least four different objects.
Print out all attributes for each object.

## Answer:  ## Based on class methods already defined in Activity 1
_____________________________________
mouse_MOSDEL1234 = Inventory("MOS-DEL-1234", "Dell", "Wireless Mouse Model 1234", 15.50, False, 34)
mouse_MOSDEL1234.display_attributes()

keyb_KEBTOS3310 = Inventory("KEB-TOS-3310", "Toshiba", "Wireless Keyboard Model 3310", 27.80, True, 26)
keyb_KEBTOS3310.display_attributes()

thud_THDKST2688_128 = Inventory("THD-KST-2688", "Kingston", "Thumb Drive 128GB Model 2688", 58.80, True, 43)
thud_THDKST2688_128.display_attributes()

tabl_TABWAC4730 = Inventory("TAB-WAC-4730", "Wacom", "Drawing Tablet Model 4730", 670.70, True, 16)
tabl_TABWAC4730.display_attributes()
_____________________________________
## Outcome of running codes:


The SKU Code is: MOS-DEL-1234
The brand is: Dell
The product name is: Wireless Mouse Model 1234
The price is: 15.5
The discount applicability is: False
The unit(s) of stock available is: 34


The SKU Code is: KEB-TOS-3310
The brand is: Toshiba
The product name is: Wireless Keyboard Model 3310
The price is: 27.8
The discount applicability is: True
The unit(s) of stock available is: 26


The SKU Code is: THD-KST-2688
The brand is: Kingston
The product name is: Thumb Drive 128GB Model 2688
The price is: 58.8
The discount applicability is: True
The unit(s) of stock available is: 43


The SKU Code is: TAB-WAC-4730
The brand is: Wacom
The product name is: Drawing Tablet Model 4730
The price is: 670.7
The discount applicability is: True
The unit(s) of stock available is: 16
_____________________________________



### Activity 3
Create an __init__ method for your Noun class.
Include at least four of the attributes you originally defined in the new method.

## Answer:
_____________________________________
## NOTE: Already created in Activity 1 above.
_____________________________________
## Outcome of running codes:
## Refer to Activity 1 above.
_____________________________________



### Activity 4
Create a method for your Noun class. The method should perform a specific activity
(or series of activities) on objects based on the class.
Although this can be a simple display, you are encouraged to consider more complicated activities in the method.

## Answer Part 1: Update the initial class with added method
_____________________________________
class Inventory:
    sku_no = ""          # SKU (stock-keeping unit) number as ID
    brand = ""           # such as Toshiba
    product_name = ""    # such as Awesome-112 Laptop
    price = None         # float
    disc_app = None      # boolean, to check if discount is applicable
    stock_avail = None   # int to keep track of stock available
    
    def __init__(self, sku, brand, pname, price, disc, stock):
        self.sku_no = sku
        self.brand = brand
        self.product_name = pname
        self.price = price
        self.disc_app = disc
        self.stock_avail = stock
        
    def display_attributes(self):
        print("\n")
        print("The SKU Code is:", self.sku_no)
        print("The brand is:", self.brand)
        print("The product name is:", self.product_name)
        print("The price is:", self.price)
        print("The discount applicability is:", self.disc_app)
        print("The unit(s) of stock available is:", self.stock_avail)
        
    def display_promo(self, percent):  # Display a promo message based on percentage
        print("\nWelcome to Awesome Electronics!")
        print(f"{self.brand} {self.product_name}")
        originalDollar = "{:.2f}".format(self.price)
        if self.disc_app:
            # Discount message
            print(f"Now at {percent}% discount!!")
            discountedPrice = ((100 - percent) / 100) * self.price
            discountedDollar = "{:.2f}".format(discountedPrice)
            print(f"    ONLY ${discountedDollar} !!")
            print(f"Original Price: ${originalDollar} //")
            
            # Giving rough idea of stocks left to create urgency to buy
            left = self.stock_avail
            if left < 20:
                print("\nLess than 20 units left! Hurry!\n")
            elif left < 30:
                print("\nLess than 30 units left! What are you waiting for?\n")
            elif left < 50:
                print("\nLess than 50 units left! Get your promo code from our app!\n")
            
        else:
            print(f"Now at: ${originalDollar}")
            print("Download our app to check out our latest products and promotion!\n")
_____________________________________
## Answer Part 2: Use the updated class to run method. The class definition was run again,
                  and the objects creation as in Activity 2 was also run again before the
                  following codes are run:
_____________________________________
# No discount
mouse_MOSDEL1234.display_promo(0)

# 10% discount for relatively cheap items
keyb_KEBTOS3310.display_promo(10)
thud_THDKST2688_128.display_promo(10)

# 15% discount for big ticket purchase, clearing stock for new product release.
tabl_TABWAC4730.display_promo(15)
_____________________________________
## Outcome of running codes:


Welcome to Awesome Electronics!
Dell Wireless Mouse Model 1234
Now at: $15.50
Download our app to check out our latest products and promotion!


Welcome to Awesome Electronics!
Toshiba Wireless Keyboard Model 3310
Now at 10% discount!!
    ONLY $25.02 !!
Original Price: $27.80 //

Less than 30 units left! What are you waiting for?


Welcome to Awesome Electronics!
Kingston Thumb Drive 128GB Model 2688
Now at 10% discount!!
    ONLY $52.92 !!
Original Price: $58.80 //

Less than 50 units left! Get your promo code from our app!


Welcome to Awesome Electronics!
Wacom Drawing Tablet Model 4730
Now at 15% discount!!
    ONLY $570.10 !!
Original Price: $670.70 //

Less than 20 units left! Hurry!

_____________________________________



### Activity 5
Create a separate class that is logically related to your original Noun class,
based on the example that a Person can have one or more Addresses.
Create at least one Noun object that includes a list of objects from the associated class.
Display the Noun with the related objects.

## Answer Part 1: Create a separate class
_____________________________________
class Branch:
    branch_name = ""
    branch_email = ""
    branch_address = ""
    stocks = []  # A list of inventories that the branch store hold
    inventory_estimation = None  # Estimation of how much the stocks are worth in total sales price
    
    def __init__(self, bname, bemail, baddress, stocks):
        self.branch_name = bname
        self.branch_email = bemail
        self.branch_address = baddress
        self.stocks = stocks
    
    def display_branch(self):
        print("//--------------------------------------//")
        print(self.branch_name.upper())  ## Display upper case for branch name
        print("Address: ", self.branch_address)
        print("Email: ", self.branch_email)
        print("//--------------------------------------//")
        
    def stocks_report(self):
        stockList = self.stocks
        self.inventory_estimation = 0
        print("\nStocks held by the branch:\n")
        
        # Loop to print report while adding up estimation of inventory
        for i in range(len(stockList)):
            item = stockList[i]
            price = item.price
            avail = item.stock_avail
            self.inventory_estimation += avail * price
            print(f"{item.sku_no}:\t\t{avail} unit(s)\t\t{item.brand} {item.product_name}")
            
        # Present estimation of inventory:
        inventorySum = "{:.2f}".format(self.inventory_estimation)
        print(f"\nTotal estimated value of inventory above: ${inventorySum}." )

_____________________________________
## Answer Part 2: Create one Noun object that includes a list of earlier class of objects
                  and show case the object from the new class with the help of the list of objects.
_____________________________________
# Create list of stocks
print("Creating a list of stocks, 'nystock'")
nystock = []
print(nystock)

item001 = Inventory("MOS-DEL-1234", "Dell", "Wireless Mouse Model 1234", 15.50, False, 34)
nystock.append(item001)
item001.display_attributes()

item002 = Inventory("KEB-TOS-3310", "Toshiba", "Wireless Keyboard Model 3310", 27.80, True, 26)
nystock.append(item002)
item002.display_attributes()

item003 = Inventory("THD-KST-2688", "Kingston", "Thumb Drive 128GB Model 2688", 58.80, True, 43)
nystock.append(item003)
item003.display_attributes()

item004 = Inventory("TAB-WAC-4730", "Wacom", "Drawing Tablet Model 4730", 670.70, True, 16)
nystock.append(item004)
item004.display_attributes()
        

# Instantiate object:
new_york_branch = Branch("Awesome Electronics New York", "new.york.branch@awesomeelectronics.com",\
                  "28 Fifth Avenue NYC, NY 10129", nystock)

print("\nInstantiate object 'new_york_branch' and use its methods")

print("\nThis method displays the branch's basic info:\n")
new_york_branch.display_branch()

print("\nThis method provides a report on the branch's stocks and inventories:")
new_york_branch.stocks_report()
_____________________________________
## Outcome of running codes:

Creating a list of stocks, 'nystock'
[]


The SKU Code is: MOS-DEL-1234
The brand is: Dell
The product name is: Wireless Mouse Model 1234
The price is: 15.5
The discount applicability is: False
The unit(s) of stock available is: 34


The SKU Code is: KEB-TOS-3310
The brand is: Toshiba
The product name is: Wireless Keyboard Model 3310
The price is: 27.8
The discount applicability is: True
The unit(s) of stock available is: 26


The SKU Code is: THD-KST-2688
The brand is: Kingston
The product name is: Thumb Drive 128GB Model 2688
The price is: 58.8
The discount applicability is: True
The unit(s) of stock available is: 43


The SKU Code is: TAB-WAC-4730
The brand is: Wacom
The product name is: Drawing Tablet Model 4730
The price is: 670.7
The discount applicability is: True
The unit(s) of stock available is: 16

Instantiate object 'new_york_branch' and use its methods

This method displays the branch's basic info:

//--------------------------------------//
AWESOME ELECTRONICS NEW YORK
Address:  28 Fifth Avenue NYC, NY 10129
Email:  new.york.branch@awesomeelectronics.com
//--------------------------------------//

This method provides a report on the branch's stocks and inventories:

Stocks held by the branch:

MOS-DEL-1234:		34 unit(s)		Dell Wireless Mouse Model 1234
KEB-TOS-3310:		26 unit(s)		Toshiba Wireless Keyboard Model 3310
THD-KST-2688:		43 unit(s)		Kingston Thumb Drive 128GB Model 2688
TAB-WAC-4730:		16 unit(s)		Wacom Drawing Tablet Model 4730

Total estimated value of inventory above: $14509.40.
_____________________________________




#### Classes and Objects Self-Assessment: A Simple Calculator

### Instructions
Your program should include the following:
 - Design a class called SimpleCalculator that performs basic math operations 
   (addition, subtraction, multiplication, division) on two operands.
    - Create a separate method for each operation in the class.
 - The program should accept two values and an operator from the user,
   perform the selected operation using those two values,
   and display the result to the user in a meaningful way.
 - The user should be able to exit the program at any time,
   using a keyword like "Quit" or "Exit" in any letter case.
    - If the user chooses to exit,
      the program should end with an appropriate output message thanking the user.

## Answer Part 1: Build a class
_____________________________________
# Carl Tang Yong Han 2022-08-12

class SimpleCalculator:
    model_name = ""
    version = ""
    user_instruction = ""
    
    # Save the current operator for method's access later:
    operator = ""
    # Save the user-inputted operands for method's access later:
    operand1 = None
    operand2 = None
    
    
    def __init__(self, model, version, instruction):
        self.model_name = model
        self.version = version
        self.user_instruction = instruction
        
    def manual(self):
        print(f"{self.model_name} Version {self.version}\n")
        print("Manual for a Simple Calculator\n")
        print("Instruction for Use:")
        print(self.user_instruction)
        
    # This is just a function, not a method, to check for decimal input later:
    def is_decimal(self, numStr):
        return ("." in numStr)
    
    
    # In principle, user may set the operands and operator attributes in the class,
    # and invoke the following 4 methods from the class for different methematical operations.
    # but one may simply run the "run" method further below from the class, and have a better
    # user experience doing the operations.
    
    # Method for Addition:
    def add(self):
        if self.operator != "A":
            print("Something wrong with the operator, which is not specifically for addition.")
        elif (self.operand1 != None) and (self.operand2 != None):
            answer = self.operand1 + self.operand2
            print(f"\n   Results:      {self.operand1} + {self.operand2} = {answer}\n")
        else:
            print("Something wrong with the operands.")

    # Method for Subtraction:
    def subtract(self):
        if self.operator != "S":
            print("Something wrong with the operator, which is not specifically for subtraction.")
        elif (self.operand1 != None) and (self.operand2 != None):
            answer = self.operand1 - self.operand2
            print(f"\n   Results:      {self.operand1} - {self.operand2} = {answer}\n")
        else:
            print("Something wrong with the operands.")
            
    # Method for Multiplication:
    def multiply(self):
        if self.operator != "M":
            print("Something wrong with the operator, which is not specifically for multiplication.")
        elif (self.operand1 != None) and (self.operand2 != None):
            answer = self.operand1 * self.operand2
            print(f"\n   Results:      {self.operand1} x {self.operand2} = {answer}\n")
        else:
            print("Something wrong with the operands.")
            
    # Method for Addition:
    def divide(self):
        if self.operator != "D":
            print("Something wrong with the operator, which is not specifically for division.")
        elif (self.operand1 != None) and (self.operand2 != None):
            answer = self.operand1 / self.operand2
            print(f"\n   Results:      {self.operand1} / {self.operand2} = {answer}\n")
        else:
            print("Something wrong with the operands.")
    
    
    
    # A more user-friendly way to run and use the calculator by easy input UI.    
    # This will kickstart the use of calculator
    def run(self):
        print(f"You are using Simple Calculator\n{self.model_name} Version {self.version}\n")
        
        while True:
            input0 = input("Do you want to proceed (P) or quit (Q)? >>>> ").upper()
            
            if input0[0] == "Q":   # In case some users actually type out "quit"
                print("\nYou have chosen to quit.\nThank you, and see you again!\n")
                break
            
            input1 = input("Please enter first number: >>>> ")
            input2 = input("Please enter second number: >>>> ")
            input3 = input("Please enter operand:\n(A)dd, (S)ubtract, (M)ultiply or (D)ivide: >>>> ").upper()

            # To avoid making unnecessary float outcomes, we only treat input as float when
            # user actually have a "." in the input
            
            if self.is_decimal(input1):
                self.operand1 = float(input1)
            else:
                self.operand1 = int(input1)
                
            if self.is_decimal(input2):
                self.operand2 = float(input2)
            else:
                self.operand2 = int(input2)
                
            # User could have typed in "Add", "Subtract", etc., instead of the more convenient
            # initial letters A, S, D, or M. We can read initial characters.
            # Also be prepared for some users inputting "+", "-", "*", and "/",
            # which is more classical though less easy for users to type.
            # Sometimes user might forget if "M" refers to "Minus" or "Multiply",
            # which is when "*" would be useful.
            
            if (input3[0] == "A") or (input3[0] == "+"):
                self.operator = "A"
                self.add()
            elif (input3[0] == "S") or (input3[0] == "-"):
                self.operator = "S"
                self.subtract()
            elif (input3[0] == "M") or (input3[0] == "*"):
                self.operator = "M"
                self.multiply()
            elif (input3[0] == "D") or (input3[0] == "/"):
                self.operator = "D"
                self.divide()
            else:
                print("\nSorry, the calculator does not do the operation you mentioned.\n")

print(SimpleCalculator)
_____________________________________
## Answer Part 2a: Use the class in a slow manner to perform calculation:
_____________________________________
# Write the user instructions in a string:

instr = "Welcome to our simple calculator.\nThis calculator takes two operand values and one operator value, and \
function like common mathematical operations, like 'A + B', where A and B are the two operands you input first \
in sequence, followed by the operator (e.g. '+') that you input later.\nWe offer addition, subtraction, multiplication \
and division, which you can choose as your input for operator, in the form of  'addition' or 'add' or 'A' or '+' \
in any case, at your convenience. Similarly for other three operations.\n\n\
You may manually input the operands and operator as follows,\n\
my_calculator.operand1 = 123\n\
my_calculator.operand2 = 456\n\
my_calculator.operator = 'A'\n\
and call your intended method matching your operator of choice, i.e. add(), subtract(), multiply() and divide():\n\
my_calculator.add()    for example\n\n\
But a better way to use the calculator, which is more fun and convenient, is to call the run() method:\n\
my_calculator.run()    which will offer easier inputs.\n\n\
Give it a try, and have fun!"


# Instantiate an object and start using:
print("Instantiate an object and start using:\n ------------------------------")
my_calc = SimpleCalculator("Classio C279", "3.14", instr)
print("\n ------------------------------")

# Look up the manual:
print("Calling my_calc.manual() to look up the manual:\n ------------------------------")
my_calc.manual()
print("\n ------------------------------")

# Try a slow and inconvenient method to perform '123 + 456' by manually setting class attributes:
print("Try a slow and inconvenient method to perform '123 + 456' \
by manually setting class attributes, followed by running the add() method:\n ------------------------------\n")
my_calc.operand1 = 123
my_calc.operand2 = 456
my_calc.operator = "A"
my_calc.add()
print("\n ------------------------------")
_____________________________________
## Outcome of running codes, Part 2a:  ## (NOTE: longer text output has been broken up for easier reading on GitHub)

Instantiate an object and start using:
 ------------------------------

 ------------------------------
Calling my_calc.manual() to look up the manual:
 ------------------------------
Classio C279 Version 3.14

Manual for a Simple Calculator

Instruction for Use:
Welcome to our simple calculator.
This calculator takes two operand values and one operator value, and function like common mathematical operations,
like 'A + B', where A and B are the two operands you input first in sequence, followed by the operator (e.g. '+')
that you input later. We offer addition, subtraction, multiplication and division,
which you can choose as your input for operator, in the form of  'addition' or 'add' or 'A' or '+' in any case,
at your convenience. Similarly for other three operations.

You may manually input the operands and operator as follows,
my_calculator.operand1 = 123
my_calculator.operand2 = 456
my_calculator.operator = 'A'
and call your intended method matching your operator of choice, i.e. add(), subtract(), multiply() and divide():
my_calculator.add()    for example

But a better way to use the calculator, which is more fun and convenient, is to call the run() method:
my_calculator.run()    which will offer easier inputs.

Give it a try, and have fun!

 ------------------------------
Try a slow and inconvenient method to perform '123 + 456' by manually setting class attributes, followed by running the add() method:
 ------------------------------


   Results:      123 + 456 = 579


 ------------------------------
_____________________________________
## Answer Part 2b: Use the class in a more convenient manner to perform calculation:
_____________________________________
# Use the calculator in a more convenient way, by calling the my_calc.run() method:

my_calc.run()
_____________________________________
## Outcome of running codes:

You are using Simple Calculator
Classio C279 Version 3.14

Do you want to proceed (P) or quit (Q)? >>>> p
Please enter first number: >>>> 56
Please enter second number: >>>> 78
Please enter operand:
(A)dd, (S)ubtract, (M)ultiply or (D)ivide: >>>> addition

   Results:      56 + 78 = 134

Do you want to proceed (P) or quit (Q)? >>>> Proceed
Please enter first number: >>>> 3.142
Please enter second number: >>>> 7
Please enter operand:
(A)dd, (S)ubtract, (M)ultiply or (D)ivide: >>>> SUB

   Results:      3.142 - 7 = -3.858

Do you want to proceed (P) or quit (Q)? >>>> Proceed!!!
Please enter first number: >>>> -234
Please enter second number: >>>> 567
Please enter operand:
(A)dd, (S)ubtract, (M)ultiply or (D)ivide: >>>> *

   Results:      -234 x 567 = -132678

Do you want to proceed (P) or quit (Q)? >>>> p
Please enter first number: >>>> 897.453
Please enter second number: >>>> 34.59
Please enter operand:
(A)dd, (S)ubtract, (M)ultiply or (D)ivide: >>>> D

   Results:      897.453 / 34.59 = 25.945446660884645

Do you want to proceed (P) or quit (Q)? >>>> pro
Please enter first number: >>>> 6
Please enter second number: >>>> 2
Please enter operand:
(A)dd, (S)ubtract, (M)ultiply or (D)ivide: >>>> Power

Sorry, the calculator does not do the operation you mentioned.

Do you want to proceed (P) or quit (Q)? >>>> P
Please enter first number: >>>> -90.0
Please enter second number: >>>> -15.0
Please enter operand:
(A)dd, (S)ubtract, (M)ultiply or (D)ivide: >>>> ///

   Results:      -90.0 / -15.0 = 6.0

Do you want to proceed (P) or quit (Q)? >>>> Quit !!!!

You have chosen to quit.
Thank you, and see you again!
_____________________________________




#### Worksheet 3 - Inheritance


### Practice 1
Create an Animal class that includes two string attributes: name and location.
Implement the appropriate __init__ and display methods to create and display objects respectively.
Using inheritance, create another class called Mammal that inherits from the Animal class.
Create two Mammal objects and display each object's information using the display method.

## Answer:
_____________________________________
# your code here  

class Animal:
    name = ""
    location = ""
    have_fins_or_wings = None   # Boolean to indicate if this animal has fins or wings
    num_of_legs = None          # Integer
    
    def __init__(self, name, location, finWing, numLeg):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        if self.have_fins_or_wings:
            print("This animal has fins or wings.")
        else:
            print("This animal does not have fins or wings.")
        if self.num_of_legs == 0:
            print("This animal has no leg.")
        else:
            print(f"This animal has {self.num_of_legs} legs.")

# Test the class:
print(Animal)

print("Test instantiate an Animal object:\n")
lion = Animal("Lion", "Africa", False, 4)

print(lion)
lion.display()

# Now use inheritance to create class Mammal:
print("\nThis is creating an inherited class, Mammal:\n")

class Mammal(Animal):
    pass

print("Test instantiating two Mammal objects:\n")

print("\nMammal 1:")
tiger = Mammal("Tiger", "India", False, 4)
print(tiger)
tiger.display()

print("\nMammal 2:")
orangutan = Mammal("Orang Utan", "Malaysia", False, 2)
print(orangutan)
orangutan.display()
_____________________________________
## Outcome of running codes:

<class '__main__.Animal'>
Test instantiate an Animal object:

<__main__.Animal object at 0x000002159A79F760>

Name of animal: Lion
Found in location: Africa
This animal does not have fins or wings.
This animal has 4 legs.

This is creating an inherited class, Mammal:

Test instantiating two Mammal objects:


Mammal 1:
<__main__.Mammal object at 0x000002159A772790>

Name of animal: Tiger
Found in location: India
This animal does not have fins or wings.
This animal has 4 legs.

Mammal 2:
<__main__.Mammal object at 0x000002159A772580>

Name of animal: Orang Utan
Found in location: Malaysia
This animal does not have fins or wings.
This animal has 2 legs.
_____________________________________



### Practice 2
Create an Animal class that includes two string attributes: name and location.
Implement the appropriate __init__ and display methods to create and display objects.
Using inheritance, create another class called Mammal that inherits from the Animal class.
Add at least one more attribute that is specific to the Mammal class and is not included in the Animal class.
Create two Mammal objects and display them.

## Answer:
_____________________________________
# your code here  

class Animal:
    name = ""
    location = ""
    have_fins_or_wings = None   # Boolean to indicate if this animal has fins or wings
    num_of_legs = None          # Integer
    
    def __init__(self, name, location, finWing, numLeg):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        if self.have_fins_or_wings:
            print("This animal has fins or wings.")
        else:
            print("This animal does not have fins or wings.")
        if self.num_of_legs == 0:
            print("This animal has no leg.")
        else:
            print(f"This animal has {self.num_of_legs} legs.")

            
# Now use inheritance to create child class Mammal:

class Mammal(Animal):
    # Boolean to indicate if the animal has pouch for its baby
    have_pouch = None         
    # Boolean to indicate if the animal is protected by law from poaching
    protected_from_poaching = None

print("This is class Mammal with new attributes:")
print(Mammal)

# Instantiate two Mammal objects:

print("\nHere are two objects from the Mammal class:\n")

elephant = Mammal("Elephant", "Africa", False, 4)
elephant.have_pouch = False
elephant.protected_from_poaching = True
print("\nNew Mammal 1:")
print(elephant)
elephant.display()
print(f"{elephant.name} have pouch? {elephant.have_pouch}!!")
print(f"{elephant.name} is protected from poaching? {elephant.protected_from_poaching}!!")


kangaroo = Mammal("Kangaroo", "Australia", False, 2)
kangaroo.have_pouch = True
kangaroo.protected_from_poaching = False
print("\nNew Mammal 2:")
print(kangaroo)
kangaroo.display()
print(f"{kangaroo.name} have pouch? {kangaroo.have_pouch}!!")
print(f"{kangaroo.name} is protected from poaching? {kangaroo.protected_from_poaching}!!")
_____________________________________
## Outcome of running codes:

This is class Mammal with new attributes:
<class '__main__.Mammal'>

Here are two objects from the Mammal class:


New Mammal 1:
<__main__.Mammal object at 0x000002159A7AD100>

Name of animal: Elephant
Found in location: Africa
This animal does not have fins or wings.
This animal has 4 legs.
Elephant have pouch? False!!
Elephant is protected from poaching? True!!

New Mammal 2:
<__main__.Mammal object at 0x000002159A7B7F40>

Name of animal: Kangaroo
Found in location: Australia
This animal does not have fins or wings.
This animal has 2 legs.
Kangaroo have pouch? True!!
Kangaroo is protected from poaching? False!!
_____________________________________



### Practice 3
Create a class Animal that includes two string attributes: name and location.
Implement the appropriate __init__ and display methods to create and display objects.

Use inheritance to create another class called Mammal that inherits from the Animal class.
 - Add one more attribute specific to the Mammal class.
 - Override the display method to display the newly-added attribute of the Mammal class.
 - Create two Mammal objects and display them.
 
Create another class called Bird that also inherits from the Animal class.
 - Add one more attribute that is specific to the Bird class.
 - Override the display method to display the new attribute of the Bird class.
 - Create two Bird objects and display them.
 
Create another class called Reptile that inherits from the Animal class.
 - Add one more attribute specific to the Reptile class.
 - Override the display method to display the new attribute of the Reptile class.
 - Create two Reptile objects and display them.

## Answer Part 1: Mammal
_____________________________________
# your code here  

class Animal:
    name = ""
    location = ""
    have_fins_or_wings = None   # Boolean to indicate if this animal has fins or wings
    num_of_legs = None          # Integer
    
    def __init__(self, name, location, finWing, numLeg):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        if self.have_fins_or_wings:
            print("This animal has fins or wings.")
        else:
            print("This animal does not have fins or wings.")
        if self.num_of_legs == 0:
            print("This animal has no leg.")
        else:
            print(f"This animal has {self.num_of_legs} legs.")

            
# Now use inheritance to create child class Mammal:

class Mammal(Animal):
    # Boolean to indicate if the animal has pouch for its baby
    have_pouch = None         
    # Boolean to indicate if the animal is protected by law from poaching
    protected_from_poaching = None
    
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        
        if self.have_fins_or_wings:
            print(f"The {self.name} has fins or wings.", end=" ")
        else:
            print(f"The {self.name} does not have fins or wings.", end=" ")
        if self.num_of_legs == 0:
            print("It has no leg.")
        else:
            print(f"It has {self.num_of_legs} legs.")
            
        if self.have_pouch:
            print(f"Oh, by the way, the {self.name} has a pouch for its baby!")
        else:
            print("Oh, by the way, don't bother to look for a pouch on it. It has none.")
            
        if self.protected_from_poaching:
            print("For your information, this species is protected from poaching! Just so you know.")
        else:
            print(f"For your information, the {self.name} is not protected by law.")
            print("But show it some love, will ya?")
            

print("This is class Mammal with new attributes:")
print(Mammal)

# Instantiate two Mammal objects:

print("\nHere are two objects from the Mammal class:\n")

elephant = Mammal("Elephant", "Africa", False, 4)
elephant.have_pouch = False
elephant.protected_from_poaching = True
print("\nNew Mammal 1:")
print(elephant)
elephant.display()

kangaroo = Mammal("Kangaroo", "Australia", False, 2)
kangaroo.have_pouch = True
kangaroo.protected_from_poaching = False
print("\nNew Mammal 2:")
print(kangaroo)
kangaroo.display()
_____________________________________
## Outcome of running codes Part 1: Mammal

This is class Mammal with new attributes:
<class '__main__.Mammal'>

Here are two objects from the Mammal class:


New Mammal 1:
<__main__.Mammal object at 0x000002159A6C42B0>

Name of animal: Elephant
Found in location: Africa
The Elephant does not have fins or wings. It has 4 legs.
Oh, by the way, don't bother to look for a pouch on it. It has none.
For your information, this species is protected from poaching! Just so you know.

New Mammal 2:
<__main__.Mammal object at 0x000002159A7728E0>

Name of animal: Kangaroo
Found in location: Australia
The Kangaroo does not have fins or wings. It has 2 legs.
Oh, by the way, the Kangaroo has a pouch for its baby!
For your information, the Kangaroo is not protected by law.
But show it some love, will ya?
_____________________________________
## Answer Part 2: Bird
_____________________________________
# Now use inheritance to create child class Bird:

class Bird(Animal):
    can_actually_fly = None    # Boolean
    eggs_eaten = None          # Boolean, to indicate if humans eat the bird's eggs
    
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Soars, or runs around, in location: {self.location}")
        
        if self.have_fins_or_wings:
            print(f"The {self.name} has wings. (Well, we don't call them fins)")
        else:
            print(f"The {self.name}, if found with no wings, is probably disabled or disformed.")
        if self.num_of_legs == 0:
            print("If found with no legs at all, it is probably injured or disabled.")
        else:
            print(f"It has {self.num_of_legs} legs,", end=" ")
            
        if self.can_actually_fly:
            if self.num_of_legs != 0:
                print("which allows it to rest on tree branches.")
            print(f"A healthy {self.name} can usually fly, though not as fast as an airplane.")
        else:
            if self.num_of_legs != 0:
                print("which allows it to run around on the ground.")
            print(f"Despite being a winged animal (usually), the {self.name} can't actually fly.")
            
        if self.eggs_eaten:
            print(f"Humans actually do eat the eggs of the {self.name}.")
        else:
            print(f"Gluttons as we are, humans usually don't eat the eggs of the {self.name}.")
            

print("This is class Bird with new attributes:")
print(Bird)

# Instantiate two Bird objects:

print("\nHere are two objects from the Bird class:\n")

parrot = Bird("Parrot", "Everywhere", True, 2)
parrot.can_actually_fly = True
parrot.eggs_eaten = False
print("\nNew Bird 1:")
print(parrot)
parrot.display()

ostrich = Bird("Ostrich", "Africa", True, 2)
ostrich.can_actually_fly = False
ostrich.eggs_eaten = True
print("\nNew Bird 2:")
print(ostrich)
ostrich.display()   
_____________________________________
## Outcome of running codes Part 2: Bird

This is class Bird with new attributes:
<class '__main__.Bird'>

Here are two objects from the Bird class:


New Bird 1:
<__main__.Bird object at 0x000002159A79FEE0>

Name of animal: Parrot
Soars, or runs around, in location: Everywhere
The Parrot has wings. (Well, we don't call them fins)
It has 2 legs, which allows it to rest on tree branches.
A healthy Parrot can usually fly, though not as fast as an airplane.
Gluttons as we are, humans usually don't eat the eggs of the Parrot.

New Bird 2:
<__main__.Bird object at 0x000002159A772460>

Name of animal: Ostrich
Soars, or runs around, in location: Africa
The Ostrich has wings. (Well, we don't call them fins)
It has 2 legs, which allows it to run around on the ground.
Despite being a winged animal (usually), the Ostrich can't actually fly.
Humans actually do eat the eggs of the Ostrich.
_____________________________________
## Answer Part 3: Reptile
_____________________________________
# Now use inheritance to create child class Reptile:

class Reptile(Animal):
    cultural_ref = ""     # A string describing the cultural references of this reptile
    movies_made = None    # Boolean indicating if there are already movies on this reptile
    
    def display(self):
        intro = f"\nFrom paleontologic times when reptiles lived among the dinosaurs,\n\
to the urban legends that there are Reptilian humanoids of possibly extraterrestial origin,\n\
reptiles are no strangers to popular cultures.\n\
Introducing a member of the reptilian family, the {self.name}!\n"
        print(intro)
        print("If you're thinking of its mythical Mayan counterpart, a.k.a. the winged serpant god Kukulcan,")
        print(f"well, the {self.name} {'has' if self.have_fins_or_wings else 'has no'} wings.")
        print(f"On the other hand, if you're thinking of the 'Controlling-the-World-Behind-the-Scene'\n\
powerful intelligent Reptilian species walking on two feet, well, the more mundane {self.name} has \
{self.num_of_legs if self.num_of_legs != 0 else 'no'} legs.\n")
        if self.movies_made:
            print(f"You might already know, that there are movies about {self.name}!")
        else:
            print(f"It's a shame that the Hollywood has not made a movie about {self.name}!")
        print("By the way, did you know that: \n", self.cultural_ref)
        

# Create some cultural reference texts:

anaconda_ref = "'Anaconda' turns out is the name of a famous software used by Data Scientists,\n\
which includes programming tools of -- Python! How funny!\n"

crocodile_ref = "'Crocodile' turns out is a brand of luxury clothing and accessories,\n\
which some believe to be a rip-off from a similar famous brand Lacoste!\n"


print("This is class Reptile with new attributes:")
print(Reptile)

# Instantiate two Bird objects:

print("\nHere are two objects from the Reptile class:\n")

crocodile = Reptile("Crocodile", "Everywhere", False, 4)
crocodile.cultural_ref = crocodile_ref
crocodile.movies_made = True
print("\nNew Reptile 1:")
print(crocodile)
crocodile.display()

anaconda = Reptile("Anaconda", "Everywhere", False, 0)
anaconda.cultural_ref = anaconda_ref
anaconda.movies_made = True
print("\nNew Reptile 2:")
print(anaconda)
anaconda.display() 
_____________________________________
## Outcome of running codes Part 3: Reptile

This is class Reptile with new attributes:
<class '__main__.Reptile'>

Here are two objects from the Reptile class:


New Reptile 1:
<__main__.Reptile object at 0x000002159A79F130>

From paleontologic times when reptiles lived among the dinosaurs,
to the urban legends that there are Reptilian humanoids of possibly extraterrestial origin,
reptiles are no strangers to popular cultures.
Introducing a member of the reptilian family, the Crocodile!

If you're thinking of its mythical Mayan counterpart, a.k.a. the winged serpant god Kukulcan,
well, the Crocodile has no wings.
On the other hand, if you're thinking of the 'Controlling-the-World-Behind-the-Scene'
powerful intelligent Reptilian species walking on two feet, well, the more mundane Crocodile has 4 legs.

You might already know, that there are movies about Crocodile!
By the way, did you know that: 
 'Crocodile' turns out is a brand of luxury clothing and accessories,
which some believe to be a rip-off from a similar famous brand Lacoste!


New Reptile 2:
<__main__.Reptile object at 0x000002159A871EE0>

From paleontologic times when reptiles lived among the dinosaurs,
to the urban legends that there are Reptilian humanoids of possibly extraterrestial origin,
reptiles are no strangers to popular cultures.
Introducing a member of the reptilian family, the Anaconda!

If you're thinking of its mythical Mayan counterpart, a.k.a. the winged serpant god Kukulcan,
well, the Anaconda has no wings.
On the other hand, if you're thinking of the 'Controlling-the-World-Behind-the-Scene'
powerful intelligent Reptilian species walking on two feet, well, the more mundane Anaconda has no legs.

You might already know, that there are movies about Anaconda!
By the way, did you know that: 
 'Anaconda' turns out is the name of a famous software used by Data Scientists,
which includes programming tools of -- Python! How funny!
_____________________________________



### Practice 4
Create a class Animal that includes two string attributes: name and location.
Implement the appropriate __init__ and display methods to create and display objects respectively.

Use inheritance to create another class called Mammal that inherits from the Animal class.
 - Add one more attribute specific to the Mammal class.
 - Override the __init__ and display methods to display the new attribute of the Mammal class.
 - Create two Mammal objects and display them.

Create another class called Bird that also inherits from the Animal class.
 - Add one more attribute specific to the Bird class.
 - Override the __init__ and display methods to display the new attribute of the Bird class.
 - Create two Bird objects and display them.

Create another class called Reptile that inherits from the Animal class.
 - Add one more attribute specific to the Reptile class.
 - Override the __init__ and display methods to display the new attribute of the Reptile class.
 - Create two Reptile objects and display them.

## Answer Part 1: Mammal
_____________________________________
# your code here  

class Animal:
    name = ""
    location = ""
    have_fins_or_wings = None   # Boolean to indicate if this animal has fins or wings
    num_of_legs = None          # Integer
    
    def __init__(self, name, location, finWing, numLeg):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        if self.have_fins_or_wings:
            print("This animal has fins or wings.")
        else:
            print("This animal does not have fins or wings.")
        if self.num_of_legs == 0:
            print("This animal has no leg.")
        else:
            print(f"This animal has {self.num_of_legs} legs.")

            
# Now use inheritance to create child class Mammal:

class Mammal(Animal):
    # Boolean to indicate if the animal has pouch for its baby
    have_pouch = None         
    # Boolean to indicate if the animal is protected by law from poaching
    protected_from_poaching = None
    
    def __init__(self, name, location, finWing, numLeg, pouch, protect):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        self.have_pouch = pouch
        self.protected_from_poaching = protect
    
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        
        if self.have_fins_or_wings:
            print(f"The {self.name} has fins or wings.", end=" ")
        else:
            print(f"The {self.name} does not have fins or wings.", end=" ")
        if self.num_of_legs == 0:
            print("It has no leg.")
        else:
            print(f"It has {self.num_of_legs} legs.")
            
        if self.have_pouch:
            print(f"Oh, by the way, the {self.name} has a pouch for its baby!")
        else:
            print("Oh, by the way, don't bother to look for a pouch on it. It has none.")
            
        if self.protected_from_poaching:
            print("For your information, this species is protected from poaching! Just so you know.")
        else:
            print(f"For your information, the {self.name} is not protected by law.")
            print("But show it some love, will ya?")
            

print("This is class Mammal with new attributes:")
print(Mammal)

# Instantiate two Mammal objects:

print("\nHere are two objects from the Mammal class:\n")

elephant = Mammal("Elephant", "Africa", False, 4, False, True)
print("\nNew Mammal 1:")
print(elephant)
elephant.display()

kangaroo = Mammal("Kangaroo", "Australia", False, 2, True, False)
print("\nNew Mammal 2:")
print(kangaroo)
kangaroo.display()
_____________________________________
## Outcome of running codes Part 1: Mammal

## NOTE: same as Practice 3, no need to repeat here.
_____________________________________
## Answer Part 2: Bird
_____________________________________
# Now use inheritance to create child class Bird:

class Bird(Animal):
    can_actually_fly = None    # Boolean
    eggs_eaten = None          # Boolean, to indicate if humans eat the bird's eggs
    
    def __init__(self, name, location, finWing, numLeg, fly, eggs):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        self.can_actually_fly = fly
        self.eggs_eaten = eggs   
    
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Soars, or runs around, in location: {self.location}")
        
        if self.have_fins_or_wings:
            print(f"The {self.name} has wings. (Well, we don't call them fins)")
        else:
            print(f"The {self.name}, if found with no wings, is probably disabled or disformed.")
        if self.num_of_legs == 0:
            print("If found with no legs at all, it is probably injured or disabled.")
        else:
            print(f"It has {self.num_of_legs} legs,", end=" ")
            
        if self.can_actually_fly:
            if self.num_of_legs != 0:
                print("which allows it to rest on tree branches.")
            print(f"A healthy {self.name} can usually fly, though not as fast as an airplane.")
        else:
            if self.num_of_legs != 0:
                print("which allows it to run around on the ground.")
            print(f"Despite being a winged animal (usually), the {self.name} can't actually fly.")
            
        if self.eggs_eaten:
            print(f"Humans actually do eat the eggs of the {self.name}.")
        else:
            print(f"Gluttons as we are, humans usually don't eat the eggs of the {self.name}.")
            

print("This is class Bird with new attributes:")
print(Bird)

# Instantiate two Bird objects:

print("\nHere are two objects from the Bird class:\n")

parrot = Bird("Parrot", "Everywhere", True, 2, True, False)
print("\nNew Bird 1:")
print(parrot)
parrot.display()

ostrich = Bird("Ostrich", "Africa", True, 2, False, True)
print("\nNew Bird 2:")
print(ostrich)
ostrich.display()   
_____________________________________
## Outcome of running codes Part 2: Bird

## NOTE: same as Practice 3, no need to repeat here.
_____________________________________
## Answer Part 3: Reptile
_____________________________________
# Now use inheritance to create child class Reptile:

class Reptile(Animal):
    cultural_ref = ""     # A string describing the cultural references of this reptile
    movies_made = None    # Boolean indicating if there are already movies on this reptile

    def __init__(self, name, location, finWing, numLeg, cultural, movies):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        self.cultural_ref = cultural
        self.movies_made = movies   
    
    def display(self):
        intro = f"\nFrom paleontologic times when reptiles lived among the dinosaurs,\n\
to the urban legends that there are Reptilian humanoids of possibly extraterrestial origin,\n\
reptiles are no strangers to popular cultures.\n\
Introducing a member of the reptilian family, the {self.name}!\n"
        print(intro)
        print("If you're thinking of its mythical Mayan counterpart, a.k.a. the winged serpant god Kukulcan,")
        print(f"well, the {self.name} {'has' if self.have_fins_or_wings else 'has no'} wings.")
        print(f"On the other hand, if you're thinking of the 'Controlling-the-World-Behind-the-Scene'\n\
powerful intelligent Reptilian species walking on two feet, well, the more mundane {self.name} has \
{self.num_of_legs if self.num_of_legs != 0 else 'no'} legs.\n")
        if self.movies_made:
            print(f"You might already know, that there are movies about {self.name}!")
        else:
            print(f"It's a shame that the Hollywood has not made a movie about {self.name}!")
        print("By the way, did you know that: \n", self.cultural_ref)
        

# Create some cultural reference texts:

anaconda_ref = "'Anaconda' turns out is the name of a famous software used by Data Scientists,\n\
which includes programming tools of -- Python! How funny!\n"

crocodile_ref = "'Crocodile' turns out is a brand of luxury clothing and accessories,\n\
which some believe to be a rip-off from a similar famous brand Lacoste!\n"


print("This is class Reptile with new attributes:")
print(Reptile)

# Instantiate two Bird objects:

print("\nHere are two objects from the Reptile class:\n")

crocodile = Reptile("Crocodile", "Everywhere", False, 4, crocodile_ref, True)
print("\nNew Reptile 1:")
print(crocodile)
crocodile.display()

anaconda = Reptile("Anaconda", "Everywhere", False, 0, anaconda_ref, True)
print("\nNew Reptile 2:")
print(anaconda)
anaconda.display() 
_____________________________________
## Outcome of running codes Part 3: Reptile

## NOTE: same as Practice 3, no need to repeat here.
_____________________________________



### Practice 5
Create a class Animal that includes two string attributes: name and location.
Implement the appropriate __init__ and display method, to create and display objects respectively.

Use inheritance to create another class called Mammal that will inherit from the Animal class.
 - Add one more attribute specific to the Mammal class.
 - Override the __init__ and display methods to display the new added attribute of the mammal class.
   Use the __init__ method of the parent class (Animal) to set the values of the name and location attributes.
 - Create two mammal objects and display them.

Create another class called Bird that also inherits from the Animal class.
 - Add one more attribute that specific to the bird class.
 - Override the __init__ and display methods to display the new added attribute of the bird class.
   Use the __init__ method of the parent class (Animal) to set the values of the name and location attributes.
 - Create two bird objects and display them.

Create another class called Reptile that inherits from the animal class.
 - Add one more attribute that specific to the reptile class.
 - Override the __init__ and display methods to display the new added attribute of the reptile class.
   Use the __init__ method of the parent class (Animal) to set the values of the name and location attributes.
 - Create two reptile objects and display them

## Answer Part 1: Mammal
_____________________________________
# your code here  

class Animal:
    name = ""
    location = ""
    have_fins_or_wings = None   # Boolean to indicate if this animal has fins or wings
    num_of_legs = None          # Integer
    
    def __init__(self, name, location, finWing, numLeg):
        self.name = name
        self.location = location
        self.have_fins_or_wings = finWing
        self.num_of_legs = numLeg
        
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        if self.have_fins_or_wings:
            print("This animal has fins or wings.")
        else:
            print("This animal does not have fins or wings.")
        if self.num_of_legs == 0:
            print("This animal has no leg.")
        else:
            print(f"This animal has {self.num_of_legs} legs.")

            
# Now use inheritance to create child class Mammal:

class Mammal(Animal):
    # Boolean to indicate if the animal has pouch for its baby
    have_pouch = None         
    # Boolean to indicate if the animal is protected by law from poaching
    protected_from_poaching = None
    
    def __init__(self, name, location, finWing, numLeg, pouch, protect):
        Animal.__init__(self, name, location, finWing, numLeg)
        self.have_pouch = pouch
        self.protected_from_poaching = protect
    
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Found in location: {self.location}")
        
        if self.have_fins_or_wings:
            print(f"The {self.name} has fins or wings.", end=" ")
        else:
            print(f"The {self.name} does not have fins or wings.", end=" ")
        if self.num_of_legs == 0:
            print("It has no leg.")
        else:
            print(f"It has {self.num_of_legs} legs.")
            
        if self.have_pouch:
            print(f"Oh, by the way, the {self.name} has a pouch for its baby!")
        else:
            print("Oh, by the way, don't bother to look for a pouch on it. It has none.")
            
        if self.protected_from_poaching:
            print("For your information, this species is protected from poaching! Just so you know.")
        else:
            print(f"For your information, the {self.name} is not protected by law.")
            print("But show it some love, will ya?")
            

print("This is class Mammal with new attributes:")
print(Mammal)

# Instantiate two Mammal objects:

print("\nHere are two objects from the Mammal class:\n")

elephant = Mammal("Elephant", "Africa", False, 4, False, True)
print("\nNew Mammal 1:")
print(elephant)
elephant.display()

kangaroo = Mammal("Kangaroo", "Australia", False, 2, True, False)
print("\nNew Mammal 2:")
print(kangaroo)
kangaroo.display()
_____________________________________
## Outcome of running codes Part 1: Mammal

## NOTE: same as Practice 3, no need to repeat here.
_____________________________________
## Answer Part 2: Bird
_____________________________________
# Now use inheritance to create child class Bird:

class Bird(Animal):
    can_actually_fly = None    # Boolean
    eggs_eaten = None          # Boolean, to indicate if humans eat the bird's eggs
    
    def __init__(self, name, location, finWing, numLeg, fly, eggs):
        Animal.__init__(self, name, location, finWing, numLeg)
        self.can_actually_fly = fly
        self.eggs_eaten = eggs   
    
    def display(self):
        print(f"\nName of animal: {self.name}")
        print(f"Soars, or runs around, in location: {self.location}")
        
        if self.have_fins_or_wings:
            print(f"The {self.name} has wings. (Well, we don't call them fins)")
        else:
            print(f"The {self.name}, if found with no wings, is probably disabled or disformed.")
        if self.num_of_legs == 0:
            print("If found with no legs at all, it is probably injured or disabled.")
        else:
            print(f"It has {self.num_of_legs} legs,", end=" ")
            
        if self.can_actually_fly:
            if self.num_of_legs != 0:
                print("which allows it to rest on tree branches.")
            print(f"A healthy {self.name} can usually fly, though not as fast as an airplane.")
        else:
            if self.num_of_legs != 0:
                print("which allows it to run around on the ground.")
            print(f"Despite being a winged animal (usually), the {self.name} can't actually fly.")
            
        if self.eggs_eaten:
            print(f"Humans actually do eat the eggs of the {self.name}.")
        else:
            print(f"Gluttons as we are, humans usually don't eat the eggs of the {self.name}.")
            

print("This is class Bird with new attributes:")
print(Bird)

# Instantiate two Bird objects:

print("\nHere are two objects from the Bird class:\n")

parrot = Bird("Parrot", "Everywhere", True, 2, True, False)
print("\nNew Bird 1:")
print(parrot)
parrot.display()

ostrich = Bird("Ostrich", "Africa", True, 2, False, True)
print("\nNew Bird 2:")
print(ostrich)
ostrich.display()   
_____________________________________
## Outcome of running codes Part 2: Bird

## NOTE: same as Practice 3, no need to repeat here.
_____________________________________
## Answer Part 3: Reptile
_____________________________________
# Now use inheritance to create child class Reptile:

class Reptile(Animal):
    cultural_ref = ""     # A string describing the cultural references of this reptile
    movies_made = None    # Boolean indicating if there are already movies on this reptile

    def __init__(self, name, location, finWing, numLeg, cultural, movies):
        Animal.__init__(self, name, location, finWing, numLeg)
        self.cultural_ref = cultural
        self.movies_made = movies   
    
    def display(self):
        intro = f"\nFrom paleontologic times when reptiles lived among the dinosaurs,\n\
to the urban legends that there are Reptilian humanoids of possibly extraterrestial origin,\n\
reptiles are no strangers to popular cultures.\n\
Introducing a member of the reptilian family, the {self.name}!\n"
        print(intro)
        print("If you're thinking of its mythical Mayan counterpart, a.k.a. the winged serpant god Kukulcan,")
        print(f"well, the {self.name} {'has' if self.have_fins_or_wings else 'has no'} wings.")
        print(f"On the other hand, if you're thinking of the 'Controlling-the-World-Behind-the-Scene'\n\
powerful intelligent Reptilian species walking on two feet, well, the more mundane {self.name} has \
{self.num_of_legs if self.num_of_legs != 0 else 'no'} legs.\n")
        if self.movies_made:
            print(f"You might already know, that there are movies about {self.name}!")
        else:
            print(f"It's a shame that the Hollywood has not made a movie about {self.name}!")
        print("By the way, did you know that: \n", self.cultural_ref)
        

# Create some cultural reference texts:

anaconda_ref = "'Anaconda' turns out is the name of a famous software used by Data Scientists,\n\
which includes programming tools of -- Python! How funny!\n"

crocodile_ref = "'Crocodile' turns out is a brand of luxury clothing and accessories,\n\
which some believe to be a rip-off from a similar famous brand Lacoste!\n"


print("This is class Reptile with new attributes:")
print(Reptile)

# Instantiate two Bird objects:

print("\nHere are two objects from the Reptile class:\n")

crocodile = Reptile("Crocodile", "Everywhere", False, 4, crocodile_ref, True)
print("\nNew Reptile 1:")
print(crocodile)
crocodile.display()

anaconda = Reptile("Anaconda", "Everywhere", False, 0, anaconda_ref, True)
print("\nNew Reptile 2:")
print(anaconda)
anaconda.display() 
_____________________________________
## Outcome of running codes Part 3: Reptile

## NOTE: same as Practice 3, no need to repeat here.
_____________________________________



### Practice 6
Change the code below as follows:
 - Add an attribute to the Director class called team. The team represents the employees that the director manages.
   The team attribute should be a list of Employee objects.
    - Implement the add_employee method, which takes as input an Employee object and adds it to the team object.
    - Implement the display method of the Director class to display the information about the director
      and the list of the employees that the director manages.
 - Create another class called HourlyEmployee that inherits from Employee.
    - Add one attribute to the HourlyEmployee class called hourly_rate,
      which represents the hourly pay rate for the hourly employee.
    - Implement the __init__ method and display methods for the HourlyEmployee class.
After you make these changes, verify that the code works by making sure it can display the attributes of the Director object using the display method.

## Answer:
_____________________________________
class Person:
    first_name="" 
    last_name="" 
    def __init__(self,fname,lname): 
        self.first_name = fname
        self.last_name = lname
    def display(self): 
        print("Person First Name: " + self.first_name)
        print("Person Last Name: " + self.last_name)
        

class Employee(Person):
    employee_id=None
    def __init__(self,emp_id,fname,lname):
        Person.__init__(self,fname,lname) 
        self.employee_id =emp_id
    def display(self):
        print("Employee ID: " + self.employee_id)
        print("Employee First Name: " + self.first_name)
        print("Employee Last Name: " + self.last_name)

class Director(Employee):
    director_level=None
    team =None
    def __init__(self,emp_id,fname,lname,d_level):
        # do not change this code
        Employee.__init__(self,emp_id,fname,lname)
        self.director_level = d_level
        self.team = list()
    def display(self):
        # a method that displays all the attributes of a director object
        print("Director ID: " + self.employee_id)
        print("Director First Name: " + self.first_name)
        print("Director Last Name: " + self.last_name)
        print("Director Level: " + self.director_level)
        print("\nEmployees managed by this Director:\n")
        for i in range(len(self.team)):
            employeeI = self.team[i]
            print(f"{i+1}. {employeeI.first_name} {employeeI.last_name}, ID {employeeI.employee_id}")
        pass
    def add_employee(self,emp):
        # a method to add an employee object to the team attribute 
        self.team.append(emp)
        pass
    
class HourlyEmployee(Employee):
    hourly_rate = None
    # implement this  class
    def __init__(self,emp_id,fname,lname,hrate):
        Employee.__init__(self,emp_id,fname,lname)
        self.hourly_rate = hrate
    def display(self):
        print("Employee ID: " + self.employee_id)
        print("Employee First Name: " + self.first_name)
        print("Employee Last Name: " + self.last_name)
        print("This is an Hourly Employee.")
        print("Hourly rate: $" + "{:.2f}".format(self.hourly_rate))     
    pass


# DO NOT CHANGE THIS CODE 
d1 = Director("E24523525","Haythem","Balti","D-LEVEL-1")


# create first employee object 
e1 = Employee("E4746456456","Mark","Smith")
# add employee e1 to the team attribute of the Director class 
d1.add_employee(e1)
# create second hourlyemployee object 
e2 = HourlyEmployee("E47464578978","Mary","Lang", 16.50)
# add hourly employee e2 to the team attribute of the Director class 
d1.add_employee(e2)


d1.display()

# additional: display the hourly employee:
print("\nThis is the hourly employee e2:\n")
e2.display()
_____________________________________
## Outcome of running codes:

Director ID: E24523525
Director First Name: Haythem
Director Last Name: Balti
Director Level: D-LEVEL-1

Employees managed by this Director:

1. Mark Smith, ID E4746456456
2. Mary Lang, ID E47464578978

This is the hourly employee e2:

Employee ID: E47464578978
Employee First Name: Mary
Employee Last Name: Lang
This is an Hourly Employee.
Hourly rate: $16.50
_____________________________________




### Practice 7
Implement the classes below as follows:
Implement the __init__ and display methods of the Asset class.
Next, leverage the __init__ and display methods from the Asset class to create the following:
 - Implement the __init__ and display methods of the Stock class.
 - Implement the __init__ and display methods of the Bond class.
 - Implement the __init__ and display methods of the MutualFund class.
Create two objects from each of the Stock, Bond, and MutualFund classes.
Use the display method to display the contents of each object.

## Answer:
_____________________________________
class Asset: 
    symbol=None
    price=None
    description=None
    def __init__(self,sym,pce,desc):
        self.symbol = sym
        self.price = pce
        self.description = desc
        pass
    def display(self):
        print("\nAsset Symbol:", self.symbol)
        print("Asset Price:", self.price)
        print("Description:", self.description)
        pass


class Stock(Asset):
    company_name = None
    def __init__(self,sym,pce,desc,comname):
        Asset.__init__(self,sym,pce,desc)
        self.company_name = comname
    def display(self):
        print(f"\nStocks for {self.symbol} ({self.company_name}):")
        print(f"NOTE: {self.description}")
        print(f"Total value held: ${self.price}")


class Bond(Asset):
    interest_rate=None
    def __init__(self,sym,pce,desc,intrate):
        Asset.__init__(self,sym,pce,desc)
        self.interest_rate = intrate
    def display(self):
        print(f"\n{self.description} ({self.symbol})")
        print(f"Interest Rate (a.k.a. Coupon Rate): {self.interest_rate}%")
        print(f"Total value held: ${self.price}")
        

class MutualFund(Asset):
    fund_manager=None
    def __init__(self,sym,pce,desc,fundman):
        Asset.__init__(self,sym,pce,desc)
        self.fund_manager = fundman
    def display(self):
        print(f"\nMutual Fund {self.symbol}, Fund Manager: {self.fund_manager}")
        print(f"More info:\n{self.description}")
        print(f"Total value held: ${self.price}")
        
    
# Now create two objects from each child class:    
    
stock_desc1 = "Asset price refers to total valuation of all units of shares as of today."
stock_desc2 = "Alphabet Inc. was restructured from Google LLC.\n\
Asset price refers to total valuation of all units of shares as of today."

bond_desc1 = "Treasury 5-Year Bond"
bond_desc2 = "Amazon.com, Inc. 3-Year Company Bond"

mutual_fund_desc1 = "Golden Bull Investment Fund. Portfolio includes exposure to:\n\
treasury and company bonds, REITs, stocks, and Forex."
mutual_fund_desc2 = "Quantum Wealth Fund. Portfolio includes exposure to:\n\
bonds, stocks, futures, options, Forex and privare equities."

aaplStock = Stock("AAPL", 600000, stock_desc1, "Apple Inc.")
print("\nStock 1 instantiated:", aaplStock)
aaplStock.display()

googStock = Stock("GOOG", 500000, stock_desc2, "Alphabet Inc.")
print("\nStock 2 instantiated:", googStock)
googStock.display()

treasBond = Bond("TREAS", 800000, bond_desc1, 5)
print("\nBond 1 instantiated:", treasBond)
treasBond.display()

amznBond = Bond("AMZN", 700000, bond_desc2, 7)
print("\nBond 1 instantiated:", amznBond)
amznBond.display()

golbMFund = MutualFund("GOLB", 400000, mutual_fund_desc1, "David Rich")
print("\nMutual Fund 1 instantiated:", golbMFund)
golbMFund.display()

quawMFund = MutualFund("QUAW", 300000, mutual_fund_desc2, "Richard Buffet")
print("\nMutual Fund 1 instantiated:", quawMFund)
quawMFund.display()
_____________________________________
## Outcome of running codes:

Stock 1 instantiated: <__main__.Stock object at 0x000002159A79FB20>

Stocks for AAPL (Apple Inc.):
NOTE: Asset price refers to total valuation of all units of shares as of today.
Total value held: $600000

Stock 2 instantiated: <__main__.Stock object at 0x000002159A79FD00>

Stocks for GOOG (Alphabet Inc.):
NOTE: Alphabet Inc. was restructured from Google LLC.
Asset price refers to total valuation of all units of shares as of today.
Total value held: $500000

Bond 1 instantiated: <__main__.Bond object at 0x000002159A772910>

Treasury 5-Year Bond (TREAS)
Interest Rate (a.k.a. Coupon Rate): 5%
Total value held: $800000

Bond 1 instantiated: <__main__.Bond object at 0x000002159A7AD790>

Amazon.com, Inc. 3-Year Company Bond (AMZN)
Interest Rate (a.k.a. Coupon Rate): 7%
Total value held: $700000

Mutual Fund 1 instantiated: <__main__.MutualFund object at 0x000002159A8ACF10>

Mutual Fund GOLB, Fund Manager: David Rich
More info:
Golden Bull Investment Fund. Portfolio includes exposure to:
treasury and company bonds, REITs, stocks, and Forex.
Total value held: $400000

Mutual Fund 1 instantiated: <__main__.MutualFund object at 0x000002159A7ADFA0>

Mutual Fund QUAW, Fund Manager: Richard Buffet
More info:
Quantum Wealth Fund. Portfolio includes exposure to:
bonds, stocks, futures, options, Forex and privare equities.
Total value held: $300000
_____________________________________




#### Activities: Inheritance


### Activity 0
Before beginning, create a class Noun to use as the starting point for the activities in this section.
The Noun class can be anything you wish, as long as it meets the following criteria:
 - Do not use people or animals.
 - The category must be broad enough to include different examples of the category.
 - It must represent a real-life object.
Include at least three attributes that are common to most (if not all) instances of the Noun.
Use appropriate naming conventions. If you created a Noun class for an earlier activity in this course,
you are welcome to use it for the activities in this page, or you can create a new one.
Implement the appropriate __init__ and display methods to create and display objects respectively.

## Answer:
_____________________________________
class Drink:
    drink_name = ""
    sweet_or_not = None         # Boolean
    alcoholic = None            # Boolean, in case it's alcoholic and not children-friendly
    calories_12_oz = None       # Calories for every 12 ounces
    
    def __init__(self, dname, sweet, alcoholic, calories):
        self.drink_name = dname
        self.sweet_or_not = sweet
        self.alcoholic = alcoholic
        self.calories_12_oz = calories
        
    def display(self):
        print(f"\nThe drink is {self.drink_name}.")
        print(f"It is {'sweetened' if self.sweet_or_not else 'not sweetened'} and", end = " ")
        print(f"{'alcoholic, please try and avoid' if self.alcoholic else 'non-alcoholic'}.")
        print(f"Each serving of 12 ounces contains {self.calories_12_oz} calories.")

print("Test create two drinks:")

black_coffee = Drink("Black Coffee", False, False, 3)
print("\nDrink 1, black_coffee:", black_coffee)
black_coffee.display()

regular_beer = Drink("Regular Beer", False, True, 155)
print("\nDrink 2, regular_beer:", regular_beer)
regular_beer.display()
_____________________________________
## Outcome of running codes:

Test create two drinks:

Drink 1, black_coffee: <__main__.Drink object at 0x00000253C0AB2100>

The drink is Black Coffee.
It is not sweetened and non-alcoholic.
Each serving of 12 ounces contains 3 calories.

Drink 2, regular_beer: <__main__.Drink object at 0x00000253C09D35E0>

The drink is Regular Beer.
It is not sweetened and alcoholic, please try and avoid.
Each serving of 12 ounces contains 155 calories.
_____________________________________



### Activity 1
Use inheritance to create another class that will inherit from the Noun class.
Create two objects using the new class and display each object's information using the display method.
As an example from this lesson, we started with an Animal class, created a Mammal class that inherits from Animal,
and then created two Mammal objects.
You will need to identify an appropriate class based on your own Noun class as well as appropriate objects
that represent the inherited class.

## Answer:
_____________________________________
class CafeDrink(Drink):
    pass

print("Test create two objects using this child class, CafeDrink:")

earl_grey = Drink("Earl Grey Tea", False, False, 4)
print("\nCafe Drink 1, earl_grey:", earl_grey)
earl_grey.display()

coffee_light_whipped = Drink("Coffee with Light Whipped Cream", True, False, 17)
print("\nCafe Drink 2, coffee_light_whipped:", coffee_light_whipped)
coffee_light_whipped.display()
_____________________________________
## Outcome of running codes:

Test create two objects using this child class, CafeDrink:

Cafe Drink 1, earl_grey: <__main__.Drink object at 0x00000253C0AB2400>

The drink is Earl Grey Tea.
It is not sweetened and non-alcoholic.
Each serving of 12 ounces contains 4 calories.

Cafe Drink 2, coffee_light_whipped: <__main__.Drink object at 0x00000253C0AB2C40>

The drink is Coffee with Light Whipped Cream.
It is sweetened and non-alcoholic.
Each serving of 12 ounces contains 17 calories.
_____________________________________



### Activity 2
Add at least two attributes to the new class created in the previous activity.
These attributes should be different from the attributes in the original Noun class and specific to the new class.
As an example from the lesson, the Animal class included the attributes of name and place.
The Mammal class that inherits from the Animal class would include mammal-specific attributes, such as gender and fur length.
Override the __init__ and display methods to display the new attributes,
and then create at least two new objects based on the inherited class and display them with the class attributes.

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________




### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________



### Activity N

## Answer:
_____________________________________

_____________________________________
## Outcome of running codes:

_____________________________________
