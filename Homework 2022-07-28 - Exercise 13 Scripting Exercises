GitHub Homework 2022-07-28 - Exercise 13 Scripting Exercises

Carl Tang Yong Han

Linux - Scripting Exercises:


For each activity, save your working script to a text file named as:
yourname-scripting-activity#.txt


Activity 1:
Create a simple shell script to tell the user about their session – they need to know:

What their username is
What the current date is
What the time is
What their current working directory is
How many files they have in that directory
What is the biggest file in their current directory

Script CarlTangYongHan-scripting-activity1.txt
_____________________________________________
#!/bin/bash

echo This is about your session
echo User Name is `logname`
echo Current Date is `date +%d-%m-%Y`
echo The time is `date +%T`
echo Current working directory is `pwd`
echo Number of files in directory: `ls | wc -l`
echo Biggest file in current directory: `du -ah . | sort -n -r | head -1`
_____________________________________________
ubuntu@ip-172-31-17-240:~$ ./CarlTangYongHan-scripting-activity1.txt 
(Outcome:)
This is about your session
User Name is ubuntu
Current Date is 28-07-2022
The time is 07:46:01
Current working directory is /home/ubuntu
Number of files in directory: 47
Biggest file in current directory: 276K ./logs


Activity 2:
Create a directory with a few test files in it (the files can be empty).
Now write a script that for every file in that directory you rename it to have an extension of today's date in YYYYMMDD format.

ubuntu@ip-172-31-17-240:~/scriptExerciseAct2$ ls
Test1  Test2  Test3

Script CarlTangYongHan-scripting-activity2.txt
______________________________
#!/bin/bash

path=~/scriptExerciseAct2

dateToday=`date +%Y%m%d`

cd $path

for  file in * 
do
newName="$file.$dateToday"
mv "$file" "$newName"
done

cd ~
_____________________________
Outcome:
ubuntu@ip-172-31-17-240:~$ ls ./scriptExerciseAct2/
Test1.20220729  Test2.20220729  Test3.20220729


Activity 3:
You are in charge of creating a program for the lottery in your area! The options are for numbers between 1 and 50.
Create a script that picks 5 for each draw plus a bonus ball number between 1 and 10. Output the numbers to a file that has the date in its name.
Create another script that will allow users to check their lottery numbers and advise them if they match or not and how many matches they got.

Script CarlTangYongHan-scripting-activity3A.txt
____________________________________
#!/bin/bash


# Keep track of unchosen numbers
leftover=50

# Available numbers in the pool
poolArray=(`seq 1 50`)

# Keep track of unchosen numbers from 1 - 10
remainingOfTen=10

touch luckyDraw

function draw()
{
        # Check leftover pool size:
        leftover=${#poolArray[@]}

        if [ $leftover != 0 ]
        then
                # Randomly pick a number from leftover pool:
                R=$(($RANDOM%$leftover))

                selected=${poolArray[$R]}

                # Check if selected number falls within 1-10
                if [ $selected -ge 1 ] && [ $selected -le 10 ]
                then
                        (( remainingOfTen=remainingOfTen-1 ))
                fi

                # Remove picked number from pool:
                unset poolArray[$R]

                # Produce selected number:
                echo $selected
        fi
}

for i in {1..5}
do
# Add lucky number to record
draw >> luckyDraw
done

# Draw from 1 - 10 if applicable
if [ $remainingOfTen -ge 1 ]
then
R10=$(($RANDOM%$remainingOfTen))

selected10=${poolArray[$R10]}
unset poolArray[$R10]
(( remainingOfTen=remainingOfTen-1 ))
       
echo $selected10 >> luckyDraw
fi


mv luckyDraw luckyDraw`date +%Y%m%d`

___________________________________________


Script CarlTangYongHan-scripting-activity3A.txt
____________________________________
#!/bin/bash

filename="luckyDraw20220728"

echo This is for lottery check,
echo please enter your six numbers.

# count of lucky matches
match=0
# user inputs of 6 numbers kept in array
inputs=()
# actual winning numbers kept in array
actual=()

# Read data from lucky draw and load into array
while read num
do
	actual+=($num)
done < $filename

# Interact with user
for i in {1..6}
do
	actual+=($num)
	echo Your input $i please:
	read input
	inputs+=($input)
	if [ $input == ${actual[$((i-1))]} ]
	then
		echo Your input $i matches!
		match=$((match+1))
	else
		echo "Sorry, your input $i doesn't match"
		echo The actual lucky number is ${actual[$((i-1))]}.
	fi
	n=$((n+1))
done

if [ $match == 6 ]
then
	echo Congratulations, you match 100%!
else
	echo You matched $match out of 6 numbers.
fi

echo Actual lucky numbers: ${actual[@]}
echo Your number set is:-- ${inputs[@]}
______________________________________________

Example running of script:
ubuntu@ip-172-31-17-240:~$ cat luckyDraw20220728 
13
7
39
41
37
6
ubuntu@ip-172-31-17-240:~$ ./CarlTangYongHan-scripting-activity3B.txt
This is for lottery check,
please enter your six numbers.
Your input 1 please:
11
Sorry, your input 1 doesn't match
The actual lucky number is 13.
Your input 2 please:
7
Your input 2 matches!
Your input 3 please:
23
Sorry, your input 3 doesn't match
The actual lucky number is 39.
Your input 4 please:
34
Sorry, your input 4 doesn't match
The actual lucky number is 41.
Your input 5 please:
37
Your input 5 matches!
Your input 6 please:
45
Sorry, your input 6 doesn't match
The actual lucky number is 6.
You matched 2 out of 6 numbers.
Actual lucky numbers: 13 7 39 41 37 6
Your number set is:-- 11 7 23 34 37 45
_______________________________________


Activity 4:












Activity 5:
Write a script that takes a number as an input and reverses it out to the user.
For example, if the original number is 74985, the output should be 58947.

Script CarlTangYongHan-scripting-activity5.txt
_________________________________
#!/bin/bash

echo Please input your number.
read input

# For calculation:
number=$input

# For concatenating string:
numString=""

# Remainder (dynamic):
R=0

while [ $number != 0 ]
do
	R=$((number%10))
	number=$(((number-R)/10))
	numString+="$R"
done

echo Reverted number is: $numString
__________________________________

Example running of script:
ubuntu@ip-172-31-17-240:~$ ./CarlTangYongHan-scripting-activity5.txt
Please input your number.
1234
Reverted number is: 4321
ubuntu@ip-172-31-17-240:~$ ./CarlTangYongHan-scripting-activity5.txt
Please input your number.
234500
Reverted number is: 005432
__________________________________


Activity 6:
Create a script that takes two number parameters a and b and then shows True if a is larger than b or False otherwise.
Create a second version of the script that then tells the user the difference between the two numbers.
Remember to code defensively – ensure that your script handles things appropriately if someone enters things incorrectly!

Script CarlTangYongHan-scripting-activity6.txt
___________________________________
#!/bin/bash

echo Please give two parameters a and b
echo Parameter a:
read a
echo Parameter b:
read b

if [ -z "$a" ] || [ -a "$b" ]
then
        echo Inputs contain null value.
        exit 1
fi

regex='^[+-]?[0-9]+([.][0-9]+)?$'

if ! [[ $a =~ $regex ]] || ! [[ $b =~ $regex ]]
then
        echo Inputs contain non-number.
        exit 1
fi

if (( a > b ))
then
        echo True, a is larger than b.
else
        echo False, a is not larger than b.
fi
_________________________________

Script Activity6B:
_________________________________
$ cat Activity6B
#!/bin/bash

echo Please give two parameters a and b
echo Parameter a:
read a
echo Parameter b:
read b

if [ -z "$a" ] || [ -z "$b" ]
then
        echo Inputs contain null value.
        exit 1
fi

regex='^[+-]?[0-9]+([.][0-9]+)?$'

if ! [[ $a =~ $regex ]] || ! [[ $b =~ $regex ]]
then
        echo Inputs contain non-number.
        exit 1
fi

if (( a > b ))
then
        echo True, a is larger than b.
        echo Difference between two numbers is $(( $a - $b)).
else
        echo False, a is not larger than b.
        echo Difference between two numbers is $(( $b - $a)).
fi
____________________________________


Activity 7:
Create a 10-question true or false quiz game in your script. Choose a topic of your liking for the questions!

Script Activity7:
____________________________________
#!/bin/bash

echo This is a True or False quiz game.
echo "Enter only 't' or 'f' for true or false."

# A separate text file is avoided for easier file management.

# Initiate arrays and block out the [0] location
Questions=("Start here:")
Answers=("Start here:")

# Record user's answers and right or wrong
InputAns=("User answers:")
InputWR=("Right or wrong:")
Score=0

# Populating questions array and answers array:

Questions+=("1. Linux was created by Linus Pauling.")
Answers+=("f")

Questions+=("2. Python was created by Linus Torvalds.")
Answers+=("f")

Questions+=("3. C comes before C++.")
Answers+=("t")

Questions+=("4. Python supports object-oriented programming.")
Answers+=("t")

Questions+=("5. Bash means 'Born as Shell'.")
Answers+=("f")

Questions+=("6. JavaScript evolved from Java.")
Answers+=("f")

Questions+=("7. AWS is a cloud service from Amazon.")
Answers+=("t")

Questions+=("8. Bash does not support for loops.")
Answers+=("f")

Questions+=("9. Linux Bash shares the same commands as DOS.")
Answers+=("f")

Questions+=("10. A Bash script starts with a shebang.")
Answers+=("t")

for i in {1..10}
do
        echo ${Questions[$i]}
        read input
        if [ $input != "t" ] && [ $input != "f" ]
        then
                echo Sorry, wrong input syntax, taken as error.
                InputAns[$i]="Error"
        else
                InputAns[$i]=$input
                if [ $input == ${Answers[$i]} ]
                then
                        Score=$((Score + 1))
                        InputWR[$i]="Right"
                        echo You are right!
                else
                        InputWR[$i]="Wrong"
                        echo Sorry, wrong answer.
                fi
        fi
done

echo You have scored: $Score out of 10.
echo Your answers are:
echo ${InputAns[@]}
echo ${InputWR[@]}
______________________________________________


Activity 8:
Create a script that completes the following tasks:
1. It prompts the user for a series of 5-10 integers.
   - The user must be prompted for a minimum of 5 numbers.
   - After the user has entered 5 numbers, the program should allow the user to stop entry or enter another number.
2. When the user chooses to stop or after 10 numbers have been entered, the program stops prompting for values and performs the following calculations:
   - the product of the integers
   - the average of the integers
   - the sum of the integers
   - the min of the integers
   - the max of the integers
3. After performing the calculations, the program should display the following to the user:
   - the values the user entered
   - each of the calculations, using a phrase that identifies the value
   
Script Activity8:
_______________________________________________
#!/bin/bash


echo "Please enter 5-10 integers."

inputCount=0
userInputs=("User Inputs:")


# Target calculations to keep track
product=1
sum=0
min=""
max=""


# Checking input as numbers
regex='^[+-]?[0-9]+$'

while [ $inputCount -lt 10 ]
do
        read input

        # Give user choice to quit
        if [ $input == "n" ]
        then
                break
        else
                while ! [[ $input =~ $regex ]]
                do
                        echo Please enter a valid number
                        read input
                done
        fi
        userInputs+=($input)
        inputCount=$((inputCount + 1))
        echo inputCount is $inputCount


        # Give user choice to quit
        if [ $input == "n" ]
        then
                break
        fi

        # initiate min and max if necessary:
        if [ -z "$min" ]
        then
                min=$input
        fi

        if [ -z "$max" ]
        then
                max=$input
        fi


        # Update the latest min and max:

        if [ ${#userInputs[@]} > 1 ]
        then
                if [ $input -lt $min ]
                then
                        min=$input
                fi
        fi

        if [ ${#userInputs[@]} > 1 ]
        then
                if [ $input -gt $max ]
                then
                        max=$input
                fi
        fi


        # Update the latest product and sum:
        product=$((product * input))
        sum=$((sum + input))

        # Check for input requirements
        if [ $inputCount -lt 5 ]
        then
                echo Please make at least 5 inputs.
        elif [ $inputCount == 10 ]
        then
                echo You have input 10 integers, that is all.
        else
                echo You have input at least 5 integers,
                echo please feel free to input up to 10 integers.
                echo "Enter 'n' if you don't want to continue input."
        fi

done


# Part 2 & 3:

if [ $inputCount != 0 ]
then
        # Bash cannot do floating point division,
        # need alternative ways to divide
        largeQuotion=$((sum * 1000 / inputCount))
        remainder=$((largeQuotion%1000))
        average="$((sum / inputCount)).$remainder"
fi

if [ $inputCount -lt 5 ]
then
        echo "Sorry, you don't have at least 5 integers input."
else

        echo Your inputs are:
        echo ${userInputs[@]}

        if [ $inputCount != 0 ]
        then
                echo The product of the integers is $product
        fi

        if [ $inputCount != 0 ]
        then
                echo The average of the integers is $average
        fi

        echo The sum of the integers is $sum

        if [ $inputCount != 0 ]
        then
                echo The min of the integers is $min
        fi

        if [ $inputCount != 0 ]
        then
                echo The max of the integers is $max
        fi

fi
________________________________________________
Example of running the script:
______________________________________
Carl@DESKTOP-T2NNS4H MINGW64 ~$ ./Activity8
Please enter 5-10 integers.
2
inputCount is 1
Please make at least 5 inputs.
3
inputCount is 2
Please make at least 5 inputs.
4
inputCount is 3
Please make at least 5 inputs.
5
inputCount is 4
Please make at least 5 inputs.
6
inputCount is 5
You have input at least 5 integers,
please feel free to input up to 10 integers.
Enter 'n' if you don't want to continue input.
7
inputCount is 6
You have input at least 5 integers,
please feel free to input up to 10 integers.
Enter 'n' if you don't want to continue input.
n
Your inputs are:
User Inputs: 2 3 4 5 6 7
The product of the integers is 5040
The average of the integers is 4.500
The sum of the integers is 27
The min of the integers is 2
The max of the integers is 7
________________________________________


Activity 9:
Write a script that takes a file name as a parameter.
- If the file exists, print an error and return a code.
- If the file does not exist, create the file.

Script Activity9:
________________________
#!/bin/bash

echo Please provide file name to check.
read fileName

loc="./*"

for file in $loc
do
        echo Old file is $file
        echo new file is $fileName

        if [ "$fileName" == "$file" ]
        then
                echo Error: File already exist.
                exit 1
        else
                touch $fileName
                exit 0
        fi
done
_________________________________
### NOTE: Unknown bug occured, unable to debug on Git Bash.
### AWS vi is totally unusable at this point. Need to use Git Bash on local machine.


Activity 10:
Write a script that writes random numbers to a file (one number per line).
- The first parameter should be the file name.
- The second parameter is the number of lines to write.
- If the specified file already exists, display a relevant message and return a code.

Script Activity10:
____________________________________
#!/bin/bash

echo Please provide file name and number of lines.

echo File name:
read fileName

echo Number of Lines:
read numLine

if [[ -f "$fileName" ]]
then
        echo Error: file name already exists.
        exit 1
else
        for i in `seq $numLine`
        do
                echo $RANDOM >> $fileName
        done
fi

echo Here is your file content:
cat $fileName
___________________________________
Example of running script:
________________________
Carl@DESKTOP-T2NNS4H MINGW64 ~
$ ./Activity10
Please provide file name and number of lines.
File name:
randomTry1
Number of Lines:
7
Here is your file content:
17885
24646
6437
32402
25250
29019
18215

Carl@DESKTOP-T2NNS4H MINGW64 ~
$ ./Activity10
Please provide file name and number of lines.
File name:
randomTry1
Number of Lines:
4
Error: file name already exists.
________________________


Activity 11:






